/****** Object:  StoredProcedure [CES].[sp_Delete_Admin_UserRRA]    Script Date: 3/26/2021 9:24:25 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/***************************************************************************************************************************************            
* Name						: sp_Delete_Admin_UserRRA            
* Created By				: Cognizant            
* Date Created				: 10-Mar-2021           
* Description				: This stored procedure provides the option to delete existing user RRA they are assigned.  
* Input Parameters			: JSON      
* Output Parameters			: @OUT_ErrorNo            
* Return Value				: 1 - Success / 0 - Fail            
* Assumptions				: None    
* Execution Statement		: Exec CES.sp_Delete_Admin_UserRRA 24,'BDFD2401-040F-4250-B506-444A7684C9AC'
*							  Exec CES.sp_Delete_Admin_UserRRA user_id,current_user_key

* Modified Date     Modified By   Revision Number  Modifications            

*******************************************************************************************************************************************/ 

ALTER PROCEDURE [CES].[sp_Delete_Admin_UserRRA]
	@User_Id			DECIMAL(18),
	@Current_User_Key	VARCHAR(64)
AS 
BEGIN
	SET NOCOUNT ON
	
	
	BEGIN TRY
		DECLARE
				@ErrorMsg				VARCHAR(250),
				@result					NVARCHAR(MAX),
				@current_date			DATETIME

				IF (@User_Id IS NULL or LTRIM(RTRIM(@User_Id)) = '')
				BEGIN
					SET @ErrorMsg = 'User Key provided is blank';
					THROW 50000,@ErrorMsg,1;
				END

				IF (@current_user_key IS NULL or LTRIM(RTRIM(@current_user_key)) = '')
				BEGIN
					SET @ErrorMsg = 'Current logged in user key is blank';
					THROW 50000,@ErrorMsg,1;
				END
				 
				SET @current_date = GETDATE()
				
				IF NOT EXISTS (SELECT 1 FROM CES.[ENTITLEMENT] WHERE USER_SR_KEY = @User_Id AND ISACTIVE=1)
				BEGIN
					SET @ErrorMsg = 'The selected user does not have RRA in system';					
					SET @result=(
							SELECT 0 AS delete_status,@ErrorMsg AS error_msg
							FOR JSON PATH,WITHOUT_ARRAY_WRAPPER, INCLUDE_NULL_VALUES
							)
				END
				ELSE
				BEGIN
				BEGIN TRAN
					UPDATE CES.[ENTITLEMENT]  SET ISACTIVE=0,UPDATED_USER=@Current_User_Key,UPDATED_DATE=@current_date
					WHERE USER_SR_KEY = @User_Id AND ISACTIVE=1					
					SET @result=(
							SELECT 1 AS delete_status,NULL AS error_msg
							FOR JSON PATH,WITHOUT_ARRAY_WRAPPER, INCLUDE_NULL_VALUES
							)
				COMMIT TRAN
				END
				
	
		SELECT @result
		
	END TRY
	BEGIN CATCH
		IF (@@TRANCOUNT >0)
			ROLLBACK TRAN

		SET @ErrorMsg = ERROR_MESSAGE() + 
						' Line Num:' + CONVERT(VARCHAR(5), ERROR_LINE()) + 
						',ErrorNum:' + CONVERT(VARCHAR(5), ERROR_NUMBER()) + 
						',Severity:' + CONVERT(VARCHAR(5), ERROR_SEVERITY()) + 
						',State:' + CONVERT(VARCHAR(10), ERROR_STATE()) + 
						',Procedure:' + CONVERT(VARCHAR(25), ERROR_PROCEDURE());  
		
		
		THROW 50000,@ErrorMsg,1;

		
	END CATCH

	
	SET NOCOUNT OFF
END
========================================================================================================================
/****** Object:  StoredProcedure [CES].[sp_Get_Admin_UserRRAInfo]    Script Date: 3/26/2021 9:26:35 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/***************************************************************************************************************************************            
* Name						: sp_Get_Admin_UserRRAInfo         
* Created By				: Cognizant            
* Date Created				: 10-Mar-2021           
* Description				: This stored procedure used to get list of Region, Route, and Area for selected user.
* Input Parameters			: JSON      
* Output Parameters			: @OUT_ErrorNo            
* Return Value				: N/A            
* Assumptions				: None    
* Execution Statement		: Exec [CES].sp_Get_Admin_UserRRAInfo '10'		
							  Exec [CES].sp_Get_Admin_UserRRAInfo 'user_id'
															         
*								
* Modified Date     Modified By   Revision Number  Modifications            

*******************************************************************************************************************************************/ 



ALTER PROCEDURE [CES].[sp_Get_Admin_UserRRAInfo]
	@User_Id		DECIMAL(18)
AS 
BEGIN
	SET NOCOUNT ON
	
	
	BEGIN TRY
		DECLARE
				@ErrorMsg				VARCHAR(250),
				@result					NVARCHAR(MAX),
				@supplier_name          VARCHAR(50),
				@supplier_id            DECIMAL(18),
				@rra_default			NVARCHAR(MAX),
				@rra_All				NVARCHAR(MAX)
				
		
		--DROP TABLE IF EXISTS #tblUserDefaultRRA_Get;
		--DROP TABLE IF EXISTS #tblUserRRA_Get;						
		--CREATE TABLE #tblUserDefaultRRA_Get
		--(
		--	region_name VARCHAR(64),
		--	route_id DECIMAL(18),
		--	route_name  VARCHAR(64),
		--	area_id DECIMAL(18),
		--	area_name VARCHAR(64),			
		--)

		--CREATE TABLE #tblUserRRA_Get
		--(
		--	region_name VARCHAR(64),
		--	route_id DECIMAL(18),
		--	route_name  VARCHAR(64),
		--	area_id DECIMAL(18),
		--	area_name VARCHAR(64),
		--)	

		  
		-- Validation start

		IF (@User_Id IS NULL)
		BEGIN
			SET @ErrorMsg = 'User Id value is missing';
			DROP TABLE IF EXISTS #tblUserDefaultRRA_Get;
			DROP TABLE IF EXISTS #tblUserRRA_Get;
			THROW 50000,@ErrorMsg,1;
		END
	   -- Validation End
	   
	   --GET SUPPLIER DETAILS
	   SET @supplier_id=(SELECT TOP 1 SUPPLIER_SR_KEY FROM CES.[ENTITLEMENT] WHERE USER_SR_KEY=@User_Id AND ISACTIVE=1)
	   IF @supplier_id IS NULL 
			SET @supplier_name=NULL
	   ELSE 
			SELECT @supplier_name=SUPPLIER_NAME FROM CES.[SUPPLIER] WHERE SUPPLIER_SR_KEY=@supplier_id AND ISACTIVE=1
	  
	   --GET DEFAULT REGION, ROUTE, AREA DETAILS
	  -- IF EXISTS (SELECT 1 FROM CES.[ENTITLEMENT] WHERE USER_SR_KEY=@User_Id AND ISDEFAULT=1 AND ISACTIVE=1)
	  -- BEGIN
		 ----  INSERT INTO #tblUserDefaultRRA_Get
		 ----  (
			----	region_name,
			----	route_id,
			----	route_name,
			----	area_id,
			----	area_name
			----)

			--SELECT @rra_default =
			--(
			--	SELECT O.REGION,O.ORG_SR_KEY,O.ROUTE,A.AREA_SR_KEY,A.AREA_NAME 
			--	FROM CES.ENTITLEMENT EN 
			--	INNER JOIN CES.ORG O ON EN.ORG_SR_KEY=O.ORG_SR_KEY AND O.ISACTIVE=1
			--	LEFT JOIN CES.AREA A ON EN.AREA_SR_KEY=A.AREA_SR_KEY AND EN.ORG_SR_KEY=A.ORG_SR_KEY AND A.ISACTIVE=1
			--	WHERE EN.USER_SR_KEY=@User_Id AND EN.ISACTIVE=1 AND EN.ISDEFAULT=1
			--)
	  -- END
	  -- ELSE
	  -- BEGIN
			--INSERT INTO #tblUserDefaultRRA_Get
			--(
			--	region_name,
			--	route_id,
			--	route_name,
			--	area_id,
			--	area_name
			--)
			--(SELECT '',NULL,'',NULL,'')
	  -- END
	   
	  -- --GET REGION, ROUTE, AREA DETAILS
	  -- IF EXISTS (SELECT 1 FROM CES.[ENTITLEMENT] WHERE USER_SR_KEY=@User_Id  AND ISACTIVE=1)
	  -- BEGIN
		 --  INSERT INTO #tblUserRRA_Get
		 --  (
			--	region_name,
			--	route_id,
			--	route_name,
			--	area_id,
			--	area_name
			--)
			--(
			--	SELECT O.REGION,O.ORG_SR_KEY,O.ROUTE,A.AREA_SR_KEY,A.AREA_NAME 
			--	FROM CES.ENTITLEMENT EN 
			--	INNER JOIN CES.ORG O ON EN.ORG_SR_KEY=O.ORG_SR_KEY AND O.ISACTIVE=1
			--	LEFT JOIN CES.AREA A ON EN.AREA_SR_KEY=A.AREA_SR_KEY AND EN.ORG_SR_KEY=A.ORG_SR_KEY AND A.ISACTIVE=1
			--	WHERE EN.USER_SR_KEY=@User_Id AND EN.ISACTIVE=1 --AND EN.ISDEFAULT=0
			--)
	  -- END
	  -- ELSE
	  -- BEGIN
			--INSERT INTO #tblUserRRA_Get
			--(
			--	region_name,
			--	route_id,
			--	route_name,
			--	area_id,
			--	area_name
			--)
			--(SELECT '',NULL,'',NULL,'')
	  -- END	
	
	IF EXISTS (SELECT 1 FROM CES.[ENTITLEMENT] WHERE USER_SR_KEY=@User_Id  AND ISACTIVE=1)
	BEGIN	
	SET @result=
	(
		SELECT 
			@supplier_id AS supplier_id,
			@supplier_name AS supplier_name,							
			(
					SELECT 
						regions.region_id,
						regions.REGION AS region_name,
						routes.ORG_SR_KEY AS route_id,
						routes.ROUTE AS route_name,
						areas.AREA_SR_KEY AS area_id,
						areas.AREA_NAME AS area_name
					FROM 
						(
							SELECT 
								ROW_NUMBER() OVER (ORDER BY REGION) region_id,
								REGION 
							FROM
							(
								SELECT DISTINCT REGION 
								FROM [CES].ORG
								WHERE ISACTIVE = 1
							)r
						) regions
					INNER JOIN [CES].ORG routes
					ON regions.REGION  = routes.REGION
					LEFT JOIN [CES].AREA areas
					ON routes.ORG_SR_KEY = areas.ORG_SR_KEY
					AND areas.ISACTIVE = 1
					WHERE  routes.ISACTIVE = 1
					AND	EXISTS (SELECT 1 FROM [CES].ENTITLEMENT ent
								WHERE ent.ORG_SR_KEY = routes.ORG_SR_KEY
								AND ISNULL(ent.AREA_SR_KEY,0) = ISNULL(areas.AREA_SR_KEY,0)
								AND ent.USER_SR_KEY = @User_ID
								AND ent.ISACTIVE = 1
								AND ent.ISDEFAULT =1
								)
					
							
					ORDER BY 
						regions.region,
						routes.ROUTE,
						areas.AREA_NAME
					FOR JSON AUTO, INCLUDE_NULL_VALUES
			) user_default_rra,
			(
				SELECT 
					regions.region_id,
					regions.REGION AS region_name,
					routes.ORG_SR_KEY AS route_id,
					routes.ROUTE AS route_name,
					areas.AREA_SR_KEY AS area_id,
					areas.AREA_NAME AS area_name
				FROM 
					(
						SELECT 
							ROW_NUMBER() OVER (ORDER BY REGION) region_id,
							REGION 
						FROM
						(
							SELECT DISTINCT REGION 
							FROM [CES].ORG
							WHERE ISACTIVE = 1
						)r
					) regions
				INNER JOIN [CES].ORG routes
				ON regions.REGION  = routes.REGION
				LEFT JOIN [CES].AREA areas
				ON routes.ORG_SR_KEY = areas.ORG_SR_KEY
				AND areas.ISACTIVE = 1
				WHERE  routes.ISACTIVE = 1
				AND	EXISTS (SELECT 1 FROM [CES].ENTITLEMENT ent
							WHERE ent.ORG_SR_KEY = routes.ORG_SR_KEY
							AND ISNULL(ent.AREA_SR_KEY,0) = ISNULL(areas.AREA_SR_KEY,0)
							AND ent.USER_SR_KEY = @User_ID
							AND ent.ISACTIVE = 1)
							
							
				ORDER BY 
					regions.region,
					routes.ROUTE,
					areas.AREA_NAME
				FOR JSON AUTO, INCLUDE_NULL_VALUES
			) user_associated_rra
			FOR JSON PATH, INCLUDE_NULL_VALUES, WITHOUT_ARRAY_WRAPPER
		)	

	END
	ELSE
	BEGIN
		SET @result=
		(
			SELECT 
				@supplier_id AS supplier_id,
				@supplier_name AS supplier_name,
				JSON_QUERY('[]') AS user_default_rra,
				JSON_QUERY('[]') AS user_associated_rra
			FOR JSON PATH, INCLUDE_NULL_VALUES, WITHOUT_ARRAY_WRAPPER
		)
	END	
		
	SELECT @result
		
	END TRY
	BEGIN CATCH
		SET @ErrorMsg = ERROR_MESSAGE() + 
						' Line Num:' + CONVERT(VARCHAR(5), ERROR_LINE()) + 
						',ErrorNum:' + CONVERT(VARCHAR(5), ERROR_NUMBER()) + 
						',Severity:' + CONVERT(VARCHAR(5), ERROR_SEVERITY()) + 
						',State:' + CONVERT(VARCHAR(10), ERROR_STATE()) + 
						',Procedure:' + CONVERT(VARCHAR(25), ERROR_PROCEDURE());  
		
		--DROP TABLE IF EXISTS #tblUserDefaultRRA_Get;
		--DROP TABLE IF EXISTS #tblUserRRA_Get;	
		THROW 50000,@ErrorMsg,1;

		
	END CATCH
	--DROP TABLE IF EXISTS #tblUserDefaultRRA_Get;
	--DROP TABLE IF EXISTS #tblUserRRA_Get;
	SET NOCOUNT OFF
END
==============================================================================================================
/****** Object:  StoredProcedure [CES].[sp_Get_Asset_Compliance_Risk_Status]    Script Date: 3/26/2021 9:27:28 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/***************************************************************************************************************************************            
* Name						: sp_Get_Asset_Compliance_Risk_Status            
* Created By				: Cognizant            
* Date Created				: 18-Feb-2021           
* Description				: This stored procedure provides the compliance and risk status for assets.  
* Input Parameters			: JSON      
* Output Parameters			: @OUT_ErrorNo            
* Return Value				: N/A            
* Assumptions				: None
* Execution Statement		: Exec [CES].sp_Get_Asset_Compliance_Risk_Status '["3978559C3DD145D9E04400306E4AD01A",
"3978559C3DD345D9E04400306E4AD01A","3978559C3DD445D9E04400306E4AD01A","3978559C3DD545D9E04400306E4AD01A",
"3978559C3DD645D9E04400306E4AD01A","3978559C3DD745D9E04400306E4AD01A","3978559C3DD845D9E04400306E4AD01A",
"3978559C3DD945D9E04400306E4AD01A","3978559C3E2145D9E04400306E4AD01A","3978559C3E2245D9E04400306E4AD01A"]', '7/3/2021' 																		
																	
*								
* Modified Date     Modified By   Revision Number  Modifications            

*******************************************************************************************************************************************/ 



ALTER PROCEDURE [CES].[sp_Get_Asset_Compliance_Risk_Status]
	@Input_JSON				NVARCHAR(MAX),
	@ret_reference_date		DATE
AS 
BEGIN
	SET NOCOUNT ON
	SET ANSI_WARNINGS OFF  --Required for suppressing the warning message from aggregate function (limitation from API)

	BEGIN TRY
		DECLARE
				@ErrorMsg			VARCHAR(250),
				@reference_date     Date,
				@dtl_exam_typ_id		DECIMAL(18),
				@ve_exam_type_id		DECIMAL(18),
				@uw_exam_type_id		DECIMAL(18),
				@exam_report_status_rejected_id DECIMAL(18),
				--@exam_req_status_scheduled_id DECIMAL(18),
				@risk_assessed_status_id DECIMAL(18)
				
		CREATE TABLE #ast_guid_tbl 
		(
			asset_guid VARCHAR(32)
		)

		
			
		INSERT INTO #ast_guid_tbl (asset_guid)
		SELECT[value] FROM OPENJSON(@Input_JSON);

		

		IF @ret_reference_date IS NOT NULL
			SET @reference_date = CONVERT(date,@ret_reference_date, 103)
		ELSE
			SET @reference_date = DATEADD(dd, DATEDIFF(dd, 0, GETDATE()), 0)


		DROP TABLE IF EXISTS #tbl_ComplianceTolerance_sub;
		DROP TABLE IF EXISTS #tbl_ComplianceRiskStatus_sub;

		CREATE TABLE #tbl_ComplianceRiskStatus_sub
		(
			cr_asset_guid			VARCHAR(32),
			cr_exam_type_id			DECIMAL(18),
			cr_freq			VARCHAR(64),		
			cr_compliance_status	VARCHAR(200),
			cr_risk_status	VARCHAR(200)
		)
			
		CREATE TABLE #tbl_ComplianceTolerance_sub
		(
			ct_exam_type_id			    DECIMAL(18),
			ct_interval_months_from		DECIMAL(5),
			ct_interval_months_to		DECIMAL(5),
			ct_site_tolerance_weeks		DECIMAL(5),
			ct_review_tolerance_weeks	DECIMAL(5)
		)

		SELECT @dtl_exam_typ_id = EXAM_TYPE_SR_KEY FROM CES.EXAM_TYPE WHERE EXAM_TYPE = 'Detailed' AND ISACTIVE = 1
		SELECT @ve_exam_type_id = EXAM_TYPE_SR_KEY FROM CES.EXAM_TYPE WHERE EXAM_TYPE = 'Visual' AND ISACTIVE = 1
		SELECT @uw_exam_type_id = EXAM_TYPE_SR_KEY FROM CES.EXAM_TYPE WHERE EXAM_TYPE = 'Underwater' AND ISACTIVE = 1
		SELECT @exam_report_status_rejected_id = REF_VAL_SR_KEY FROM CES.REFERENCE_VALUE WHERE REF_TYP_SR_KEY=(SELECT REF_TYP_SR_KEY FROM CES.REFERENCE_TYPE WHERE REF_TYP_NAME='Exam Report Status') AND REF_VALUE='Rejected'
		--SELECT @exam_req_status_scheduled_id = REF_VAL_SR_KEY FROM CES.REFERENCE_VALUE WHERE REF_TYP_SR_KEY=(SELECT REF_TYP_SR_KEY FROM CES.REFERENCE_TYPE WHERE REF_TYP_NAME='Exam Request Status') AND REF_VALUE='Scheduled'
		SELECT @risk_assessed_status_id = REF_VAL_SR_KEY FROM CES.REFERENCE_VALUE WHERE REF_TYP_SR_KEY=(SELECT REF_TYP_SR_KEY FROM CES.REFERENCE_TYPE WHERE REF_TYP_NAME='Risk Assessment Status') AND REF_VALUE='Risk Assessed (Data)'

		INSERT INTO #tbl_ComplianceTolerance_sub (
			ct_exam_type_id,
			ct_interval_months_from,
			ct_interval_months_to,
			ct_site_tolerance_weeks,
			ct_review_tolerance_weeks
			)
			(SELECT EXAM_TYPE_SR_KEY,FREQ_INTERVAL_MONTHS_FROM,FREQ_INTERVAL_MONTHS_TO,SITE_TOLERANCE_WEEKS,REVIEW_TOLERANCE_WEEKS
  FROM [CES].[COMPLIANCE_TOLERANCE] WHERE ISACTIVE=1 )

  INSERT INTO #tbl_ComplianceRiskStatus_sub
			(
				cr_asset_guid,
				cr_exam_type_id,
				cr_freq,
				cr_compliance_status,
				cr_risk_status)
		(
		SELECT ASSET_GUID,EXAM_TYPE_SR_KEY,FREQ,
		ISNULL(COMPLIANCE_STATUS,' '),
			ISNULL(CASE --need to check if the compliant is blank
				WHEN LTRIM(RTRIM(UPPER(COMPLIANCE_STATUS))) = '' THEN '' --WHEN COMPLIANT IS BLANK THEN RISK STATUS ALSO BLANK
				WHEN LTRIM(RTRIM(UPPER(COMPLIANCE_STATUS))) = 'COMPLIANT' THEN 'Not Required' -- COMPLIANCE STATUS IS COMPLIANT
				--NEED TO CHECK
				WHEN LTRIM(RTRIM(UPPER(COMPLIANCE_STATUS))) = 'NON-COMPLIANT AWAITING SIGN-OFF' THEN 'Not Required' -- COMPLIANCE STATUS IS NOT COMPLIANT FOR RECOMMENDATION REVIEW (SIGN OFF)
				WHEN LTRIM(RTRIM(UPPER(COMPLIANCE_STATUS))) = 'NON-COMPLIANT ON-SITE' OR  LTRIM(RTRIM(UPPER(COMPLIANCE_STATUS))) = 'NON-COMPLIANT FOR SUBMISSION' THEN  -- COMPLIANCE STATUS IS COMPLIANTNON-COMPLIANT ON SITE OR NON-COMPLIANT FOR SUBMISSION
				CASE WHEN RA_REVIEW_DATE IS NOT NULL THEN  -- RA REVIEW DATE AVAILABLE YES 
					CASE WHEN @reference_date<RA_EXPIRY_DATE THEN  -- REFERENCE DATE < RA EXPIRY DATE 
						CASE WHEN @reference_date<RA_REVIEW_DATE THEN -- REFERENCE DATE < RA REVIEW DATE 
							CASE WHEN RA_RISK_ASSESS_STATUS=@risk_assessed_status_id THEN 'Risk Assessed (Data)' --RA STATUS IS Risk Assessed (Data)
							ELSE --RA STATUS IS NOT Risk Assessed (Data)
								CASE WHEN LTRIM(RTRIM(UPPER(RA_RISK_SCORE)))='HIGH' THEN 'Complete (result: Higher)' --RISK ASSESSMENT IS HIGHER 
								ELSE 'Complete (result: Lower)'--RISK ASSESSMENT IS LOWER 
								END
							END
						ELSE 'Review Required' -- REFERENCE DATE >= RA REVIEW DATE 
						END
					ELSE 'Not Compliant (CIV/021)' -- REFERENCE DATE >= RA EXPIRY DATE 
					END
				ELSE  -- RA REVIEW DATE NOT AVAILABLE
					CASE WHEN @reference_date<DATEADD(WEEK, 1, CMP_D_ST) THEN 'Awaiting Risk Assessment' --REFERENCE DATE <SITE TOLERANCE + 1 WEEK
					ELSE 'Required' --REFERENCE DATE >=SITE TOLERANCE + 1 WEEK
					END
				END

			END,
			' ')
			AS RISK_STATUS
			FROM
			(
				SELECT 
				EXAM_TYPE_SR_KEY,
				ASSET_GUID,FREQ,
				CMP_D_ST,LAE_D_FRE_ST,CMP_D_ST_RT,
				CASE WHEN COMP_DATE IS NULL THEN '' --COMPLIANT IS BLANK
				ELSE 
					CASE 
						WHEN @reference_date>CMP_D_ST THEN  -- REFERENCE DATE > COMPLIANCE DATE + SITE TOLERANCE						
						CASE 
						WHEN LAE_D_FRE_ST IS NULL THEN 'Non-compliant on-site' 
						WHEN @reference_date>LAE_D_FRE_ST THEN 'Non-compliant on-site' -- REFERENCE DATE > LAST ACTUAL EXAM DATE + FREQ + SITE TOLERANCE
						ELSE  --REFERENCE DATE <= LAST ACTUAL EXAM DATE + FREQ + SITE TOLERANCE
							CASE WHEN EXAM_SUBMISSION_DATE IS NOT NULL THEN -- SUBMISSION FOR THAT EXAM ID OF THE LATEST ACTUAL EXAM DATE EXISTS
								CASE WHEN EXAM_REPORT_STATUS = @exam_report_status_rejected_id THEN -- EXAM REJECTED YES
									CASE 
									WHEN CMP_D_ST_RT IS NULL THEN 'Non-compliant for submission'
									WHEN @reference_date>CMP_D_ST_RT THEN 'Non-compliant for submission' -- REFERENCE DATE > COMPLANCE DATE + SITE TOLERANCE + REVIEW TOLERANCE
									ELSE 'Compliant' -- REFERENCE DATE <= COMPLANCE DATE + SITE TOLERANCE + REVIEW TOLERANCE 
									END
								ELSE -- EXAM REJECTED NO
									CASE WHEN EXAM_SIGNOFF_DATE IS NOT NULL THEN 'Compliant'  -- EXAM SIGN OFF DATE RECORDED YES
									ELSE -- EXAM SIGN OFF DATE RECORDED NO
										CASE 
										WHEN CMP_D_ST_RT IS NULL THEN 'Non-compliant awaiting sign-off' 
										WHEN @reference_date>CMP_D_ST_RT THEN 'Non-compliant awaiting sign-off'  -- REFERENCE DATE > COMPLANCE DATE + SITE TOLERANCE + REVIEW TOLERANCE
										ELSE 'Compliant'  -- REFERENCE DATE <= COMPLANCE DATE + SITE TOLERANCE + REVIEW TOLERANCE
										END
									END
								END
							ELSE -- SUBMISSION FOR THAT EXAM ID OF THE LATEST ACTUAL EXAM DATE NOT EXISTS
								CASE 
								WHEN CMP_D_ST_RT IS NULL THEN  'Non-compliant for submission'
								WHEN @reference_date>CMP_D_ST_RT THEN 'Non-compliant for submission' -- REFERENCE DATE > COMPLANCE DATE + SITE TOLERANCE + REVIEW TOLERANCE
								ELSE 'Compliant' END -- REFERENCE DATE <= COMPLANCE DATE + SITE TOLERANCE + REVIEW TOLERANCE
							END 
						END 
					ELSE 'Compliant'  -- REFERENCE DATE <= COMPLIANCE DATE + SITE TOLERANCE
					END
				END AS Compliance_Status
				,RA_REVIEW_DATE,RA_EXPIRY_DATE,RA_RISK_SCORE,RA_RISK_ASSESS_STATUS
				 FROM (
						SELECT 
						
						ast.asset_guid AS ASSET_GUID,EX.EXAM_TYPE_SR_KEY,
						CAST (ISNULL(ec.INTERVAL_YEARS,0) AS VARCHAR(5))+ 'y '+CAST (ISNULL(ec.INTERVAL_MONTHS,0) AS VARCHAR(5))+ 'm '+CAST (ISNULL(ec.INTERVAL_DAYS,0) AS VARCHAR(5))+'d'
						AS FREQ,
						EX.EXAM_PLANNED_DATE,EX.EXAM_ACTUAL_DATE,EX.EXAM_SIGNOFF_DATE,EX.EXAM_REQ_STATUS,EX.EXAM_REPORT_STATUS,EX.EXAM_SUBMISSION_DATE,
						CMP.COMP_DATE,						
						Case when EX.EXAM_TYPE_SR_KEY=@ve_exam_type_id then CASE WHEN CMP.COMP_DATE IS NOT NULL THEN DATEADD(WEEK, (SELECT ct_site_tolerance_weeks FROM #tbl_ComplianceTolerance_sub WHERE ct_exam_type_id=@ve_exam_type_id AND ISNULL(((CASE WHEN ec.INTERVAL_DAYS IS NULL THEN 0 ELSE (ec.INTERVAL_DAYS/30)END) +ISNULL(ec.INTERVAL_MONTHS,0)+(ISNULL(ec.INTERVAL_YEARS,0)*12)),0) BETWEEN ct_interval_months_from AND ct_interval_months_to), CMP.COMP_DATE) ELSE NULL END 
							when EX.EXAM_TYPE_SR_KEY=@dtl_exam_typ_id then CASE WHEN CMP.COMP_DATE IS NOT NULL THEN DATEADD(WEEK, (SELECT ct_site_tolerance_weeks FROM #tbl_ComplianceTolerance_sub WHERE ct_exam_type_id=@dtl_exam_typ_id AND ISNULL(((CASE WHEN ec.INTERVAL_DAYS IS NULL THEN 0 ELSE (ec.INTERVAL_DAYS/30)END) +ISNULL(ec.INTERVAL_MONTHS,0)+(ISNULL(ec.INTERVAL_YEARS,0)*12)),0) BETWEEN ct_interval_months_from AND ct_interval_months_to), CMP.COMP_DATE) ELSE NULL END 
							--when EX.EXAM_TYPE_SR_KEY=@uw_exam_type_id then CASE WHEN EX.EXAM_PLANNED_DATE IS NOT NULL THEN CONVERT(DATE,CONCAT('31-03-',CASE WHEN (MONTH(EX.EXAM_PLANNED_DATE)) <= 3 THEN YEAR(EX.EXAM_PLANNED_DATE) ELSE YEAR(EX.EXAM_PLANNED_DATE)+1 END),103) ELSE NULL END 
							when EX.EXAM_TYPE_SR_KEY=@uw_exam_type_id then CASE WHEN EX.EXAM_ACTUAL_DATE IS NOT NULL THEN CONVERT(DATE,CONCAT('31-03-',CASE WHEN (MONTH(EX.EXAM_ACTUAL_DATE)) <= 3 THEN YEAR(EX.EXAM_ACTUAL_DATE) ELSE YEAR(EX.EXAM_ACTUAL_DATE)+1 END),103) ELSE NULL END 
						End AS CMP_D_ST, 						
						Case when EX.EXAM_TYPE_SR_KEY=@ve_exam_type_id then CASE WHEN EX.EXAM_ACTUAL_DATE IS NOT NULL THEN DATEADD(WEEK, (SELECT ct_site_tolerance_weeks FROM #tbl_ComplianceTolerance_sub WHERE ct_exam_type_id=@ve_exam_type_id AND ISNULL(((CASE WHEN ec.INTERVAL_DAYS IS NULL THEN 0 ELSE (ec.INTERVAL_DAYS/30)END) +ISNULL(ec.INTERVAL_MONTHS,0)+(ISNULL(ec.INTERVAL_YEARS,0)*12)),0) BETWEEN ct_interval_months_from AND ct_interval_months_to), DATEADD(DAY, ISNULL(EC.INTERVAL_DAYS,0), DATEADD(MONTH, ISNULL(EC.INTERVAL_MONTHS,0), DATEADD(YEAR, ISNULL(EC.INTERVAL_YEARS,0), EX.EXAM_ACTUAL_DATE)))) ELSE NULL END 
							when EX.EXAM_TYPE_SR_KEY=@dtl_exam_typ_id then CASE WHEN EX.EXAM_ACTUAL_DATE IS NOT NULL THEN DATEADD(WEEK, (SELECT ct_site_tolerance_weeks FROM #tbl_ComplianceTolerance_sub WHERE ct_exam_type_id=@dtl_exam_typ_id AND ISNULL(((CASE WHEN ec.INTERVAL_DAYS IS NULL THEN 0 ELSE (ec.INTERVAL_DAYS/30)END) +ISNULL(ec.INTERVAL_MONTHS,0)+(ISNULL(ec.INTERVAL_YEARS,0)*12)),0) BETWEEN ct_interval_months_from AND ct_interval_months_to), DATEADD(DAY, ISNULL(EC.INTERVAL_DAYS,0), DATEADD(MONTH, ISNULL(EC.INTERVAL_MONTHS,0), DATEADD(YEAR, ISNULL(EC.INTERVAL_YEARS,0), EX.EXAM_ACTUAL_DATE)))) ELSE NULL END 
							when EX.EXAM_TYPE_SR_KEY=@uw_exam_type_id then  CASE WHEN EX.EXAM_ACTUAL_DATE IS NOT NULL THEN DATEADD(DAY, ISNULL(EC.INTERVAL_DAYS,0), DATEADD(MONTH, ISNULL(EC.INTERVAL_MONTHS,0), DATEADD(YEAR, ISNULL(EC.INTERVAL_YEARS,0), EX.EXAM_ACTUAL_DATE))) ELSE NULL END 
							--(CASE WHEN EX.EXAM_PLANNED_DATE IS NOT NULL THEN CONVERT(DATE,CONCAT('31-03-',CASE WHEN (MONTH(EX.EXAM_PLANNED_DATE)) <= 3 THEN YEAR(EX.EXAM_PLANNED_DATE) ELSE YEAR(EX.EXAM_PLANNED_DATE)+1 END),103) ELSE NULL END)  - NEED TO CONFIRM ON THE SITE TOLERANCE FOR UNDERWATER
							-- +frequency
						End 
						AS LAE_D_FRE_ST,
						Case when EX.EXAM_TYPE_SR_KEY=@ve_exam_type_id then CASE WHEN CMP.COMP_DATE IS NOT NULL THEN DATEADD(WEEK, (SELECT ct_site_tolerance_weeks+ct_review_tolerance_weeks FROM #tbl_ComplianceTolerance_sub WHERE ct_exam_type_id=@ve_exam_type_id AND ISNULL(((CASE WHEN ec.INTERVAL_DAYS IS NULL THEN 0 ELSE (ec.INTERVAL_DAYS/30)END) +ISNULL(ec.INTERVAL_MONTHS,0)+(ISNULL(ec.INTERVAL_YEARS,0)*12)),0) BETWEEN ct_interval_months_from AND ct_interval_months_to), CMP.COMP_DATE)  ELSE NULL END 
							 when EX.EXAM_TYPE_SR_KEY=@dtl_exam_typ_id then CASE WHEN CMP.COMP_DATE IS NOT NULL THEN DATEADD(WEEK, (SELECT ct_site_tolerance_weeks+ct_review_tolerance_weeks FROM #tbl_ComplianceTolerance_sub WHERE ct_exam_type_id=@dtl_exam_typ_id AND ISNULL(((CASE WHEN ec.INTERVAL_DAYS IS NULL THEN 0 ELSE (ec.INTERVAL_DAYS/30)END) +ISNULL(ec.INTERVAL_MONTHS,0)+(ISNULL(ec.INTERVAL_YEARS,0)*12)),0) BETWEEN ct_interval_months_from AND ct_interval_months_to), CMP.COMP_DATE)  ELSE NULL END 
							 --when EX.EXAM_TYPE_SR_KEY=@uw_exam_type_id then CASE WHEN EX.EXAM_PLANNED_DATE IS NOT NULL THEN DATEADD(WEEK, (SELECT ct_review_tolerance_weeks FROM #tbl_ComplianceTolerance_sub WHERE ct_exam_type_id=@uw_exam_type_id AND ISNULL(((CASE WHEN ec.INTERVAL_DAYS IS NULL THEN 0 ELSE (ec.INTERVAL_DAYS/30)END) +ISNULL(ec.INTERVAL_MONTHS,0)+(ISNULL(ec.INTERVAL_YEARS,0)*12)),0) BETWEEN ct_interval_months_from AND ct_interval_months_to), CONVERT(DATE,CONCAT('31-03-',CASE WHEN (MONTH(EX.EXAM_PLANNED_DATE)) <= 3 THEN YEAR(EX.EXAM_PLANNED_DATE) ELSE YEAR(EX.EXAM_PLANNED_DATE)+1 END),103) ) ELSE NULL END
							 when EX.EXAM_TYPE_SR_KEY=@uw_exam_type_id then CASE WHEN EX.EXAM_ACTUAL_DATE IS NOT NULL THEN DATEADD(WEEK, (SELECT ct_review_tolerance_weeks FROM #tbl_ComplianceTolerance_sub WHERE ct_exam_type_id=@uw_exam_type_id AND ISNULL(((CASE WHEN ec.INTERVAL_DAYS IS NULL THEN 0 ELSE (ec.INTERVAL_DAYS/30)END) +ISNULL(ec.INTERVAL_MONTHS,0)+(ISNULL(ec.INTERVAL_YEARS,0)*12)),0) BETWEEN ct_interval_months_from AND ct_interval_months_to), CONVERT(DATE,CONCAT('31-03-',CASE WHEN (MONTH(EX.EXAM_ACTUAL_DATE)) <= 3 THEN YEAR(EX.EXAM_ACTUAL_DATE) ELSE YEAR(EX.EXAM_ACTUAL_DATE)+1 END),103) ) ELSE NULL END
						End 						
						--CASE WHEN EX.EXAM_PLANNED_DATE IS NOT NULL THEN DATEADD(WEEK, (SELECT ct_review_tolerance_weeks FROM #tbl_ComplianceTolerance_sub WHERE ct_exam_type_id=EX.EXAM_TYPE_SR_KEY AND ISNULL(((CASE WHEN ec.INTERVAL_DAYS IS NULL THEN 0 ELSE (ec.INTERVAL_DAYS/30)END) +ISNULL(ec.INTERVAL_MONTHS,0)+(ISNULL(ec.INTERVAL_YEARS,0)*12)),0) BETWEEN ct_interval_months_from AND ct_interval_months_to), CONVERT(DATE,CONCAT('31-03-',CASE WHEN (MONTH(EX.EXAM_PLANNED_DATE)) <= 3 THEN YEAR(EX.EXAM_PLANNED_DATE) ELSE YEAR(EX.EXAM_PLANNED_DATE)+1 END),103) ) ELSE NULL END
						AS CMP_D_ST_RT, -- 31st Mar + review tolerance
						
						RA.ASSESSMENT_DATE AS RA_ASSESSMENT_DATE,RA.REVIEW_DATE AS RA_REVIEW_DATE,
						RA.EXPIRY_DATE AS RA_EXPIRY_DATE,RA.RISK_SCORE AS RA_RISK_SCORE,RA.RISK_ASSESS_STATUS AS RA_RISK_ASSESS_STATUS
						FROM 
						 #ast_guid_tbl ast
						INNER JOIN CES.EXAM EX ON EX.ASSET_GUID=ast.asset_guid AND UPPER(EX.IS_LAST_EXAM)='Y' AND EX.ISACTIVE=1
						--INNER JOIN CES.COMPLIANCE CMP ON CMP.ASSET_GUID=ast.asset_guid AND CMP.EXAM_TYPE_SR_KEY=EX.EXAM_TYPE_SR_KEY AND CMP.ISACTIVE=1 AND @reference_date BETWEEN CMP.EFFECTIVE_FROM_DT AND ISNULL(CMP.EFFECTIVE_TO_DT,CONVERT(DATE,'31/12/9999',103)) 
						OUTER APPLY
							(
								SELECT
									tmp1.COMP_DATE
								FROM 
								(
									SELECT 
										--CONVERT(VARCHAR,ec.LAST_EXAM_DATE,103) last_dtl_exam,			
										CM.COMP_DATE as COMP_DATE,
										ROW_NUMBER() OVER (PARTITION BY CM.ASSET_GUID ,CM.EXAM_TYPE_SR_KEY  ORDER BY CM.EFFECTIVE_FROM_DT DESC) Crnk
									FROM [CES].COMPLIANCE CM
									WHERE CM.ASSET_GUID = ast.ASSET_GUID and EX.EXAM_TYPE_SR_KEY=CM.EXAM_TYPE_SR_KEY					
									AND CM.ISACTIVE = 1
									AND @reference_date BETWEEN CM.EFFECTIVE_FROM_DT AND ISNULL(CM.EFFECTIVE_TO_DT,'12/31/9999')
								)tmp1
								WHERE tmp1.Crnk=1
							)CMP
						--LEFT JOIN CES.EXAM_CYCLE EC ON EC.ASSET_GUID=ast.asset_guid AND EC.EXAM_TYPE_SR_KEY=EX.EXAM_TYPE_SR_KEY
						OUTER APPLY
							(
								SELECT
									tmp.INTERVAL_DAYS AS INTERVAL_DAYS,
									tmp.INTERVAL_MONTHS AS INTERVAL_MONTHS,
									tmp.INTERVAL_YEARS AS INTERVAL_YEARS
								FROM 
								(
									SELECT 
										ISNULL(exc.INTERVAL_DAYS,0) AS INTERVAL_DAYS,
										ISNULL(exc.INTERVAL_MONTHS,0) AS INTERVAL_MONTHS,
										ISNULL(exc.INTERVAL_YEARS,0) AS INTERVAL_YEARS,
										ROW_NUMBER() OVER (PARTITION BY exc.ASSET_GUID ,exc.EXAM_TYPE_SR_KEY  ORDER BY exc.EFFECTIVE_FROM_DT DESC) Ernk
									FROM [CES].EXAM_CYCLE exc
									WHERE exc.ASSET_GUID = ast.ASSET_GUID
									AND exc.EXAM_TYPE_SR_KEY = EX.EXAM_TYPE_SR_KEY
									AND exc.ISACTIVE = 1
									AND @reference_date BETWEEN exc.EFFECTIVE_FROM_DT AND ISNULL(exc.EFFECTIVE_TO_DT,'12/31/9999')
								)tmp
								WHERE tmp.Ernk=1
							)EC
						LEFT JOIN CES.RISK_ASSESSMENT RA ON RA.ASSET_GUID = ast.asset_guid AND RA.EXAM_TYPE_SR_KEY = EX.EXAM_TYPE_SR_KEY AND RA.ISACTIVE=1 AND UPPER(RA.ISLATEST)='Y' 
						-- ast inner join exam inner join comp left join ex_cy left join RA
						--where EX.EXAM_TYPE_SR_KEY=3
						WHERE EX.EXAM_TYPE_SR_KEY IN (@dtl_exam_typ_id,@ve_exam_type_id,@uw_exam_type_id)

					) RS --WHERE Ernk = 1 AND Crnk = 1

				) RARS		
		)
		
	--select * from #tbl_ComplianceRiskStatus_sub			
		SELECT 
			CR.cr_asset_guid AS asset_guid,
			MAX(CASE WHEN CR.cr_exam_type_id=@dtl_exam_typ_id THEN ISNULL(CR.cr_compliance_status,' ') END) AS dtl_compliance,
			MAX(CASE WHEN CR.cr_exam_type_id=@dtl_exam_typ_id THEN ISNULL(CR.cr_risk_status,' ') END) AS dtl_risk_status,
			MAX(CASE WHEN CR.cr_exam_type_id=@dtl_exam_typ_id THEN ISNULL(CR.cr_freq,' ') END) AS dtl_frequency,
			@dtl_exam_typ_id AS dtl_exam_type_id,

			MAX(CASE WHEN CR.cr_exam_type_id=@ve_exam_type_id THEN ISNULL(CR.cr_compliance_status,' ') END) AS ve_compliance,
			MAX(CASE WHEN CR.cr_exam_type_id=@ve_exam_type_id THEN ISNULL(CR.cr_risk_status,' ') END) AS ve_risk_status,
			MAX(CASE WHEN CR.cr_exam_type_id=@ve_exam_type_id THEN ISNULL(CR.cr_freq,' ') END) AS ve_frequency,
			@ve_exam_type_id AS ve_exam_type_id,

			MAX(CASE WHEN CR.cr_exam_type_id=@uw_exam_type_id THEN ISNULL(CR.cr_compliance_status,' ') END) AS uw_compliance,
			MAX(CASE WHEN CR.cr_exam_type_id=@uw_exam_type_id THEN ISNULL(CR.cr_risk_status,' ') END) AS uw_risk_status,
			MAX(CASE WHEN CR.cr_exam_type_id=@uw_exam_type_id THEN ISNULL(CR.cr_freq,' ') END) AS uw_frequency,
			@uw_exam_type_id AS uw_exam_type_id
			

		FROM #tbl_ComplianceRiskStatus_sub CR
		GROUP BY
			CR.cr_asset_guid

	END TRY
	BEGIN CATCH
	
		SET @ErrorMsg = ERROR_MESSAGE() + 
						' Line Num:' + CONVERT(VARCHAR(5), ERROR_LINE()) + 
						',ErrorNum:' + CONVERT(VARCHAR(5), ERROR_NUMBER()) + 
						',Severity:' + CONVERT(VARCHAR(5), ERROR_SEVERITY()) + 
						',State:' + CONVERT(VARCHAR(10), ERROR_STATE()) + 
						',Procedure:' + CONVERT(VARCHAR(25), ERROR_PROCEDURE());  
		
		DROP TABLE IF EXISTS #ast_guid_tbl;
		DROP TABLE IF EXISTS #tbl_ComplianceRiskStatus_sub;	
		DROP TABLE IF EXISTS #tbl_ComplianceTolerance_sub;
		THROW 50000,@ErrorMsg,1;

		
	END CATCH

	DROP TABLE IF EXISTS #ast_guid_tbl;
	DROP TABLE IF EXISTS #tbl_ComplianceRiskStatus_sub;	
	DROP TABLE IF EXISTS #tbl_ComplianceTolerance_sub;

	SET ANSI_WARNINGS ON
	SET NOCOUNT OFF
END
==========================================================================================
/****** Object:  StoredProcedure [CES].[sp_Get_AssetSearch_SearchResult]    Script Date: 3/26/2021 9:29:09 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/***************************************************************************************************************************************            
* Name						: sp_Get_AssetSearch_SearchResult            
* Created By				: Cognizant            
* Date Created				: 11-Dec-2020           
* Description				: This stored procedure provides the search result for asset basic and advanced search.  
* Input Parameters			: JSON      
* Output Parameters			: @OUT_ErrorNo            
* Return Value				: N/A            
* Assumptions				: None    
* Execution Statement		: Exec [CES].sp_Get_AssetSearch_SearchResult '{
																		"region_name": "Southern",
																		"route_id": 9,
																		"area_id": 3,
																		"elr_id": [106,159,288],	
																		"start_mileage_from": -1,
																		"start_mileage_to": 99999,
																		"railway_id": null,
																		"ast_grp_id": 0,
																		"ast_typ_id": [0],
																		"opstat_id": 0,
																		"ownparty_name": null,
																		"asset_desc": null,
																		"mattyp_id": 0,
																		"hceflg_name": "All",
																		"cmi_score_from": -1,
																		"cmi_score_to": 99999,
																		"strccarries_name": null,
																		"strcover_name": null,
																		"outsideparty_name": null,
																		"isexporttodoc": "N",
																		"sortcolumn": "StartMileage",
																		"sortorder": "desc",
																		"pageno": 1,
																		"rowsperpage": 25
																	}'
*								
* Modified Date     Modified By   Revision Number  Modifications            

*******************************************************************************************************************************************/ 



ALTER PROCEDURE [CES].[sp_Get_AssetSearch_SearchResult]
	@Input_JSON		NVARCHAR(MAX)
AS
BEGIN
	SET NOCOUNT ON
	BEGIN TRY
		DECLARE
				@ErrorMsg			VARCHAR(250),
				@result				NVARCHAR(MAX),
				@region_name		VARCHAR(64),
				@route_id			DECIMAL(18),
				@area_id			DECIMAL(18),
				@elr_id				NVARCHAR(MAX),
				@start_mileage_from	DECIMAL(18,4),
				@start_mileage_to	DECIMAL(18,4),
				@railway_id			VARCHAR(64),
				@ast_grp_id			DECIMAL(18),
				@opstat_id			DECIMAL(18),
				@ownparty_name		VARCHAR(64),
				@asset_desc			VARCHAR(200),
				@mattyp_id			DECIMAL(18),
				@hceflg_name		VARCHAR(4),
				@cmi_score_from		DECIMAL(18),
				@cmi_score_to		DECIMAL(18),
				@strccarries_name	VARCHAR(64),
				@strcover_name		VARCHAR(64),
				@isexporttodoc		VARCHAR(1),
				@sortcolumn			VARCHAR(30),
				@sortorder			VARCHAR(5),
				@pageno				DECIMAL(18),
				@rowsperpage		DECIMAL(18),
				@ast_typ_array		NVARCHAR(MAX),
				@isasttypselected	CHAR(1) = 'N',
				@isbasicsearch		CHAR(1) = 'Y',
				@totalresultcnt		SMALLINT,
				@current_date		DATE = GETDATE(),
				@dtl_exam_typ_id	DECIMAL(18),
				@vis_exam_typ_id	DECIMAL(18),
				@outsideparty_name	VARCHAR(64),
				@iselrselected		CHAR(1) = 'N'

		DECLARE @ast_typ TABLE
		(
			ast_typ_id DECIMAL(18)
		)

		CREATE TABLE #tbl_SearchResult
		(
				asset_guid			VARCHAR(32),
				region				VARCHAR(64),
				route				VARCHAR(64),
				elr					VARCHAR(4),
				start_mileage		DECIMAL(18,4),
				--end_mileage			DECIMAL(18,4),
				railway_id			VARCHAR(64),
				asset_desc			VARCHAR(200),
				asset_grp			VARCHAR(64),
				asset_type			VARCHAR(64),
				operation_status	VARCHAR(500),
				owning_party		VARCHAR(64),
				primary_material	VARCHAR(500),
				last_Dtl_Exam		DATE,
				--dtl_exam_freq		VARCHAR(20),
				last_vis_exam		DATE,
				outside_party		VARCHAR(64),
				structure_carries	VARCHAR(64),
				structure_over		VARCHAR(64),
				hce_flg				VARCHAR(4),
				cmi_score			DECIMAL(3),
				tenanted_flg		VARCHAR(4)
		)

		DECLARE @elr_id_array TABLE
		(
			elr_id DECIMAL(18)
		)

		SELECT 
			@region_name = COALESCE(@region_name,CASE LOWER([key]) WHEN 'region_name' THEN [value] ELSE NULL END),
			@route_id = COALESCE(@route_id,CASE LOWER([key]) WHEN 'route_id' THEN [value] ELSE NULL END),
			@area_id = COALESCE(@area_id,CASE LOWER([key]) WHEN 'area_id' THEN [value] ELSE NULL END),
			@elr_id = COALESCE(@elr_id,CASE LOWER([key]) WHEN 'elr_id' THEN [value] ELSE NULL END),
			@start_mileage_from = COALESCE(@start_mileage_from,CASE LOWER([key]) WHEN 'start_mileage_from' THEN [value] ELSE NULL END),
			@start_mileage_to = COALESCE(@start_mileage_to,CASE LOWER([key]) WHEN 'start_mileage_to' THEN [value] ELSE NULL END),
			@railway_id = COALESCE(@railway_id,CASE LOWER([key]) WHEN 'railway_id' THEN [value] ELSE NULL END),
			@ast_grp_id = COALESCE(@ast_grp_id,CASE LOWER([key]) WHEN 'ast_grp_id' THEN [value] ELSE NULL END),
			@ast_typ_array = COALESCE(@ast_typ_array,CASE LOWER([key]) WHEN 'ast_typ_id' THEN [value] ELSE NULL END),
			@opstat_id = COALESCE(@opstat_id,CASE LOWER([key]) WHEN 'opstat_id' THEN [value] ELSE NULL END),
			@ownparty_name = COALESCE(@ownparty_name,CASE LOWER([key]) WHEN 'ownparty_name' THEN [value] ELSE NULL END),
			@asset_desc = COALESCE(@asset_desc,CASE LOWER([key]) WHEN 'asset_desc' THEN [value] ELSE NULL END),
			@mattyp_id = COALESCE(@mattyp_id,CASE LOWER([key]) WHEN 'mattyp_id' THEN [value] ELSE NULL END),
			@hceflg_name = COALESCE(@hceflg_name,CASE LOWER([key]) WHEN 'hceflg_name' THEN [value] ELSE NULL END),
			@cmi_score_from = COALESCE(@cmi_score_from,CASE LOWER([key]) WHEN 'cmi_score_from' THEN [value] ELSE NULL END),
			@cmi_score_to = COALESCE(@cmi_score_to,CASE LOWER([key]) WHEN 'cmi_score_to' THEN [value] ELSE NULL END),
			@strccarries_name = COALESCE(@strccarries_name,CASE LOWER([key]) WHEN 'strccarries_name' THEN [value] ELSE NULL END),
			@strcover_name = COALESCE(@strcover_name,CASE LOWER([key]) WHEN 'strcover_name' THEN [value] ELSE NULL END),
			@outsideparty_name = COALESCE(@outsideparty_name,CASE LOWER([key]) WHEN 'outsideparty_name' THEN [value] ELSE NULL END),
			@isexporttodoc = COALESCE(@isexporttodoc,CASE LOWER([key]) WHEN 'isexporttodoc' THEN [value] ELSE NULL END),
			@sortcolumn = COALESCE(@sortcolumn,CASE LOWER([key]) WHEN 'sortcolumn' THEN [value] ELSE NULL END),
			@sortorder = COALESCE(@sortorder,CASE LOWER([key]) WHEN 'sortorder' THEN [value] ELSE NULL END),
			@pageno = COALESCE(@pageno,CASE LOWER([key]) WHEN 'pageno' THEN [value] ELSE NULL END),
			@rowsperpage = COALESCE(@rowsperpage,CASE LOWER([key]) WHEN 'rowsperpage' THEN [value] ELSE NULL END)

		FROM	OPENJSON(@Input_JSON);



		IF (@region_name IS NULL)
		BEGIN

			SET @ErrorMsg = 'Region cannot be NULL';
			DROP TABLE IF EXISTS #tbl_SearchResult;
			THROW 50000,@ErrorMsg,1;
		END


		IF @ast_typ_array IS NOT NULL 
		BEGIN
			INSERT INTO @ast_typ (ast_typ_id)
			SELECT[value] FROM OPENJSON(@ast_typ_array);

			IF EXISTS (SELECT 1 FROM @ast_typ WHERE ast_typ_id=0)
				SET @isasttypselected = 'N'
			ELSE
				SET @isasttypselected = 'Y'
		END 

		IF @elr_id IS NOT NULL 
		BEGIN
			INSERT INTO @elr_id_array (elr_id)
			SELECT[value] FROM OPENJSON(@elr_id);

			IF EXISTS (SELECT 1 FROM @elr_id_array WHERE elr_id=0)
				SET @iselrselected = 'N'
			ELSE
				SET @iselrselected = 'Y'
		END 

		IF (@iselrselected = 'N' AND @start_mileage_from = -1 AND @start_mileage_to = 99999 AND @railway_id IS NULL AND @ast_grp_id = 0 AND @isasttypselected = 'N' AND @opstat_id = 0 AND @ownparty_name IS NULL
			AND @asset_desc IS NULL AND @mattyp_id = 0 AND @hceflg_name = 'All' AND @cmi_score_from = -1 AND @cmi_score_to = 99999 AND @strccarries_name IS NULL AND
			@strcover_name IS NULL AND @outsideparty_name IS NULL)
			
			SET @isbasicsearch = 'Y'
		ELSE
			SET @isbasicsearch = 'N'
		
		SELECT @dtl_exam_typ_id = EXAM_TYPE_SR_KEY FROM CES.EXAM_TYPE WHERE EXAM_TYPE = 'Detailed' AND ISACTIVE = 1
		SELECT @vis_exam_typ_id = EXAM_TYPE_SR_KEY FROM CES.EXAM_TYPE WHERE EXAM_TYPE = 'Visual' AND ISACTIVE = 1

		IF @isbasicsearch = 'N'		-- Advanced Search
		BEGIN
			
				
				INSERT INTO #tbl_SearchResult
				(
						asset_guid,
						region,
						route,
						elr,
						start_mileage,
						--end_mileage,
						railway_id,
						asset_desc,
						asset_grp,
						asset_type,
						operation_status,
						owning_party,
						primary_material,
						last_Dtl_Exam,
						--dtl_exam_freq,
						last_vis_exam,
						outside_party,
						structure_carries,
						structure_over,
						hce_flg,
						cmi_score,
						tenanted_flg
				)
				SELECT 
					ast.ASSET_GUID AS asset_guid,
					o.REGION AS region,
					o.ROUTE AS route,
					elr.ELR_CODE AS elr,
					(ast.START_MILES + ast.START_YARDS/1760) AS start_mileage,
					--(ast.END_MILES + ast.END_YARDS/1760) AS end_mileage,
					ast.RAILWAY_ID AS railway_id,
					ast.ASSET_NAME AS asset_desc,
					asg.ASSET_GROUP_DESC AS asset_grp,
					asp.ASSET_TYPE_DESC AS asset_type,
					ops.REF_VALUE AS operation_status,
					ast.OWNING_PARTY AS owning_party,
					mat.REF_VALUE AS primary_material,
					CASE WHEN exdt.last_dtl_exam = CONVERT(DATE,'1/1/1900',103) THEN NULL ELSE exdt.last_dtl_exam END AS last_dtl_exam,
					--dtl.dtl_exam_freq,
					CASE WHEN exdt.last_vis_exam = CONVERT(DATE,'1/1/1900',103) THEN NULL ELSE exdt.last_vis_exam END AS last_vis_exam, 
					ast.outside_party,
					ast.structure_carries,
					ast.structure_over,
					IIF(ast.HCE_FLAG='Y','Yes','No') AS hce_flg,
					ast.cmi_score,
					CASE WHEN ast.TENANTED_FLG = 'Y' THEN 'Yes'
						 WHEN ast.TENANTED_FLG = 'N' THEN 'No'
						 ELSE 'N/A'
					END AS tenanted_flg
												
				FROM [CES].ASSET ast
				INNER JOIN [CES].ORG o
				ON ast.ORG_SR_KEY = o.ORG_SR_KEY
				INNER JOIN [CES].AREA a
				ON a.AREA_SR_KEY = ast.AREA_SR_KEY
				INNER JOIN [CES].ENGINE_LINE_REF elr
				ON elr.ELR_SR_KEY = ast.ENG_LINE_REF
				AND elr.ORG_SR_KEY = ast.ORG_SR_KEY
				AND elr.AREA_SR_KEY = ast.AREA_SR_KEY
				INNER JOIN [CES].ASSET_GROUP asg
				ON asg.ASSET_GROUP_SR_KEY = ast.ASSET_GROUP_SR_KEY
				INNER JOIN [CES].ASSET_TYPE asp
				ON asp.ASSET_TYPE_SR_KEY = ast.ASSET_TYPE_SR_KEY
				LEFT JOIN [CES].REFERENCE_VALUE ops
				ON ops.REF_VAL_SR_KEY = ast.OPERATIONAL_STATUS
				AND ops.ISACTIVE = 1
				LEFT JOIN [CES].REFERENCE_VALUE mat
				ON mat.REF_VAL_SR_KEY = ast.PRIMARY_MATERIAL
				AND mat.ISACTIVE = 1
				OUTER APPLY
					--(
					--	SELECT
					--		tmp.last_dtl_exam,
					--		tmp.dtl_exam_freq
					--	FROM 
					--	(
					--		SELECT 
					--			CONVERT(VARCHAR,ec.LAST_EXAM_DATE,103) last_dtl_exam,
					--			CAST (ec.INTERVAL_DAYS AS VARCHAR(5))+ 'y '+CAST (ec.INTERVAL_MONTHS AS VARCHAR(5))+ 'm '+CAST (ec.INTERVAL_DAYS AS VARCHAR(5))+'d' AS dtl_exam_freq,
					--			ROW_NUMBER() OVER (PARTITION BY ec.ASSET_GUID ,ec.EXAM_TYPE_SR_KEY  ORDER BY ec.EFFECTIVE_FROM_DT DESC) rnk
					--		FROM [CES].EXAM_CYCLE ec
					--		WHERE ec.ASSET_GUID = ast.ASSET_GUID
					--		AND ec.EXAM_TYPE_SR_KEY = @dtl_exam_typ_id
					--		AND ec.ISACTIVE = 1
					--		AND @current_date BETWEEN EFFECTIVE_FROM_DT AND ISNULL(EFFECTIVE_TO_DT,'12/31/9999')
					--	)tmp
					--	WHERE tmp.rnk=1
					--)dtl
					(
						SELECT 
							MAX(CASE WHEN EXAM_TYPE_SR_KEY = @dtl_exam_typ_id THEN ISNULL(EXAM_ACTUAL_DATE,CONVERT(DATE,'1/1/1900',103)) 
								ELSE CONVERT(DATE,'1/1/1900',103)
							END) AS last_dtl_exam,
							MAX(CASE WHEN EXAM_TYPE_SR_KEY = @vis_exam_typ_id THEN ISNULL(EXAM_ACTUAL_DATE,CONVERT(DATE,'1/1/1900',103)) 
								ELSE CONVERT(DATE,'1/1/1900',103)
							END) AS last_vis_exam
						FROM	CES.EXAM
						WHERE   ASSET_GUID = ast.ASSET_GUID
						AND 	EXAM_TYPE_SR_KEY IN (@dtl_exam_typ_id,@vis_exam_typ_id )
						AND		IS_LAST_EXAM = 'Y'
						AND 	ISACTIVE = 1
					)exdt

				WHERE
					ast.ISACTIVE= 1
				AND o.ISACTIVE = 1
				AND elr.ISACTIVE = 1
				AND asg.ISACTIVE = 1
				AND asp.ISACTIVE = 1
				AND o.REGION = @region_name
				AND ( @route_id =0 OR (@route_id <> 0 AND o.ORG_SR_KEY = @route_id))
				AND	( @area_id =0 OR (@area_id <> 0 AND a.AREA_SR_KEY = @area_id))
				AND ( @iselrselected = 'N' OR (@iselrselected = 'Y' AND ast.ENG_LINE_REF IN (SELECT elr_id FROM @elr_id_array)) )
				AND ( (ast.START_MILES + ast.START_YARDS/1760) BETWEEN @start_mileage_from AND @start_mileage_to)
				AND ( @railway_id IS NULL OR (@railway_id IS NOT NULL AND ast.RAILWAY_ID = @railway_id))
				AND ( @ast_grp_id =0 OR (@ast_grp_id <> 0 AND asg.ASSET_GROUP_SR_KEY = @ast_grp_id))
				AND ( @isasttypselected = 'N' OR (@isasttypselected = 'Y' AND asp.ASSET_TYPE_SR_KEY IN (SELECT ast_typ_id FROM @ast_typ)) )
				AND	( @opstat_id =0 OR (@opstat_id <> 0 AND ops.REF_VAL_SR_KEY = @opstat_id))
				AND	( @ownparty_name IS NULL OR (@ownparty_name IS NOT NULL AND ast.OWNING_PARTY = @ownparty_name))
				AND	( @asset_desc IS NULL OR (@asset_desc IS NOT NULL AND ast.ASSET_NAME LIKE (@asset_desc + '%') ))
				AND ( @mattyp_id =0 OR (@mattyp_id <> 0 AND mat.REF_VAL_SR_KEY = @mattyp_id))
				AND ( @hceflg_name ='All' OR (@hceflg_name = 'Yes' AND ast.HCE_FLAG = 'Y') OR (@hceflg_name = 'No' AND ast.HCE_FLAG = 'N') )
				AND ( ISNULL(ast.CMI_SCORE,0) BETWEEN  @cmi_score_from AND @cmi_score_to)
				AND ( @strccarries_name IS NULL OR (@strccarries_name IS NOT NULL AND ast.STRUCTURE_CARRIES = @strccarries_name))
				AND ( @strcover_name IS NULL OR (@strcover_name IS NOT NULL AND ast.STRUCTURE_OVER = @strcover_name))
				AND	( @outsideparty_name IS NULL OR (@outsideparty_name IS NOT NULL AND ast.OUTSIDE_PARTY = @outsideparty_name))

		END

		ELSE	--Basic search
		BEGIN
		
				INSERT INTO #tbl_SearchResult
				(
						asset_guid,
						region,
						route,
						elr,
						start_mileage,
						--end_mileage,
						railway_id,
						asset_desc,
						asset_grp,
						asset_type,
						operation_status,
						owning_party,
						primary_material,
						last_Dtl_Exam,
						--dtl_exam_freq,
						last_vis_exam,
						outside_party,
						structure_carries,
						structure_over,
						hce_flg,
						cmi_score,
						tenanted_flg
				)
				SELECT 
					ast.ASSET_GUID AS asset_guid,
					o.REGION AS region,
					o.ROUTE AS route,
					elr.ELR_CODE AS elr,
					(ast.START_MILES + ast.START_YARDS/1760) AS start_mileage,
					--(ast.END_MILES + ast.END_YARDS/1760) AS end_mileage,
					ast.RAILWAY_ID AS railway_id,
					ast.ASSET_NAME AS asset_desc,
					asg.ASSET_GROUP_DESC AS asset_grp,
					asp.ASSET_TYPE_DESC AS asset_type,
					ops.REF_VALUE AS operation_status,
					ast.OWNING_PARTY AS owning_party,
					mat.REF_VALUE AS primary_material,
					exdt.last_dtl_exam,
					--dtl.dtl_exam_freq,
					exdt.last_vis_exam,
					ast.outside_party,
					ast.structure_carries,
					ast.structure_over,
					IIF(ast.HCE_FLAG='Y','Yes','No') AS hce_flg,
					ast.cmi_score,
					CASE WHEN ast.TENANTED_FLG = 'Y' THEN 'Yes'
						 WHEN ast.TENANTED_FLG = 'N' THEN 'No'
						 ELSE 'N/A'
					END AS tenanted_flg
												
				FROM [CES].ASSET ast
				INNER JOIN [CES].ORG o
				ON ast.ORG_SR_KEY = o.ORG_SR_KEY
				INNER JOIN [CES].AREA a
				ON a.AREA_SR_KEY = ast.AREA_SR_KEY
				INNER JOIN [CES].ENGINE_LINE_REF elr
				ON elr.ELR_SR_KEY = ast.ENG_LINE_REF
				INNER JOIN [CES].ASSET_GROUP asg
				ON asg.ASSET_GROUP_SR_KEY = ast.ASSET_GROUP_SR_KEY
				INNER JOIN [CES].ASSET_TYPE asp
				ON asp.ASSET_TYPE_SR_KEY = ast.ASSET_TYPE_SR_KEY
				LEFT JOIN [CES].REFERENCE_VALUE ops
				ON ops.REF_VAL_SR_KEY = ast.OPERATIONAL_STATUS
				AND ops.ISACTIVE = 1
				LEFT JOIN [CES].REFERENCE_VALUE mat
				ON mat.REF_VAL_SR_KEY = ast.PRIMARY_MATERIAL
				AND mat.ISACTIVE = 1
				OUTER APPLY
					--(
					--	SELECT
					--		tmp.last_dtl_exam,
					--		tmp.dtl_exam_freq
					--	FROM 
					--	(
					--		SELECT 
					--			CONVERT(VARCHAR,ec.LAST_EXAM_DATE,103) last_dtl_exam,
					--			CAST (ec.INTERVAL_DAYS AS VARCHAR(5))+ 'y '+CAST (ec.INTERVAL_MONTHS AS VARCHAR(5))+ 'm '+CAST (ec.INTERVAL_DAYS AS VARCHAR(5))+'d' AS dtl_exam_freq,
					--			ROW_NUMBER() OVER (PARTITION BY ec.ASSET_GUID ,ec.EXAM_TYPE_SR_KEY  ORDER BY ec.EFFECTIVE_FROM_DT DESC) rnk
					--		FROM [CES].EXAM_CYCLE ec
					--		WHERE ec.ASSET_GUID = ast.ASSET_GUID
					--		AND ec.EXAM_TYPE_SR_KEY = @dtl_exam_typ_id
					--		AND ec.ISACTIVE = 1
					--		AND @current_date BETWEEN EFFECTIVE_FROM_DT AND ISNULL(EFFECTIVE_TO_DT,'12/31/9999')
					--	)tmp
					--	WHERE tmp.rnk=1
					--)dtl
					(
						SELECT 
							CASE WHEN EXAM_TYPE_SR_KEY = @dtl_exam_typ_id THEN EXAM_ACTUAL_DATE 
								ELSE NULL
							END AS last_dtl_exam,
							CASE WHEN EXAM_TYPE_SR_KEY = @vis_exam_typ_id THEN EXAM_ACTUAL_DATE 
								ELSE NULL
							END AS last_vis_exam
						FROM	CES.EXAM
						WHERE   ASSET_GUID = ast.ASSET_GUID
						AND 	EXAM_TYPE_SR_KEY IN (@dtl_exam_typ_id,@vis_exam_typ_id )
						AND		IS_LAST_EXAM = 'Y'
						AND 	ISACTIVE = 1
					)exdt

				WHERE
					ast.ISACTIVE= 1
				AND o.ISACTIVE = 1
				AND elr.ISACTIVE = 1
				AND asg.ISACTIVE = 1
				AND asp.ISACTIVE = 1
				AND o.REGION = @region_name
				AND ( @route_id =0 OR (@route_id <> 0 AND o.ORG_SR_KEY = @route_id))
				AND	( @area_id =0 OR (@area_id <> 0 AND a.AREA_SR_KEY = @area_id))

				
		END
		
		--Total count of records
		SELECT @totalresultcnt = COUNT(1) FROM #tbl_SearchResult


		--If no records are returned in search result
		IF  @totalresultcnt=0 
		BEGIN
			SET @result=
					(
						SELECT 
							JSON_QUERY(
										(
											select
												@pageno AS currentpage,
												@totalresultcnt AS totalcount,
												0 AS totalpages
											FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
										)
							) searchdatacount,
							JSON_QUERY('[]') searchresult
						
						FOR JSON PATH,WITHOUT_ARRAY_WRAPPER, INCLUDE_NULL_VALUES
				)
		END	
		--If alt least 1 record is returned in search result
		ELSE
		BEGIN
			IF @isexporttodoc = 'Y' --Export to Excel
			BEGIN
					IF @sortorder = 'asc' 
					BEGIN
				
						SET @result=
						(
							SELECT 
								JSON_QUERY(
											(
												select
													@pageno AS currentpage,
													@totalresultcnt AS totalcount,
													CEILING(@totalresultcnt/@rowsperpage) AS totalpages
												FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
											)
								) searchdatacount,
							(
								SELECT
									asset_guid,
									region,
									route,
									elr,
									start_mileage,
									--end_mileage,
									railway_id,
									asset_desc,
									asset_grp,
									asset_type,
									operation_status,
									owning_party,
									primary_material,
									last_Dtl_Exam,
									--dtl_exam_freq,
									last_vis_exam,
									outside_party,
									structure_carries,
									structure_over,
									hce_flg,
									cmi_score,
									tenanted_flg
								FROM
								(
									SELECT
											asset_guid,
											region,
											route,
											elr,
											start_mileage,
											--end_mileage,
											railway_id,
											asset_desc,
											asset_grp,
											asset_type,
											operation_status,
											owning_party,
											primary_material,
											last_Dtl_Exam,
											--dtl_exam_freq,
											last_vis_exam,
											outside_party,
											structure_carries,
											structure_over,
											hce_flg,
											cmi_score,
											tenanted_flg,
											ROW_NUMBER() OVER (ORDER BY 
																		CASE WHEN @sortcolumn = 'Region' THEN region ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'Route' THEN route  ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'ELR' THEN elr  ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'StartMileage' THEN start_mileage ELSE NULL END ASC, 
																			 --WHEN @sortcolumn = 'EndMileage' THEN end_mileage ELSE NULL END, 
																		CASE WHEN @sortcolumn = 'RailwayID' THEN railway_id ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'AssetDescription' THEN asset_desc ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'AssetGroup' THEN asset_grp ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'AssetType' THEN asset_type ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'Operationstatus' THEN operation_status ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'OwningParty' THEN owning_party ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'PrimaryMaterial' THEN primary_material ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'LastDetailedExam' THEN last_Dtl_Exam ELSE NULL END ASC,
																			 --WHEN @sortcolumn = 'DetailedExamFrequency' THEN dtl_exam_freq ELSE NULL END,
																		CASE WHEN @sortcolumn = 'LastVisualExam' THEN last_vis_exam ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'OutsideParty' THEN outside_party ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'StructCarries' THEN structure_carries ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'StructOver' THEN structure_over ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'HCEFlg' THEN hce_flg ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'CMIScore' THEN cmi_score ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'TenantedFlg' THEN tenanted_flg ELSE NULL END ASC
																	
																	) AS ordrnk

									FROM #tbl_SearchResult
								)sr
								ORDER BY ordrnk
								FOR JSON AUTO, INCLUDE_NULL_VALUES
							)searchresult
							FOR JSON PATH,WITHOUT_ARRAY_WRAPPER, INCLUDE_NULL_VALUES
						)
					END
					ELSE IF @sortorder = 'desc' 
					BEGIN
					
						SET @result=
						(
							SELECT 
								JSON_QUERY(
											(
												select
													@pageno AS currentpage,
													@totalresultcnt AS totalcount,
													CEILING(@totalresultcnt/@rowsperpage) AS totalpages
												FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
											)
								) searchdatacount,
							(
								SELECT
									asset_guid,
									region,
									route,
									elr,
									start_mileage,
									--end_mileage,
									railway_id,
									asset_desc,
									asset_grp,
									asset_type,
									operation_status,
									owning_party,
									primary_material,
									last_Dtl_Exam,
									--dtl_exam_freq,
									last_vis_exam,
									outside_party,
									structure_carries,
									structure_over,
									hce_flg,
									cmi_score,
									tenanted_flg
								FROM
								(
									SELECT
											asset_guid,
											region,
											route,
											elr,
											start_mileage,
											--end_mileage,
											railway_id,
											asset_desc,
											asset_grp,
											asset_type,
											operation_status,
											owning_party,
											primary_material,
											last_Dtl_Exam,
											--dtl_exam_freq,
											last_vis_exam,
											outside_party,
											structure_carries,
											structure_over,
											hce_flg,
											cmi_score,
											tenanted_flg,
											ROW_NUMBER() OVER (ORDER BY 
																		CASE WHEN @sortcolumn = 'Region' THEN region ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'Route' THEN route  ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'ELR' THEN elr  ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'StartMileage' THEN start_mileage ELSE NULL END DESC, 
																			 --WHEN @sortcolumn = 'EndMileage' THEN end_mileage ELSE NULL END, 
																		CASE WHEN @sortcolumn = 'RailwayID' THEN railway_id ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'AssetDescription' THEN asset_desc ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'AssetGroup' THEN asset_grp ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'AssetType' THEN asset_type ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'Operationstatus' THEN operation_status ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'OwningParty' THEN owning_party ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'PrimaryMaterial' THEN primary_material ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'LastDetailedExam' THEN last_Dtl_Exam ELSE NULL END DESC,
																			 --WHEN @sortcolumn = 'DetailedExamFrequency' THEN dtl_exam_freq ELSE NULL END,
																		CASE WHEN @sortcolumn = 'LastVisualExam' THEN last_vis_exam ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'OutsideParty' THEN outside_party ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'StructCarries' THEN structure_carries ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'StructOver' THEN structure_over ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'HCEFlg' THEN hce_flg ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'CMIScore' THEN cmi_score ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'TenantedFlg' THEN tenanted_flg ELSE NULL END ASC
																	
																	) AS ordrnk

									FROM #tbl_SearchResult
								)sr
								ORDER BY ordrnk
								FOR JSON AUTO, INCLUDE_NULL_VALUES
							)searchresult
							FOR JSON PATH,WITHOUT_ARRAY_WRAPPER, INCLUDE_NULL_VALUES
						)
					END
			END
			ELSE IF @isexporttodoc = 'N' --Screen output
			BEGIN
				IF @sortorder = 'asc' 
					BEGIN
			
						SET @result=
						(
							SELECT 
								JSON_QUERY(
											(
												select
													@pageno AS currentpage,
													@totalresultcnt AS totalcount,
													CEILING(@totalresultcnt/@rowsperpage) AS totalpages
												FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
											)
								) searchdatacount,
							(
								SELECT
									asset_guid,
									region,
									route,
									elr,
									start_mileage,
									--end_mileage,
									railway_id,
									asset_desc,
									asset_grp,
									asset_type,
									operation_status,
									owning_party,
									primary_material,
									last_Dtl_Exam,
									--dtl_exam_freq,
									last_vis_exam,
									outside_party,
									structure_carries,
									structure_over,
									hce_flg,
									cmi_score,
									tenanted_flg
								FROM
								(
									SELECT
											asset_guid,
											region,
											route,
											elr,
											start_mileage,
											--end_mileage,
											railway_id,
											asset_desc,
											asset_grp,
											asset_type,
											operation_status,
											owning_party,
											primary_material,
											last_Dtl_Exam,
											--dtl_exam_freq,
											last_vis_exam,
											outside_party,
											structure_carries,
											structure_over,
											hce_flg,
											cmi_score,
											tenanted_flg,
											ROW_NUMBER() OVER (ORDER BY 
																		CASE WHEN @sortcolumn = 'Region' THEN region ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'Route' THEN route  ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'ELR' THEN elr  ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'StartMileage' THEN start_mileage ELSE NULL END ASC, 
																			 --WHEN @sortcolumn = 'EndMileage' THEN end_mileage ELSE NULL END, 
																		CASE WHEN @sortcolumn = 'RailwayID' THEN railway_id ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'AssetDescription' THEN asset_desc ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'AssetGroup' THEN asset_grp ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'AssetType' THEN asset_type ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'Operationstatus' THEN operation_status ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'OwningParty' THEN owning_party ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'PrimaryMaterial' THEN primary_material ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'LastDetailedExam' THEN last_Dtl_Exam ELSE NULL END ASC,
																			 --WHEN @sortcolumn = 'DetailedExamFrequency' THEN dtl_exam_freq ELSE NULL END,
																		CASE WHEN @sortcolumn = 'LastVisualExam' THEN last_vis_exam ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'OutsideParty' THEN outside_party ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'StructCarries' THEN structure_carries ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'StructOver' THEN structure_over ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'HCEFlg' THEN hce_flg ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'CMIScore' THEN cmi_score ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'TenantedFlg' THEN tenanted_flg ELSE NULL END ASC
																	
																	
																	) AS ordrnk

									FROM #tbl_SearchResult
								)sr
								WHERE sr.ordrnk BETWEEN ((@pageno - 1) * @rowsperpage +1) AND (@pageno * @rowsperpage)
								
								ORDER BY ordrnk
								FOR JSON AUTO, INCLUDE_NULL_VALUES
							)searchresult
							FOR JSON PATH,WITHOUT_ARRAY_WRAPPER, INCLUDE_NULL_VALUES
						)
					END
				
					ELSE IF @sortorder = 'desc' 
					BEGIN
				
						SET @result=
						(
							SELECT 
								JSON_QUERY(
											(
												select
													@pageno AS currentpage,
													@totalresultcnt AS totalcount,
													CEILING(@totalresultcnt/@rowsperpage) AS totalpages
												FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
											)
								) searchdatacount,
							(
								SELECT
									asset_guid,
									region,
									route,
									elr,
									start_mileage,
									--end_mileage,
									railway_id,
									asset_desc,
									asset_grp,
									asset_type,
									operation_status,
									owning_party,
									primary_material,
									last_Dtl_Exam,
									--dtl_exam_freq,
									last_vis_exam,
									outside_party,
									structure_carries,
									structure_over,
									hce_flg,
									cmi_score,
									tenanted_flg
								FROM
								(
									SELECT
											asset_guid,
											region,
											route,
											elr,
											start_mileage,
											--end_mileage,
											railway_id,
											asset_desc,
											asset_grp,
											asset_type,
											operation_status,
											owning_party,
											primary_material,
											last_Dtl_Exam,
											--dtl_exam_freq,
											last_vis_exam,
											outside_party,
											structure_carries,
											structure_over,
											hce_flg,
											cmi_score,
											tenanted_flg,
											ROW_NUMBER() OVER (ORDER BY 
																		CASE WHEN @sortcolumn = 'Region' THEN region ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'Route' THEN route  ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'ELR' THEN elr  ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'StartMileage' THEN start_mileage ELSE NULL END DESC, 
																			 --WHEN @sortcolumn = 'EndMileage' THEN end_mileage ELSE NULL END, 
																		CASE WHEN @sortcolumn = 'RailwayID' THEN railway_id ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'AssetDescription' THEN asset_desc ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'AssetGroup' THEN asset_grp ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'AssetType' THEN asset_type ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'Operationstatus' THEN operation_status ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'OwningParty' THEN owning_party ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'PrimaryMaterial' THEN primary_material ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'LastDetailedExam' THEN last_Dtl_Exam ELSE NULL END DESC,
																			 --WHEN @sortcolumn = 'DetailedExamFrequency' THEN dtl_exam_freq ELSE NULL END,
																		CASE WHEN @sortcolumn = 'LastVisualExam' THEN last_vis_exam ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'OutsideParty' THEN outside_party ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'StructCarries' THEN structure_carries ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'StructOver' THEN structure_over ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'HCEFlg' THEN hce_flg ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'CMIScore' THEN cmi_score ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'TenantedFlg' THEN tenanted_flg ELSE NULL END ASC
																	
																	
																	) AS ordrnk

									FROM #tbl_SearchResult
								)sr
								WHERE sr.ordrnk BETWEEN ((@pageno - 1) * @rowsperpage +1) AND (@pageno * @rowsperpage)
								
								ORDER BY ordrnk
								FOR JSON AUTO, INCLUDE_NULL_VALUES
							)searchresult
							FOR JSON PATH,WITHOUT_ARRAY_WRAPPER, INCLUDE_NULL_VALUES
						)
					END
		
			END
		END
		--PRINT @result
		SELECT @result

		
	END TRY
	BEGIN CATCH
		SET @ErrorMsg = ERROR_MESSAGE() + 
						' Line Num:' + CONVERT(VARCHAR(5), ERROR_LINE()) + 
						',ErrorNum:' + CONVERT(VARCHAR(5), ERROR_NUMBER()) + 
						',Severity:' + CONVERT(VARCHAR(5), ERROR_SEVERITY()) + 
						',State:' + CONVERT(VARCHAR(10), ERROR_STATE()) + 
						',Procedure:' + CONVERT(VARCHAR(25), ERROR_PROCEDURE());  

		THROW 50000,@ErrorMsg,1;

		
	END CATCH

	DROP TABLE IF EXISTS #tbl_SearchResult;
	SET NOCOUNT OFF
END
==============================================================================================
/****** Object:  StoredProcedure [CES].[sp_Get_ComplianceAssetSearch_SearchResult]    Script Date: 3/26/2021 9:29:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/***************************************************************************************************************************************            
* Name						: sp_Get_ComplianceAssetSearch_SearchResult            
* Created By				: Cognizant            
* Date Created				: 09-Feb-2021           
* Description				: This stored procedure provides the search result for asset basic and advanced search for compliance screen.  
* Input Parameters			: JSON      
* Output Parameters			: @OUT_ErrorNo            
* Return Value				: N/A            
* Assumptions				: None    
* Execution Statement		: Exec [CES].sp_Get_ComplianceAssetSearch_SearchResult '{
																		"region_name": "Wales and Western",
																		"route_id": 13,
																		"area_id": 0,
																		"elr_id":[227,199],	
																		"start_mileage_from": 3.3,
																		"start_mileage_to": 8.5,
																		"railway_id": null,
																		"ast_grp_id": 0,
																		"ast_typ_id": [0],
																		"reference_date": null,
																		"dtl_risk_assessment_id": 0,
																		"ve_risk_assessment_id": 0,
																		"uw_risk_assessment_id": 0,
																		"dtl_compliance_id": 0,
																		"ve_compliance_id": 0,
																		"uw_compliance_id": 0,
																		"isexporttodoc": "N",
																		"sortcolumn": "StartMileage",
																		"sortorder": "desc",
																		"pageno": 1,
																		"rowsperpage": 25
																	}'
*								
* Modified Date     Modified By   Revision Number  Modifications            

*******************************************************************************************************************************************/ 



ALTER PROCEDURE [CES].[sp_Get_ComplianceAssetSearch_SearchResult]
	@Input_JSON		NVARCHAR(MAX)
AS 
BEGIN
	SET NOCOUNT ON
	
	
	BEGIN TRY
		DECLARE
				@ErrorMsg						VARCHAR(250),
				@result							NVARCHAR(MAX),
				@ast_guids						NVARCHAR(MAX),
				@region_name					VARCHAR(64),
				@route_id						DECIMAL(18),
				@area_id						DECIMAL(18),
				@elr_id							NVARCHAR(MAX),
				@railway_id						VARCHAR(64),
				@start_mileage_from				DECIMAL(18,4),
				@start_mileage_to				DECIMAL(18,4),				
				@ast_grp_id						DECIMAL(18),
				@ast_typ_array					NVARCHAR(MAX),
				@asset_desc						VARCHAR(200),
				@reference_date					DATE,
				@ret_reference_date				VARCHAR(64),
				@dtl_risk_assessment_id			DECIMAL(18),
				@ve_risk_assessment_id			DECIMAL(18),
				@uw_risk_assessment_id			DECIMAL(18),
				@ve_compliance_id				DECIMAL(18),
				@uw_compliance_id				DECIMAL(18),
				@dtl_compliance_id				DECIMAL(18),
				@isexporttodoc					VARCHAR(1),
				@sortcolumn						VARCHAR(30),
				@sortorder						VARCHAR(5),
				@pageno							DECIMAL(18),
				@rowsperpage					DECIMAL(18),
				
				@isasttypselected				CHAR(1) = 'N',
				@isbasicsearch					CHAR(1) = 'Y',
				@totalresultcnt					SMALLINT,
				@dtl_exam_typ_id				DECIMAL(18),
				@ve_exam_type_id				DECIMAL(18),
				@uw_exam_type_id				DECIMAL(18),
				@exam_report_status_rejected_id	DECIMAL(18),
				@exam_req_status_scheduled_id	DECIMAL(18),
				@risk_assessed_status_id		DECIMAL(18),
				@dtl_risk_assessment_value		VARCHAR(500),
				@ve_risk_assessment_value		VARCHAR(500),
				@uw_risk_assessment_value		VARCHAR(500),
				@ve_compliance_value			VARCHAR(500),
				@uw_compliance_value			VARCHAR(500),
				@dtl_compliance_value			VARCHAR(500),
				@iselrselected					CHAR(1) = 'N'
				
			DECLARE @ast_typ TABLE
			(
				ast_typ_id DECIMAL(18)
			)

			DECLARE @elr_id_array TABLE
			(
				elr_id DECIMAL(18)
			)

		    DROP TABLE IF EXISTS #tbl_ComplianceRiskStatus;
			DROP TABLE IF EXISTS #tbl_ComplianceSearchResult;
			
			DROP TABLE IF EXISTS #tbl_AssetDetails;

			--CREATE TABLE #tbl_ComplianceRiskStatus
			--(
			--	cr_asset_guid			VARCHAR(32),
			--	cr_exam_type_id			DECIMAL(18),
			--	cr_freq			VARCHAR(64),		
			--	cr_compliance_status	VARCHAR(200),
			--	cr_risk_status	VARCHAR(200)
			--)			
			
			CREATE TABLE #tbl_ComplianceRiskStatus
			(
				asset_guid			VARCHAR(32),
				dtl_compliance		VARCHAR(100),
				dtl_risk_status		VARCHAR(100),
				dtl_frequency		VARCHAR(60),
				dtl_exam_type_id	DECIMAL(18),

				ve_compliance		VARCHAR(100),
				ve_risk_status		VARCHAR(100),
				ve_frequency		VARCHAR(60),
				ve_exam_type_id		DECIMAL(18),

				uw_compliance		VARCHAR(100),
				uw_risk_status		VARCHAR(100),
				uw_frequency		VARCHAR(60),
				uw_exam_type_id		DECIMAL(18)

			)	

			CREATE TABLE #tbl_AssetDetails
			(
				asset_guid			VARCHAR(32),
				region				VARCHAR(64),
				route				VARCHAR(64),
				area				VARCHAR(64),
				elr					VARCHAR(4),
				railway_id			VARCHAR(64),
				asset_desc			VARCHAR(200),
				mileage_from		DECIMAL(18,4),
				mileage_to			DECIMAL(18,4),
				asset_grp			VARCHAR(64),
				asset_type			VARCHAR(64),
				operational_stat	VARCHAR(200),
				owning_party		VARCHAR(64),
				primary_material	VARCHAR(100)
			)
			

		CREATE TABLE #tbl_ComplianceSearchResult
		(
				asset_guid			VARCHAR(32),
				region				VARCHAR(64),
				route				VARCHAR(64),
				area				VARCHAR(64),
				elr					VARCHAR(4),
				railway_id			VARCHAR(64),
				asset_desc			VARCHAR(200),
				mileage_from		DECIMAL(18,4),
				mileage_to			DECIMAL(18,4),
				asset_grp			VARCHAR(64),
				asset_type			VARCHAR(64),
				operational_stat	VARCHAR(200),
				owning_party		VARCHAR(64),
				primary_material	VARCHAR(100),
				dtl_compliance	    VARCHAR(64),
				dtl_risk_status		VARCHAR(64),
				dtl_frequency	    VARCHAR(64),
				dtl_exam_type_id	DECIMAL(18),
				ve_compliance		VARCHAR(64),
				ve_risk_status		VARCHAR(64),
				ve_frequency		VARCHAR(64),
				ve_exam_type_id		DECIMAL(18),
				uw_compliance		VARCHAR(64),
				uw_risk_status		VARCHAR(64),
				uw_frequency		VARCHAR(64),
				uw_exam_type_id		DECIMAL(18),
		)

		SELECT 
			@region_name = COALESCE(@region_name,CASE LOWER([key]) WHEN 'region_name' THEN [value] ELSE NULL END),
			@route_id = COALESCE(@route_id,CASE LOWER([key]) WHEN 'route_id' THEN [value] ELSE NULL END),
			@area_id = COALESCE(@area_id,CASE LOWER([key]) WHEN 'area_id' THEN [value] ELSE NULL END),
			@elr_id = COALESCE(@elr_id,CASE LOWER([key]) WHEN 'elr_id' THEN [value] ELSE NULL END),
			@start_mileage_from = COALESCE(@start_mileage_from,CASE LOWER([key]) WHEN 'start_mileage_from' THEN [value] ELSE NULL END),
			@start_mileage_to = COALESCE(@start_mileage_to,CASE LOWER([key]) WHEN 'start_mileage_to' THEN [value] ELSE NULL END),
			@railway_id = COALESCE(@railway_id,CASE LOWER([key]) WHEN 'railway_id' THEN [value] ELSE NULL END),
			@ast_grp_id = COALESCE(@ast_grp_id,CASE LOWER([key]) WHEN 'ast_grp_id' THEN [value] ELSE NULL END),
			@ast_typ_array = COALESCE(@ast_typ_array,CASE LOWER([key]) WHEN 'ast_typ_id' THEN [value] ELSE NULL END),
		    @ret_reference_date = COALESCE(@ret_reference_date,CASE LOWER([key]) WHEN 'reference_date' THEN [value] ELSE NULL END),
			@dtl_risk_assessment_id = COALESCE(@dtl_risk_assessment_id,CASE LOWER([key]) WHEN 'dtl_risk_assessment_id' THEN [value] ELSE NULL END),
			@ve_risk_assessment_id = COALESCE(@ve_risk_assessment_id,CASE LOWER([key]) WHEN 've_risk_assessment_id' THEN [value] ELSE NULL END),
			@uw_risk_assessment_id = COALESCE(@uw_risk_assessment_id,CASE LOWER([key]) WHEN 'uw_risk_assessment_id' THEN [value] ELSE NULL END),
			@ve_compliance_id = COALESCE(@ve_compliance_id,CASE LOWER([key]) WHEN 've_compliance_id' THEN [value] ELSE NULL END),
			@uw_compliance_id = COALESCE(@uw_compliance_id,CASE LOWER([key]) WHEN 'uw_compliance_id' THEN [value] ELSE NULL END),
			@dtl_compliance_id = COALESCE(@dtl_compliance_id,CASE LOWER([key]) WHEN 'dtl_compliance_id' THEN [value] ELSE NULL END),
			@isexporttodoc = COALESCE(@isexporttodoc,CASE LOWER([key]) WHEN 'isexporttodoc' THEN [value] ELSE NULL END),
			@sortcolumn = COALESCE(@sortcolumn,CASE LOWER([key]) WHEN 'sortcolumn' THEN [value] ELSE NULL END),
			@sortorder = COALESCE(@sortorder,CASE LOWER([key]) WHEN 'sortorder' THEN [value] ELSE NULL END),
			@pageno = COALESCE(@pageno,CASE LOWER([key]) WHEN 'pageno' THEN [value] ELSE NULL END),
			@rowsperpage = COALESCE(@rowsperpage,CASE LOWER([key]) WHEN 'rowsperpage' THEN [value] ELSE NULL END)
			
		FROM	OPENJSON(@Input_JSON);

		IF @ret_reference_date IS NOT NULL
			SET @reference_date = CONVERT(date,@ret_reference_date, 103)
		ELSE
			SET @reference_date = DATEADD(dd, DATEDIFF(dd, 0, GETDATE()), 0)

		IF (@region_name IS NULL or ltrim(rtrim(@region_name)) = '')
		BEGIN

			SET @ErrorMsg = 'Region cannot be NULL or empty';
			DROP TABLE IF EXISTS #tbl_ComplianceRiskStatus;
			DROP TABLE IF EXISTS #tbl_ComplianceSearchResult;
			
			DROP TABLE IF EXISTS #tbl_AssetDetails;
			THROW 50000,@ErrorMsg,1;
		END


		IF @ast_typ_array IS NOT NULL 
		BEGIN
			INSERT INTO @ast_typ (ast_typ_id)
			SELECT[value] FROM OPENJSON(@ast_typ_array);

			IF EXISTS (SELECT 1 FROM @ast_typ WHERE ast_typ_id=0)
				SET @isasttypselected = 'N'
			ELSE
				SET @isasttypselected = 'Y'
		END 

		IF @elr_id IS NOT NULL 
		BEGIN
			INSERT INTO @elr_id_array (elr_id)
			SELECT[value] FROM OPENJSON(@elr_id);

			IF EXISTS (SELECT 1 FROM @elr_id_array WHERE elr_id=0)
				SET @iselrselected = 'N'
			ELSE
				SET @iselrselected = 'Y'
		END 

		IF (@iselrselected = 'N' AND @start_mileage_from = -1 AND @start_mileage_to = 99999 AND @railway_id IS NULL AND @ast_grp_id = 0 AND @isasttypselected = 'N' AND @ret_reference_date IS NULL AND @dtl_risk_assessment_id = 0
			AND @ve_risk_assessment_id = 0 AND @uw_risk_assessment_id = 0 AND @ve_compliance_id = 0 AND @uw_compliance_id = 0 AND @dtl_compliance_id = 0)
			
			SET @isbasicsearch = 'Y'
		ELSE
			SET @isbasicsearch = 'N'
		
	
		SELECT @dtl_exam_typ_id = EXAM_TYPE_SR_KEY FROM CES.EXAM_TYPE WHERE EXAM_TYPE = 'Detailed' AND ISACTIVE = 1
		SELECT @ve_exam_type_id = EXAM_TYPE_SR_KEY FROM CES.EXAM_TYPE WHERE EXAM_TYPE = 'Visual' AND ISACTIVE = 1
		SELECT @uw_exam_type_id = EXAM_TYPE_SR_KEY FROM CES.EXAM_TYPE WHERE EXAM_TYPE = 'Underwater' AND ISACTIVE = 1
		SELECT @exam_report_status_rejected_id = REF_VAL_SR_KEY FROM CES.REFERENCE_VALUE WHERE REF_TYP_SR_KEY=(SELECT REF_TYP_SR_KEY FROM CES.REFERENCE_TYPE WHERE REF_TYP_NAME='Exam Report Status') AND REF_VALUE='Rejected'
		SELECT @exam_req_status_scheduled_id = REF_VAL_SR_KEY FROM CES.REFERENCE_VALUE WHERE REF_TYP_SR_KEY=(SELECT REF_TYP_SR_KEY FROM CES.REFERENCE_TYPE WHERE REF_TYP_NAME='Exam Request Status') AND REF_VALUE='Scheduled'
		SELECT @risk_assessed_status_id = REF_VAL_SR_KEY FROM CES.REFERENCE_VALUE WHERE REF_TYP_SR_KEY=(SELECT REF_TYP_SR_KEY FROM CES.REFERENCE_TYPE WHERE REF_TYP_NAME='Risk Assessment Status') AND REF_VALUE='Risk Assessed (Data)'

		
		
				
		IF @isbasicsearch = 'N'		-- Advanced Search
		BEGIN
		
			--print 'advanced search'	

			IF @dtl_risk_assessment_id <> 0  SELECT @dtl_risk_assessment_value = UPPER(RFV.REF_VALUE) FROM [CES].REFERENCE_VALUE RFV WHERE REF_VAL_SR_KEY=@dtl_risk_assessment_id AND RFV.ISACTIVE=1
			ELSE SET @dtl_risk_assessment_value = ''	
			IF @ve_risk_assessment_id <> 0  SELECT @ve_risk_assessment_value = UPPER(RFV.REF_VALUE) FROM [CES].REFERENCE_VALUE RFV WHERE REF_VAL_SR_KEY=@ve_risk_assessment_id AND RFV.ISACTIVE=1
			ELSE SET @ve_risk_assessment_value = ''	
			IF @uw_risk_assessment_id <> 0  SELECT @uw_risk_assessment_value = UPPER(RFV.REF_VALUE) FROM [CES].REFERENCE_VALUE RFV WHERE REF_VAL_SR_KEY=@uw_risk_assessment_id AND RFV.ISACTIVE=1
			ELSE SET @uw_risk_assessment_value = ''	
			IF @ve_compliance_id <> 0  SELECT @ve_compliance_value = UPPER(RFV.REF_VALUE) FROM [CES].REFERENCE_VALUE RFV WHERE REF_VAL_SR_KEY=@ve_compliance_id AND RFV.ISACTIVE=1
			ELSE SET @ve_compliance_value = ''	
			IF @uw_compliance_id <> 0  SELECT @uw_compliance_value = UPPER(RFV.REF_VALUE) FROM [CES].REFERENCE_VALUE RFV WHERE REF_VAL_SR_KEY=@uw_compliance_id AND RFV.ISACTIVE=1
			ELSE SET @uw_compliance_value = ''	
			IF @dtl_compliance_id <> 0  SELECT @dtl_compliance_value = UPPER(RFV.REF_VALUE) FROM [CES].REFERENCE_VALUE RFV WHERE REF_VAL_SR_KEY=@dtl_compliance_id AND RFV.ISACTIVE=1
			ELSE SET @dtl_compliance_value = ''	
		
			--Asset identification based on filter criteria execpt compliance and RA status filters
			INSERT INTO #tbl_AssetDetails
					(
							asset_guid,
							region,
							[route],
							area,						
							elr,
							railway_id,
							asset_desc,
							mileage_from,
							mileage_to,							
							asset_grp,
							asset_type,
							operational_stat,
							owning_party,
							primary_material
					)(
				
								SELECT 
									ast.ASSET_GUID AS asset_guid,
									o.REGION AS region,
									o.ROUTE AS [route],
									a.AREA_NAME AS area,
									elr.ELR_CODE AS elr,
									ast.RAILWAY_ID AS railway_id,
									ast.ASSET_NAME AS asset_desc,
									(ast.START_MILES + ast.START_YARDS/1760) AS mileage_from,
									(ast.END_MILES + ast.END_YARDS/1760) AS mileage_to,
					
									asg.ASSET_GROUP_DESC AS asset_grp,
									asp.ASSET_TYPE_DESC AS asset_type,
									ops.REF_VALUE AS operational_stat,
									ast.OWNING_PARTY,
									mat.REF_VALUE AS primary_material
												
								FROM [CES].ASSET ast
								INNER JOIN [CES].ORG o
								ON ast.ORG_SR_KEY = o.ORG_SR_KEY
								INNER JOIN [CES].AREA a
								ON a.AREA_SR_KEY = ast.AREA_SR_KEY
								INNER JOIN [CES].ENGINE_LINE_REF elr
								ON elr.ELR_SR_KEY = ast.ENG_LINE_REF
								AND elr.ORG_SR_KEY = ast.ORG_SR_KEY
								AND elr.AREA_SR_KEY = ast.AREA_SR_KEY
								INNER JOIN [CES].ASSET_GROUP asg
								ON asg.ASSET_GROUP_SR_KEY = ast.ASSET_GROUP_SR_KEY
								INNER JOIN [CES].ASSET_TYPE asp
								ON asp.ASSET_TYPE_SR_KEY = ast.ASSET_TYPE_SR_KEY
								LEFT JOIN [CES].REFERENCE_VALUE ops
								ON ops.REF_VAL_SR_KEY = ast.OPERATIONAL_STATUS
								AND ops.ISACTIVE = 1
								LEFT JOIN [CES].REFERENCE_VALUE mat
								ON mat.REF_VAL_SR_KEY = ast.PRIMARY_MATERIAL
								AND mat.ISACTIVE = 1				

								WHERE
									ast.ISACTIVE= 1
								AND o.ISACTIVE = 1
								AND elr.ISACTIVE = 1
								AND asg.ISACTIVE = 1
								AND asp.ISACTIVE = 1
								AND o.REGION = @region_name
								AND ( @route_id =0 OR (@route_id <> 0 AND o.ORG_SR_KEY = @route_id))
								AND	( @area_id =0 OR (@area_id <> 0 AND a.AREA_SR_KEY = @area_id))
								AND ( @iselrselected = 'N' OR (@iselrselected = 'Y' AND ast.ENG_LINE_REF IN (SELECT elr_id FROM @elr_id_array)) )
								AND ( (ast.START_MILES + ast.START_YARDS/1760) BETWEEN @start_mileage_from AND @start_mileage_to)
								AND ( @railway_id IS NULL OR (@railway_id IS NOT NULL AND ast.RAILWAY_ID = @railway_id))
								AND ( @ast_grp_id =0 OR (@ast_grp_id <> 0 AND asg.ASSET_GROUP_SR_KEY = @ast_grp_id))
								AND ( @isasttypselected = 'N' OR (@isasttypselected = 'Y' AND asp.ASSET_TYPE_SR_KEY IN (SELECT ast_typ_id FROM @ast_typ)) )
					)		
		
			--Creating Asset GUID array for passing to child SP calculating Compliance and Risk Status
			set @ast_guids =  (SELECT CONCAT('[', '"' + (SELECT distinct STRING_AGG(STRING_ESCAPE(asset_guid, 'json'), '","') FROM #tbl_AssetDetails) + '"', ']'))
			--print @ast_guids

			--Retrieving the compliance and RIsk Status for selected assets
			INSERT INTO #tbl_ComplianceRiskStatus
				(
					asset_guid,
					dtl_compliance,
					dtl_risk_status,
					dtl_frequency,
					dtl_exam_type_id,
					ve_compliance,
					ve_risk_status,
					ve_frequency,
					ve_exam_type_id,
					uw_compliance,
					uw_risk_status,
					uw_frequency,
					uw_exam_type_id
			)
			EXEC [CES].[sp_Get_Asset_Compliance_Risk_Status] @ast_guids,@reference_date
		
			--Compliance and RA filters on asset
			INSERT INTO #tbl_ComplianceSearchResult
					(
							asset_guid,
							region,
							[route],
							area,						
							elr,
							railway_id,
							asset_desc,
							mileage_from,
							mileage_to,							
							asset_grp,
							asset_type,
							operational_stat,
							owning_party,
							primary_material,
							dtl_compliance,
							dtl_risk_status,
							dtl_frequency,
							dtl_exam_type_id,
							ve_compliance,
							ve_risk_status,
							ve_frequency,
							ve_exam_type_id,
							uw_compliance,
							uw_risk_status,
							uw_frequency,
							uw_exam_type_id
					)

					
					SELECT 
						ASSET.asset_guid,
						ASSET.region,
						ASSET.route,
						ASSET.area,
						ASSET.elr,
						ASSET.railway_id,
						ASSET.asset_desc,
						ASSET.mileage_from,
						ASSET.mileage_to,
				
						ASSET.asset_grp,
						ASSET.asset_type,
						ASSET.operational_stat,
						ASSET.owning_party,
						ASSET.primary_material,	

						dtl_compliance,
						dtl_risk_status,
						dtl_frequency,
						dtl_exam_type_id,
						ve_compliance,
						ve_risk_status,
						ve_frequency,
						ve_exam_type_id,
						uw_compliance,
						uw_risk_status,
						uw_frequency,
						uw_exam_type_id

						

				FROM #tbl_AssetDetails ASSET
				LEFT JOIN #tbl_ComplianceRiskStatus CR
				ON ASSET.ASSET_GUID = CR.asset_guid

							
				WHERE
				( @dtl_risk_assessment_id =0 OR (@dtl_risk_assessment_id <> 0 AND UPPER(dtl_risk_status) = @dtl_risk_assessment_value))																			
				AND ( @ve_risk_assessment_id =0 OR (@ve_risk_assessment_id <> 0 AND UPPER(ve_risk_status) = @ve_risk_assessment_value))
				AND ( @uw_risk_assessment_id =0 OR (@uw_risk_assessment_id <> 0 AND UPPER(uw_risk_status) = @uw_risk_assessment_value))
				AND ( @ve_compliance_id =0 OR (@ve_compliance_id <> 0 AND UPPER(ve_compliance) = @ve_compliance_value))
				AND ( @uw_compliance_id =0 OR (@uw_compliance_id <> 0 AND UPPER(uw_compliance) = @uw_compliance_value))
				AND ( @dtl_compliance_id =0 OR (@dtl_compliance_id <> 0 AND UPPER(dtl_compliance) = @dtl_compliance_value))
			
		END

		ELSE	--Basic search
		BEGIN
		
					--print 'basic search'

					INSERT INTO #tbl_AssetDetails
						(
								asset_guid,
								region,
								[route],
								area,						
								elr,
								railway_id,
								asset_desc,
								mileage_from,
								mileage_to,							
								asset_grp,
								asset_type,
								operational_stat,
								owning_party,
								primary_material
						)(
						SELECT 
							ast.ASSET_GUID AS asset_guid,
							o.REGION AS region,
							o.[ROUTE] AS [route],
							a.AREA_NAME AS area,
							elr.ELR_CODE AS elr,
							ast.RAILWAY_ID AS railway_id,
							ast.ASSET_NAME AS asset_desc,
							(ast.START_MILES + ast.START_YARDS/1760) AS mileage_from,
							(ast.END_MILES + ast.END_YARDS/1760) AS mileage_to,
				
							asg.ASSET_GROUP_DESC AS asset_grp,
							asp.ASSET_TYPE_DESC AS asset_type,
							ops.REF_VALUE AS operational_stat,
							ast.OWNING_PARTY,
							mat.REF_VALUE AS primary_material				 
					

						FROM [CES].ASSET ast
						INNER JOIN [CES].ORG o
						ON ast.ORG_SR_KEY = o.ORG_SR_KEY
						INNER JOIN [CES].AREA a
						ON a.AREA_SR_KEY = ast.AREA_SR_KEY
						INNER JOIN [CES].ENGINE_LINE_REF elr
						ON elr.ELR_SR_KEY = ast.ENG_LINE_REF
						INNER JOIN [CES].ASSET_GROUP asg
						ON asg.ASSET_GROUP_SR_KEY = ast.ASSET_GROUP_SR_KEY
						INNER JOIN [CES].ASSET_TYPE asp
						ON asp.ASSET_TYPE_SR_KEY = ast.ASSET_TYPE_SR_KEY
						LEFT JOIN [CES].REFERENCE_VALUE ops
						ON ops.REF_VAL_SR_KEY = ast.OPERATIONAL_STATUS
						AND ops.ISACTIVE = 1
						LEFT JOIN [CES].REFERENCE_VALUE mat
						ON mat.REF_VAL_SR_KEY = ast.PRIMARY_MATERIAL
						AND mat.ISACTIVE = 1
				

						WHERE
							ast.ISACTIVE= 1
						AND o.ISACTIVE = 1
						AND elr.ISACTIVE = 1
						AND asg.ISACTIVE = 1
						AND asp.ISACTIVE = 1
						AND o.REGION = @region_name
						AND ( @route_id =0 OR (@route_id <> 0 AND o.ORG_SR_KEY = @route_id))
						AND	( @area_id =0 OR (@area_id <> 0 AND a.AREA_SR_KEY = @area_id))
						)

					--Creating Asset GUID array for passing to child SP calculating Compliance and Risk Status
					set @ast_guids =  (SELECT CONCAT('[', '"' + (SELECT distinct STRING_AGG(STRING_ESCAPE(asset_guid, 'json'), '","') FROM #tbl_AssetDetails) + '"', ']'))
					--print @ast_guids

					--Retrieving the compliance and RIsk Status for selected assets
					INSERT INTO #tbl_ComplianceRiskStatus
						(
							asset_guid,
							dtl_compliance,
							dtl_risk_status,
							dtl_frequency,
							dtl_exam_type_id,
							ve_compliance,
							ve_risk_status,
							ve_frequency,
							ve_exam_type_id,
							uw_compliance,
							uw_risk_status,
							uw_frequency,
							uw_exam_type_id
					)
					EXEC [CES].[sp_Get_Asset_Compliance_Risk_Status] @ast_guids,@reference_date

					--Compliance and RA filters on asset
					INSERT INTO #tbl_ComplianceSearchResult
					(
							asset_guid,
							region,
							route,	
							area,			
							elr,
							railway_id,
							asset_desc,
							mileage_from,
							mileage_to,							
							asset_grp,
							asset_type,
							operational_stat,
							owning_party,
							primary_material,
							dtl_compliance,
							dtl_risk_status,
							dtl_frequency,
							dtl_exam_type_id,
							ve_compliance,
							ve_risk_status,
							ve_frequency,
							ve_exam_type_id,
							uw_compliance,
							uw_risk_status,
							uw_frequency,
							uw_exam_type_id
					)(
					SELECT 
						ASSET.asset_guid,
						ASSET.region,
						ASSET.route,
						ASSET.area,
						ASSET.elr,
						ASSET.railway_id,
						ASSET.asset_desc,
						ASSET.mileage_from,
						ASSET.mileage_to,
				
						ASSET.asset_grp,
						ASSET.asset_type,
						ASSET.operational_stat,
						ASSET.owning_party,
						ASSET.primary_material,	

						dtl_compliance,
						dtl_risk_status,
						dtl_frequency,
						dtl_exam_type_id,
						ve_compliance,
						ve_risk_status,
						ve_frequency,
						ve_exam_type_id,
						uw_compliance,
						uw_risk_status,
						uw_frequency,
						uw_exam_type_id	

				FROM #tbl_AssetDetails ASSET
				LEFT JOIN #tbl_ComplianceRiskStatus CR
				ON ASSET.ASSET_GUID = CR.asset_guid
				)

		END
		
		--Total count of records
		SELECT @totalresultcnt = COUNT(1) FROM #tbl_ComplianceSearchResult

	
		--If no records are returned in search result
		IF  @totalresultcnt=0 
		BEGIN

			SET @result=
					(
						SELECT 
							JSON_QUERY(
										(
											select
												@pageno AS currentpage,
												@totalresultcnt AS totalcount,
												0 AS totalpages
											FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
										)
							) searchdatacount,
							JSON_QUERY('[]') searchresult
						
						FOR JSON PATH,WITHOUT_ARRAY_WRAPPER, INCLUDE_NULL_VALUES
				)

		END	
		--If alt least 1 record is returned in search result
		ELSE
		BEGIN
			IF @isexporttodoc = 'Y' --Export to Excel
			
			BEGIN
					IF @sortorder = 'asc' 
					BEGIN
				
						SET @result=
						(
							SELECT 
								JSON_QUERY(
											(
												select
													@pageno AS currentpage,
													@totalresultcnt AS totalcount,
													CEILING(@totalresultcnt/@rowsperpage) AS totalpages
												FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
											)
								) searchdatacount,
							(
								SELECT
									asset_guid,
									region,
									route,	
									area,
									elr,
									railway_id,
									asset_desc,
									mileage_from,
									mileage_to,							
									asset_grp,
									asset_type,
									operational_stat,
									owning_party,
									primary_material,
									dtl_compliance,
									dtl_risk_status,
									dtl_frequency,
									dtl_exam_type_id,
									ve_compliance,
									ve_risk_status,
									ve_frequency,
									ve_exam_type_id,
									uw_compliance,
									uw_risk_status,
									uw_frequency,
									uw_exam_type_id								
								FROM
								(

									SELECT
											asset_guid,
											region,
											route,
											area,		
											elr,
											railway_id,
											asset_desc,
											mileage_from,
											mileage_to,							
											asset_grp,
											asset_type,
											operational_stat,
											owning_party,
											primary_material,
											dtl_compliance,
											dtl_risk_status,
											dtl_frequency,
											dtl_exam_type_id,
											ve_compliance,
											ve_risk_status,
											ve_frequency,
											ve_exam_type_id,
											uw_compliance,
											uw_risk_status,
											uw_frequency,
											uw_exam_type_id,
											ROW_NUMBER() OVER (ORDER BY 
																		CASE WHEN @sortcolumn = 'StartMileage' THEN mileage_from ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'AssetGUID' THEN asset_guid ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'Region' THEN region ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'Route' THEN route ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'ELR' THEN elr ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'RailwayID' THEN railway_id ELSE NULL END ASC,  
																		CASE WHEN @sortcolumn = 'AssetDescription' THEN asset_desc  ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'AssetGroup' THEN asset_grp ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'AssetType' THEN asset_type ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'OperationalStat' THEN operational_stat ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'OwningParty' THEN owning_party ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'Material' THEN primary_material ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'DtlCompliance' THEN dtl_compliance ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'DtlRiskStatus' THEN dtl_risk_status  ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'VECompliance' THEN ve_compliance ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'VERiskStatus' THEN ve_risk_status ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'UWCompliance' THEN uw_compliance  ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'UWRiskStatus' THEN uw_risk_status ELSE NULL END ASC
																	 
																	
																	) AS ordrnk

									FROM #tbl_ComplianceSearchResult
								)sr
								ORDER BY ordrnk
								FOR JSON AUTO, INCLUDE_NULL_VALUES
							)searchresult
							FOR JSON PATH,WITHOUT_ARRAY_WRAPPER, INCLUDE_NULL_VALUES
						)
					END
					ELSE IF @sortorder = 'desc' 
					BEGIN
					
						SET @result=
						(
							SELECT 
								JSON_QUERY(
											(
												select
													@pageno AS currentpage,
													@totalresultcnt AS totalcount,
													CEILING(@totalresultcnt/@rowsperpage) AS totalpages
												FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
											)
								) searchdatacount,
							(
								SELECT
									asset_guid,
									region,
									route,
									area,
									elr,
									railway_id,
									asset_desc,
									mileage_from,
									mileage_to,							
									asset_grp,
									asset_type,
									operational_stat,
									owning_party,
									primary_material,
									dtl_compliance,
									dtl_risk_status,
									dtl_frequency,
									dtl_exam_type_id,
									ve_compliance,
									ve_risk_status,
									ve_frequency,
									ve_exam_type_id,
									uw_compliance,
									uw_risk_status,
									uw_frequency,
									uw_exam_type_id
								FROM
								(
									SELECT
											asset_guid,
											region,
											route,
											area,
											elr,
											railway_id,
											asset_desc,
											mileage_from,
											mileage_to,							
											asset_grp,
											asset_type,
											operational_stat,
											owning_party,
											primary_material,
											dtl_compliance,
											dtl_risk_status,
											dtl_frequency,
											dtl_exam_type_id,
											ve_compliance,
											ve_risk_status,
											ve_frequency,
											ve_exam_type_id,
											uw_compliance,
											uw_risk_status,
											uw_frequency,
											uw_exam_type_id,
											ROW_NUMBER() OVER (ORDER BY 
																		CASE WHEN @sortcolumn = 'StartMileage' THEN mileage_from ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'AssetGUID' THEN asset_guid ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'Region' THEN region ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'Route' THEN route ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'ELR' THEN elr ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'RailwayID' THEN railway_id ELSE NULL END DESC,  
																		CASE WHEN @sortcolumn = 'AssetDescription' THEN asset_desc  ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'AssetGroup' THEN asset_grp ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'AssetType' THEN asset_type ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'OperationalStat' THEN operational_stat ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'OwningParty' THEN owning_party ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'Material' THEN primary_material ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'DtlCompliance' THEN dtl_compliance ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'DtlRiskStatus' THEN dtl_risk_status  ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'VECompliance' THEN ve_compliance ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'VERiskStatus' THEN ve_risk_status ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'UWCompliance' THEN uw_compliance  ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'UWRiskStatus' THEN uw_risk_status ELSE NULL END DESC
																	 																	
																	) AS ordrnk

									FROM #tbl_ComplianceSearchResult
								)sr
								ORDER BY ordrnk
								FOR JSON AUTO, INCLUDE_NULL_VALUES
							)searchresult
							FOR JSON PATH,WITHOUT_ARRAY_WRAPPER, INCLUDE_NULL_VALUES
						)
					END
			END

			ELSE IF @isexporttodoc = 'N' --Screen output
			
			BEGIN
				IF @sortorder = 'asc' 
					BEGIN
			
						SET @result=
						(
							SELECT 
								JSON_QUERY(
											(
												select
													@pageno AS currentpage,
													@totalresultcnt AS totalcount,
													CEILING(@totalresultcnt/@rowsperpage) AS totalpages
												FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
											)
								) searchdatacount,
							(
								SELECT
									asset_guid,
									region,
									route,
									area,
									elr,
									railway_id,
									asset_desc,
									mileage_from,
									mileage_to,							
									asset_grp,
									asset_type,
									operational_stat,
									owning_party,
									primary_material,
									dtl_compliance,
									dtl_risk_status,
									dtl_frequency,
									dtl_exam_type_id,
									ve_compliance,
									ve_risk_status,
									ve_frequency,
									ve_exam_type_id,
									uw_compliance,
									uw_risk_status,
									uw_frequency,
									uw_exam_type_id
								FROM
								(
									SELECT
											asset_guid,
											region,
											route,
											area,
											elr,
											railway_id,
											asset_desc,
											mileage_from,
											mileage_to,							
											asset_grp,
											asset_type,
											operational_stat,
											owning_party,
											primary_material,
											dtl_compliance,
											dtl_risk_status,
											dtl_frequency,
											dtl_exam_type_id,
											ve_compliance,
											ve_risk_status,
											ve_frequency,
											ve_exam_type_id,
											uw_compliance,
											uw_risk_status,
											uw_frequency,
											uw_exam_type_id,
											ROW_NUMBER() OVER (ORDER BY 
																		CASE WHEN @sortcolumn = 'StartMileage' THEN mileage_from ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'AssetGUID' THEN asset_guid ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'Region' THEN region ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'Route' THEN route ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'ELR' THEN elr ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'RailwayID' THEN railway_id ELSE NULL END ASC,  
																		CASE WHEN @sortcolumn = 'AssetDescription' THEN asset_desc  ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'AssetGroup' THEN asset_grp ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'AssetType' THEN asset_type ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'OperationalStat' THEN operational_stat ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'OwningParty' THEN owning_party ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'Material' THEN primary_material ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'DtlCompliance' THEN dtl_compliance ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'DtlRiskStatus' THEN dtl_risk_status  ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'VECompliance' THEN ve_compliance ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'VERiskStatus' THEN ve_risk_status ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'UWCompliance' THEN uw_compliance  ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'UWRiskStatus' THEN uw_risk_status ELSE NULL END ASC
																																		
																	) AS ordrnk

									FROM #tbl_ComplianceSearchResult
								)sr
								WHERE sr.ordrnk BETWEEN ((@pageno - 1) * @rowsperpage +1) AND (@pageno * @rowsperpage)
								
								ORDER BY ordrnk
								FOR JSON AUTO, INCLUDE_NULL_VALUES
							)searchresult
							FOR JSON PATH,WITHOUT_ARRAY_WRAPPER, INCLUDE_NULL_VALUES
						)
					END
				
					ELSE IF @sortorder = 'desc' 
					BEGIN
				
						SET @result=
						(
							SELECT 
								JSON_QUERY(
											(
												select
													@pageno AS currentpage,
													@totalresultcnt AS totalcount,
													CEILING(@totalresultcnt/@rowsperpage) AS totalpages
												FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
											)
								) searchdatacount,
							(
								SELECT
									asset_guid,
									region,
									route,	
									area,
									elr,
									railway_id,
									asset_desc,
									mileage_from,
									mileage_to,							
									asset_grp,
									asset_type,
									operational_stat,
									owning_party,
									primary_material,
									dtl_compliance,
									dtl_risk_status,
									dtl_frequency,
									dtl_exam_type_id,
									ve_compliance,
									ve_risk_status,
									ve_frequency,
									ve_exam_type_id,
									uw_compliance,
									uw_risk_status,
									uw_frequency,
									uw_exam_type_id
								FROM
								(
									SELECT
											asset_guid,
											region,
											route,
											area,
											elr,
											railway_id,
											asset_desc,
											mileage_from,
											mileage_to,							
											asset_grp,
											asset_type,
											operational_stat,
											owning_party,
											primary_material,
											dtl_compliance,
											dtl_risk_status,
											dtl_frequency,
											dtl_exam_type_id,
											ve_compliance,
											ve_risk_status,
											ve_frequency,
											ve_exam_type_id,
											uw_compliance,
											uw_risk_status,
											uw_frequency,
											uw_exam_type_id,
											ROW_NUMBER() OVER (ORDER BY 
																		CASE WHEN @sortcolumn = 'StartMileage' THEN mileage_from ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'AssetGUID' THEN asset_guid ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'Region' THEN region ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'Route' THEN route ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'ELR' THEN elr ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'RailwayID' THEN railway_id ELSE NULL END DESC,  
																		CASE WHEN @sortcolumn = 'AssetDescription' THEN asset_desc  ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'AssetGroup' THEN asset_grp ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'AssetType' THEN asset_type ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'OperationalStat' THEN operational_stat ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'OwningParty' THEN owning_party ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'Material' THEN primary_material ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'DtlCompliance' THEN dtl_compliance ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'DtlRiskStatus' THEN dtl_risk_status  ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'VECompliance' THEN ve_compliance ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'VERiskStatus' THEN ve_risk_status ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'UWCompliance' THEN uw_compliance  ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'UWRiskStatus' THEN uw_risk_status ELSE NULL END DESC
																	
																	) AS ordrnk

									FROM #tbl_ComplianceSearchResult
								)sr
								WHERE sr.ordrnk BETWEEN ((@pageno - 1) * @rowsperpage +1) AND (@pageno * @rowsperpage)
								
								ORDER BY ordrnk
								FOR JSON AUTO, INCLUDE_NULL_VALUES
							)searchresult
							FOR JSON PATH,WITHOUT_ARRAY_WRAPPER, INCLUDE_NULL_VALUES
						)
					END
		
			END

		END
	
		SELECT @result
		
	END TRY
	BEGIN CATCH
		SET @ErrorMsg = ERROR_MESSAGE() + 
						' Line Num:' + CONVERT(VARCHAR(5), ERROR_LINE()) + 
						',ErrorNum:' + CONVERT(VARCHAR(5), ERROR_NUMBER()) + 
						',Severity:' + CONVERT(VARCHAR(5), ERROR_SEVERITY()) + 
						',State:' + CONVERT(VARCHAR(10), ERROR_STATE()) + 
						',Procedure:' + CONVERT(VARCHAR(25), ERROR_PROCEDURE());  
		
		DROP TABLE IF EXISTS #tbl_ComplianceRiskStatus;
		DROP TABLE IF EXISTS #tbl_ComplianceSearchResult;
	
		DROP TABLE IF EXISTS #tbl_AssetDetails;
		THROW 50000,@ErrorMsg,1;

		
	END CATCH

	DROP TABLE IF EXISTS #tbl_ComplianceRiskStatus;
	DROP TABLE IF EXISTS #tbl_ComplianceSearchResult;
	
	DROP TABLE IF EXISTS #tbl_AssetDetails;
	SET NOCOUNT OFF
END
=================================================================================================
/****** Object:  StoredProcedure [CES].[sp_Get_TaskList_SearchResult]    Script Date: 3/26/2021 9:56:43 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/***************************************************************************************************************************************            
* Name						: sp_Get_TaskList_SearchResult            
* Created By				: Cognizant            
* Date Created				: 25-Jan-2020           
* Description				: This stored procedure provides the search result for task list basic and advanced search.  
* Input Parameters			: JSON      
* Output Parameters			: JSON            
* Return Value				: N/A            
* Assumptions				: None    
* Execution Statement		: Exec [CES].sp_Get_TaskList_SearchResult '{
																			"region_name": "Wales and Western",
																			"route_id": 0,
																			"area_id": 0,
																			"supplier_id": 0,
																			"exam_type_id": 0,
																			"exam_status_id": 0,
																			"elr_id":[227,199],	
																			"start_mileage_from": -1,
																			"start_mileage_to": 99999,
																			"railway_id": null,
																			"ast_grp_id": 0,
																			"ast_typ_id": [0],
																			"exam_id": 0,
																			"task_list_stat_id": 0,
																			"compliance_date_from": "1/1/1900",
																			"compliance_date_to": "31/12/9999",
																			"tasklist_yr_id": 328,
																			"due_date_from": "1/1/1900",
																			"due_date_to": "31/12/9999",
																			"isexporttodoc": "N",
																			"sortcolumn": "StartMileage",
																			"sortorder": "asc",
																			"pageno": 1,
																			"rowsperpage": 100
																		}','N'
*								
* Modified Date     Modified By   Revision Number  Modifications            

*******************************************************************************************************************************************/ 



ALTER PROCEDURE [CES].[sp_Get_TaskList_SearchResult]
	@Input_JSON			NVARCHAR(MAX),
	@IsSupplierSearch	CHAR(1)
WITH RECOMPILE
AS
BEGIN
	SET NOCOUNT ON
	BEGIN TRY
		DECLARE
				@ErrorMsg				VARCHAR(250),
				@result					NVARCHAR(MAX),
				@region_name			VARCHAR(64),
				@route_id				DECIMAL(18),
				@area_id				DECIMAL(18),
				@elr_id					NVARCHAR(MAX),
				@supplier_id			DECIMAL(18),
				@exam_type_id			DECIMAL(18),
				@exam_status_id			DECIMAL(18),
				@start_mileage_from		DECIMAL(18,4),
				@start_mileage_to		DECIMAL(18,4),
				@railway_id				VARCHAR(64),
				@ast_grp_id				DECIMAL(18),
				@exam_id				DECIMAL(18),
				@task_list_stat_id		DECIMAL(18),
				@compliance_date_from	DATE,
				@compliance_date_to		DATE,
				@tasklist_yr_id			DECIMAL(18),
				@due_date_from			DATE,
				@due_date_to			DATE,
				@isexporttodoc			VARCHAR(1),
				@sortcolumn				VARCHAR(30),
				@sortorder				VARCHAR(5),
				@pageno					DECIMAL(18),
				@rowsperpage			DECIMAL(18),
				@ast_typ_array			NVARCHAR(MAX),
				@isasttypselected		CHAR(1) = 'N',
				@isbasicsearch			CHAR(1) = 'Y',
				@totalresultcnt			INT,
				@current_date			DATE = GETDATE(),
				@task_list_status		VARCHAR(30),
				@task_list_id			VARCHAR(18),
				@iselrselected		CHAR(1) = 'N'

		DECLARE @ast_typ TABLE
		(
			ast_typ_id DECIMAL(18)
		)

		CREATE TABLE #tbl_SearchResult
		(
				asset_guid					VARCHAR(32),
				region						VARCHAR(64),
				route						VARCHAR(64),
				area						VARCHAR(64),
				elr							VARCHAR(4),
				start_mileage				DECIMAL(18,4),
				end_mileage					DECIMAL(18,4),
				railway_id					VARCHAR(64),
				asset_desc					VARCHAR(200),
				asset_grp					VARCHAR(64),
				asset_type					VARCHAR(64),
				hce_flg						VARCHAR(4),
				exam_id						DECIMAL(18),
				exam_frequency				VARCHAR(20),
				exam_req_stat				VARCHAR(18),
				exam_rpt_stat				VARCHAR(18),
				exam_type					VARCHAR(32),
				compliance_dt				DATE,
				supplier					VARCHAR(64),
				due_dt						DATE,
				onsite_pre_compl_tol_dt		DATE,
				onsite_post_compl_tol_dt	DATE,
				baseline_plan_dt			DATE,
				plan_dt						DATE,
				exam_dt						DATE,
				submission_dt				DATE,
				signed_off_dt				DATE,
				cr_id						DECIMAL(18),
				specific_exam_req			VARCHAR(1000),
				tenanted_arch				VARCHAR(5),
				task_list_stat				VARCHAR(18),
				nr_internal_note			VARCHAR(4000),
				comments_to_sec				VARCHAR(4000),
				other_supplier_comment		VARCHAR(4000),
				posession_critical			VARCHAR(32),
				task_list_id				DECIMAL(18),
				exam_sr_key					DECIMAL(18),
				due_dt_earliest				DATE,
				due_dt_latest				DATE,
				max_tolerance_dt			DATE
		)

		DECLARE @elr_id_array TABLE
		(
			elr_id DECIMAL(18)
		)


		SELECT 
			@region_name = COALESCE(@region_name,CASE LOWER([key]) WHEN 'region_name' THEN [value] ELSE NULL END),
			@route_id = COALESCE(@route_id,CASE LOWER([key]) WHEN 'route_id' THEN [value] ELSE NULL END),
			@area_id = COALESCE(@area_id,CASE LOWER([key]) WHEN 'area_id' THEN [value] ELSE NULL END),
			@supplier_id = COALESCE(@supplier_id,CASE LOWER([key]) WHEN 'supplier_id' THEN [value] ELSE NULL END),
			@exam_type_id = COALESCE(@exam_type_id,CASE LOWER([key]) WHEN 'exam_type_id' THEN [value] ELSE NULL END),
			@exam_status_id = COALESCE(@exam_status_id,CASE LOWER([key]) WHEN 'exam_status_id' THEN [value] ELSE NULL END),
			@elr_id = COALESCE(@elr_id,CASE LOWER([key]) WHEN 'elr_id' THEN [value] ELSE NULL END),
			@start_mileage_from = COALESCE(@start_mileage_from,CASE LOWER([key]) WHEN 'start_mileage_from' THEN [value] ELSE NULL END),
			@start_mileage_to = COALESCE(@start_mileage_to,CASE LOWER([key]) WHEN 'start_mileage_to' THEN [value] ELSE NULL END),
			@railway_id = COALESCE(@railway_id,CASE LOWER([key]) WHEN 'railway_id' THEN [value] ELSE NULL END),
			@ast_grp_id = COALESCE(@ast_grp_id,CASE LOWER([key]) WHEN 'ast_grp_id' THEN [value] ELSE NULL END),
			@ast_typ_array = COALESCE(@ast_typ_array,CASE LOWER([key]) WHEN 'ast_typ_id' THEN [value] ELSE NULL END),
			@exam_id = COALESCE(@exam_id,CASE LOWER([key]) WHEN 'exam_id' THEN [value] ELSE NULL END),
			@task_list_stat_id = COALESCE(@task_list_stat_id,CASE LOWER([key]) WHEN 'task_list_stat_id' THEN [value] ELSE NULL END),
			@compliance_date_from = COALESCE(@compliance_date_from,CASE LOWER([key]) WHEN 'compliance_date_from' THEN CONVERT(DATE,[value],103) ELSE NULL END),
			@compliance_date_to = COALESCE(@compliance_date_to,CASE LOWER([key]) WHEN 'compliance_date_to' THEN CONVERT(DATE,[value],103) ELSE NULL END),
			@tasklist_yr_id = COALESCE(@tasklist_yr_id,CASE LOWER([key]) WHEN 'tasklist_yr_id' THEN [value] ELSE NULL END),
			@due_date_from = COALESCE(@due_date_from,CASE LOWER([key]) WHEN 'due_date_from' THEN CONVERT(DATE,[value],103) ELSE NULL END),
			@due_date_to = COALESCE(@due_date_to,CASE LOWER([key]) WHEN 'due_date_to' THEN CONVERT(DATE,[value],103) ELSE NULL END),
			@isexporttodoc = COALESCE(@isexporttodoc,CASE LOWER([key]) WHEN 'isexporttodoc' THEN [value] ELSE NULL END),
			@sortcolumn = COALESCE(@sortcolumn,CASE LOWER([key]) WHEN 'sortcolumn' THEN [value] ELSE NULL END),
			@sortorder = COALESCE(@sortorder,CASE LOWER([key]) WHEN 'sortorder' THEN [value] ELSE NULL END),
			@pageno = COALESCE(@pageno,CASE LOWER([key]) WHEN 'pageno' THEN [value] ELSE NULL END),
			@rowsperpage = COALESCE(@rowsperpage,CASE LOWER([key]) WHEN 'rowsperpage' THEN [value] ELSE NULL END)

		FROM	OPENJSON(@Input_JSON);



		IF (@region_name IS NULL)
		BEGIN

			SET @ErrorMsg = 'Region cannot be NULL';
			DROP TABLE IF EXISTS #tbl_SearchResult;
			THROW 50000,@ErrorMsg,1;
		END

		IF (@IsSupplierSearch = 'N')
		BEGIN
			IF (@supplier_id IS NULL OR @region_name IS NULL)
			BEGIN
				SET @ErrorMsg = 'Region and/or Supplier cannot be NULL';
				DROP TABLE IF EXISTS #tbl_SearchResult;
				THROW 50000,@ErrorMsg,1;
			END
		END

		IF @ast_typ_array IS NOT NULL 
		BEGIN
			INSERT INTO @ast_typ (ast_typ_id)
			SELECT[value] FROM OPENJSON(@ast_typ_array);

			IF EXISTS (SELECT 1 FROM @ast_typ WHERE ast_typ_id=0)
				SET @isasttypselected = 'N'
			ELSE
				SET @isasttypselected = 'Y'
		END 

		IF @elr_id IS NOT NULL 
		BEGIN
			INSERT INTO @elr_id_array (elr_id)
			SELECT[value] FROM OPENJSON(@elr_id);

			IF EXISTS (SELECT 1 FROM @elr_id_array WHERE elr_id=0)
				SET @iselrselected = 'N'
			ELSE
				SET @iselrselected = 'Y'
		END 

		IF (@IsSupplierSearch = 'N')
		BEGIN
			IF (@iselrselected = 'N' AND @start_mileage_from = -1 AND @start_mileage_to = 99999 AND @railway_id IS NULL AND @ast_grp_id = 0 AND @isasttypselected = 'N' AND @exam_id = 0 AND @exam_type_id = 0
				AND @exam_status_id =0 AND @task_list_stat_id = 0 AND @compliance_date_from = CONVERT(DATE,'1/1/1900',103) AND @compliance_date_to = CONVERT(DATE,'31/12/9999',103) 
				AND @due_date_from = CONVERT(DATE,'1/1/1900',103) AND	@due_date_to = CONVERT(DATE,'31/12/9999',103) )
			
				SET @isbasicsearch = 'Y'
			ELSE
				SET @isbasicsearch = 'N'
		END
		ELSE
		BEGIN
			IF (@iselrselected = 'N' AND @start_mileage_from = -1 AND @start_mileage_to = 99999 AND @railway_id IS NULL AND @ast_grp_id = 0 AND @isasttypselected = 'N' AND @exam_id = 0 AND @exam_type_id = 0
				AND @exam_status_id =0 AND @due_date_from = CONVERT(DATE,'1/1/1900',103) AND @due_date_to = CONVERT(DATE,'31/12/9999',103) )
			
				SET @isbasicsearch = 'Y'
			ELSE
				SET @isbasicsearch = 'N'
		END



		IF (@IsSupplierSearch = 'N')
		BEGIN
			IF @isbasicsearch = 'N'		-- Advanced Search
			BEGIN

		
					INSERT INTO #tbl_SearchResult
					(
							asset_guid,
							region,
							route,
							area,
							elr,
							start_mileage,
							end_mileage,
							railway_id,
							asset_desc,
							asset_grp,
							asset_type,
							hce_flg,
							exam_id,
							exam_frequency,
							exam_req_stat,
							exam_rpt_stat,
							exam_type,
							compliance_dt,
							supplier,
							due_dt,
							onsite_pre_compl_tol_dt,
							onsite_post_compl_tol_dt,
							baseline_plan_dt,
							plan_dt,
							exam_dt,
							submission_dt,
							signed_off_dt,
							cr_id,
							specific_exam_req,
							tenanted_arch,
							task_list_stat,
							nr_internal_note,
							comments_to_sec,
							other_supplier_comment,
							posession_critical,
							task_list_id,
							exam_sr_key,
							due_dt_earliest,
							due_dt_latest,
							max_tolerance_dt
					)
					
																
					SELECT 
						final.asset_guid,
						final.region,
						final.route,
						final.area,
						final.elr,
						final.start_mileage,
						final.end_mileage,
						final.railway_id,
						final.asset_desc,
						final.asset_grp,
						final.asset_type,
						final.hce_flg,
						final.exam_id,
						final.exam_frequency,
						final.exam_req_stat,
						final.exam_rpt_stat,
						final.exam_type,
						final.compliance_dt,
						final.supplier,
						final.due_dt,
						CASE WHEN exam_type IN ('Visual','Detailed','Enhanced') 
							THEN CONVERT(DATE, DATEADD( week, (0- ct.SITE_TOLERANCE_WEEKS), DATEADD(month,exam_freq_in_months,ltst_exm.EXAM_ACTUAL_DATE)),103) 
							WHEN exam_type IN ('Underwater', 'Line Of Route' ) OR exam_type LIKE '%Additional%'
							THEN WORK_YR_START_DT 
							ELSE NULL
						END AS onsite_pre_compl_tol_dt,
						CASE WHEN exam_type IN ('Visual','Detailed','Enhanced') 
							THEN CONVERT(DATE, DATEADD( week, ct.SITE_TOLERANCE_WEEKS, DATEADD(month,exam_freq_in_months,ltst_exm.EXAM_ACTUAL_DATE)),103)
							WHEN exam_type IN ('Underwater', 'Line Of Route' ) OR exam_type LIKE '%Additional%'
							THEN WORK_YR_END_DT 
							ELSE NULL
						END AS onsite_post_compl_tol_dt,
						final.baseline_plan_dt,
						final.plan_dt,
						final.exam_dt,
						final.submission_dt,
						final.signed_off_dt,
						final.cr_id,
						final.specific_exam_req,
						final.tenanted_arch,
						final.task_list_stat,
						final.nr_internal_note,
						final.comment_to_sec,
						final.other_supplier_comment,
						acs.POSSESSION AS posession_critical,
						final.task_list_id,
						final.exam_sr_key,
						CASE WHEN exam_type IN ('Visual','Detailed','Enhanced') 
							THEN CONVERT(DATE, DATEADD( week, (0- ct.SITE_TOLERANCE_WEEKS), final.due_dt),103) 
							WHEN exam_type IN ('Underwater', 'Line Of Route' ) OR exam_type LIKE '%Additional%'
							THEN WORK_YR_START_DT 
							ELSE NULL
						END AS due_dt_earliest,
						CASE WHEN exam_type IN ('Visual','Detailed','Enhanced') 
							THEN CONVERT(DATE, DATEADD( week, ct.SITE_TOLERANCE_WEEKS, final.due_dt),103) 
							WHEN exam_type IN ('Underwater', 'Line Of Route' ) OR exam_type LIKE '%Additional%'
							THEN WORK_YR_END_DT 
							ELSE NULL
						END AS due_dt_latest,
						CONVERT(DATE, DATEADD( week, ISNULL(ct.REVIEW_TOLERANCE_WEEKS,0), final.due_dt),103) AS max_tolerance_dt
					FROM
					(
							SELECT 
								ast.ASSET_GUID AS asset_guid,
								o.REGION AS region,
								o.ROUTE AS route,
								a.AREA_NAME AS area,
								elr.ELR_CODE AS elr,
								(ast.START_MILES + ast.START_YARDS/1760) AS start_mileage,
								(ast.END_MILES + ast.END_YARDS/1760) AS end_mileage,
								ast.RAILWAY_ID AS railway_id,
								ast.ASSET_NAME AS asset_desc,
								asg.ASSET_GROUP_DESC AS asset_grp,
								asp.ASSET_TYPE_DESC AS asset_type,
								CASE WHEN ast.hce_flag = 'Y' THEN 'Yes' ELSE 'No' END AS hce_flg,
								ex.exam_id,
								ef.exam_frequency,
								ex.EXAM_REQ_STATUS AS exam_req_stat,
								ex.EXAM_REPORT_STATUS AS exam_rpt_stat,
								et.EXAM_TYPE AS exam_type,
								cmp.COMP_DATE AS compliance_dt,
								s.SUPPLIER_NAME AS supplier,
								wrk.EXAM_DUE_DATE AS due_dt,
								--NULL AS onsite_pre_compl_tol_dt,
								--NULL AS onsite_post_compl_tol_dt,
								ex.EXAM_BASELINE_DATE AS baseline_plan_dt,
								ex.EXAM_PLANNED_DATE AS plan_dt,
								ex.EXAM_ACTUAL_DATE AS exam_dt,
								ex.EXAM_SUBMISSION_DATE AS submission_dt,
								ex.EXAM_SIGNOFF_DATE AS signed_off_dt,
								ex.CHANGE_REQ_ID AS cr_id,
								ef.specific_exam_req,
								CASE WHEN ast.TENANTED_FLG = 'Y' THEN 'Yes'
									 WHEN ast.TENANTED_FLG = 'N' THEN 'No'
									 ELSE 'N/A'
								END AS tenanted_arch,
								wrk.WORK_STATUS AS task_list_stat,
								ex.INTERNAL_NOTES AS nr_internal_note,
								ex.comment_to_sec,
								ex.SUPPLIER_COMMENTS AS other_supplier_comment,
								--NULL AS posession_critical,
								wrk.WORK_SR_KEY AS task_list_id,
								ex.EXAM_SR_KEY,
								ex.EXAM_TYPE_SR_KEY,
								ISNULL(ef.exam_freq_in_months,0) AS exam_freq_in_months,
								wrk.WORK_YR_START_DT,
								wrk.WORK_YR_END_DT
								
							FROM [CES].ASSET ast
							INNER JOIN [CES].ORG o
							ON ast.ORG_SR_KEY = o.ORG_SR_KEY
							INNER JOIN [CES].AREA a
							ON a.AREA_SR_KEY = ast.AREA_SR_KEY
							INNER JOIN [CES].ENGINE_LINE_REF elr
							ON elr.ELR_SR_KEY = ast.ENG_LINE_REF
							AND elr.ORG_SR_KEY = ast.ORG_SR_KEY
							AND elr.AREA_SR_KEY = ast.AREA_SR_KEY
							INNER JOIN [CES].ASSET_GROUP asg
							ON asg.ASSET_GROUP_SR_KEY = ast.ASSET_GROUP_SR_KEY
							INNER JOIN [CES].ASSET_TYPE asp
							ON asp.ASSET_TYPE_SR_KEY = ast.ASSET_TYPE_SR_KEY
							INNER JOIN [CES].EXAM ex
							ON ex.ASSET_GUID = ast.ASSET_GUID
							INNER JOIN [CES].WORK wrk
							ON wrk.WORK_SR_KEY = ex.WORK_SR_KEY
							AND wrk.ISACTIVE = 1
							INNER JOIN [CES].EXAM_TYPE et
							ON et.EXAM_TYPE_SR_KEY = ex.EXAM_TYPE_SR_KEY
							INNER JOIN [CES].SUPPLIER s
							ON s.SUPPLIER_SR_KEY = ex.SUPPLIER_SR_KEY
							OUTER APPLY
								(
									SELECT
										COMP_DATE
									FROM 
									(
										SELECT 
											COMP_DATE,
											ROW_NUMBER() OVER (ORDER BY EFFECTIVE_FROM_DT DESC) rnk
										FROM CES.COMPLIANCE c
										WHERE ASSET_GUID = ex.ASSET_GUID
										AND EXAM_TYPE_SR_KEY = ex.EXAM_TYPE_SR_KEY
										AND @current_date BETWEEN EFFECTIVE_FROM_DT AND ISNULL(EFFECTIVE_TO_DT,CONVERT(DATE,'31/12/9999',103))
									)c
									WHERE rnk = 1
								) cmp
							OUTER APPLY
							(
								SELECT 
										specific_exam_req,
										( (ISNULL(INTERVAL_YEARS,0)*12) + (ISNULL(INTERVAL_MONTHS,0)) + (ISNULL(INTERVAL_DAYS,0)/30) ) AS exam_freq_in_months,
										(CAST(ISNULL(INTERVAL_YEARS,0) AS VARCHAR) + 'y '+CAST(ISNULL(INTERVAL_MONTHS,0) AS VARCHAR)+ 'm '+CAST(ISNULL(INTERVAL_DAYS,0) AS VARCHAR)+ 'd') AS exam_frequency
								FROM
								(
									SELECT
										INTERVAL_YEARS,
										INTERVAL_MONTHS,
										INTERVAL_DAYS,
										EXAM_REQUIREMENT AS specific_exam_req,
										ROW_NUMBER() OVER (PARTITION BY ASSET_GUID,EXAM_TYPE_SR_KEY ORDER BY EFFECTIVE_FROM_DT DESC) rnk
									FROM CES.EXAM_CYCLE
									WHERE ISACTIVE =1
									AND @current_date BETWEEN EFFECTIVE_FROM_DT AND ISNULL(EFFECTIVE_TO_DT,CONVERT(DATE,'31/12/9999',103))
									AND ASSET_GUID = ex.ASSET_GUID
									AND EXAM_TYPE_SR_KEY = ex.EXAM_TYPE_SR_KEY
								)t
								WHERE rnk = 1
							)ef
							
							WHERE
								ast.ISACTIVE= 1
							AND o.ISACTIVE = 1
							AND a.ISACTIVE = 1
							AND elr.ISACTIVE = 1
							AND asg.ISACTIVE = 1
							AND asp.ISACTIVE = 1
							AND ex.ISACTIVE = 1
							AND et.ISACTIVE = 1
							AND s.ISACTIVE = 1
							AND o.REGION = @region_name
							AND ( @route_id =0 OR (@route_id <> 0 AND o.ORG_SR_KEY = @route_id))
							AND	( @area_id =0 OR (@area_id <> 0 AND a.AREA_SR_KEY = @area_id))
							AND ( @supplier_id = 0 OR (@supplier_id <> 0 AND ex.SUPPLIER_SR_KEY = @supplier_id) )
							AND ( @iselrselected = 'N' OR (@iselrselected = 'Y' AND ast.ENG_LINE_REF IN (SELECT elr_id FROM @elr_id_array)) )
							AND ( (ast.START_MILES + ast.START_YARDS/1760) BETWEEN @start_mileage_from AND @start_mileage_to)
							AND ( @railway_id IS NULL OR (@railway_id IS NOT NULL AND ast.RAILWAY_ID = @railway_id))
							AND ( @ast_grp_id =0 OR (@ast_grp_id <> 0 AND asg.ASSET_GROUP_SR_KEY = @ast_grp_id))
							AND ( @isasttypselected = 'N' OR (@isasttypselected = 'Y' AND asp.ASSET_TYPE_SR_KEY IN (SELECT ast_typ_id FROM @ast_typ)) )
							AND ( @exam_id = 0 OR (@exam_id <>0 AND ex.EXAM_ID = @exam_id) )
							AND	( @exam_type_id = 0 OR (@exam_type_id <>0 AND et.EXAM_TYPE_SR_KEY = @exam_type_id))
							AND ( @exam_status_id = 0 OR (@exam_status_id<>0 AND ex.EXAM_REQ_STATUS = @exam_status_id) )
							AND ( @task_list_stat_id = 0 OR (@task_list_stat_id<>0 AND wrk.WORK_STATUS = @task_list_stat_id) )
							AND ( @tasklist_yr_id = 0 OR (@tasklist_yr_id<>0 AND wrk.WORK_YEAR_KEY = @tasklist_yr_id) )
							AND ( CONVERT (DATE,wrk.EXAM_DUE_DATE,103) BETWEEN @due_date_from AND @due_date_to)
							AND ( ( @compliance_date_from = CONVERT(DATE,'1/1/1900',103) AND @compliance_date_to = CONVERT(DATE,'31/12/9999',103))
								OR ( (@compliance_date_from <> CONVERT(DATE,'1/1/1900',103) OR @compliance_date_to <> CONVERT(DATE,'31/12/9999',103))
									AND CONVERT(DATE, cmp.COMP_DATE, 103) BETWEEN @compliance_date_from AND @compliance_date_to ) )
					)final
					LEFT JOIN [CES].EXAM ltst_exm
					ON ltst_exm.ASSET_GUID = final.asset_guid
					AND ltst_exm.EXAM_TYPE_SR_KEY = final.EXAM_TYPE_SR_KEY
					AND ltst_exm.IS_LAST_EXAM = 'Y'		
					AND ltst_exm.ISACTIVE = 1
					LEFT JOIN [CES].COMPLIANCE_TOLERANCE ct
					ON ct.EXAM_TYPE_SR_KEY = final.EXAM_TYPE_SR_KEY
					AND ct.ISACTIVE = 1
					AND final.exam_freq_in_months BETWEEN ct.FREQ_INTERVAL_MONTHS_FROM AND ct.FREQ_INTERVAL_MONTHS_TO
					LEFT JOIN CES.ACCESS acs
					ON acs.ASSET_GUID = final.asset_guid
					AND acs.EXAM_TYPE_SR_KEY = final.EXAM_TYPE_SR_KEY


			END

			ELSE	--Basic search
			BEGIN
		
					
					INSERT INTO #tbl_SearchResult
					(
							asset_guid,
							region,
							route,
							area,
							elr,
							start_mileage,
							end_mileage,
							railway_id,
							asset_desc,
							asset_grp,
							asset_type,
							hce_flg,
							exam_id,
							exam_frequency,
							exam_req_stat,
							exam_rpt_stat,
							exam_type,
							compliance_dt,
							supplier,
							due_dt,
							onsite_pre_compl_tol_dt,
							onsite_post_compl_tol_dt,
							baseline_plan_dt,
							plan_dt,
							exam_dt,
							submission_dt,
							signed_off_dt,
							cr_id,
							specific_exam_req,
							tenanted_arch,
							task_list_stat,
							nr_internal_note,
							comments_to_sec,
							other_supplier_comment,
							posession_critical,
							task_list_id,
							exam_sr_key,
							due_dt_earliest,
							due_dt_latest,
							max_tolerance_dt
					)
																
					SELECT 
						final.asset_guid,
						final.region,
						final.route,
						final.area,
						final.elr,
						final.start_mileage,
						final.end_mileage,
						final.railway_id,
						final.asset_desc,
						final.asset_grp,
						final.asset_type,
						final.hce_flg,
						final.exam_id,
						final.exam_frequency,
						final.exam_req_stat,
						final.exam_rpt_stat,
						final.exam_type,
						final.compliance_dt,
						final.supplier,
						final.due_dt,
						CASE WHEN exam_type IN ('Visual','Detailed','Enhanced') 
							THEN CONVERT(DATE, DATEADD( week, (0- ct.SITE_TOLERANCE_WEEKS), DATEADD(month,exam_freq_in_months,ltst_exm.EXAM_ACTUAL_DATE)),103) 
							WHEN exam_type IN ('Underwater', 'Line Of Route' ) OR exam_type LIKE '%Additional%'
							THEN WORK_YR_START_DT 
							ELSE NULL
						END AS onsite_pre_compl_tol_dt,
						CASE WHEN exam_type IN ('Visual','Detailed','Enhanced') 
							THEN CONVERT(DATE, DATEADD( week, ct.SITE_TOLERANCE_WEEKS, DATEADD(month,exam_freq_in_months,ltst_exm.EXAM_ACTUAL_DATE)),103)
							WHEN exam_type IN ('Underwater', 'Line Of Route' ) OR exam_type LIKE '%Additional%'
							THEN WORK_YR_END_DT 
							ELSE NULL
						END AS onsite_post_compl_tol_dt,
						final.baseline_plan_dt,
						final.plan_dt,
						final.exam_dt,
						final.submission_dt,
						final.signed_off_dt,
						final.cr_id,
						final.specific_exam_req,
						final.tenanted_arch,
						final.task_list_stat,
						final.nr_internal_note,
						final.comment_to_sec,
						final.other_supplier_comment,
						acs.POSSESSION AS posession_critical,
						final.task_list_id,
						final.exam_sr_key,
						CASE WHEN exam_type IN ('Visual','Detailed','Enhanced') 
							THEN CONVERT(DATE, DATEADD( week, (0- ct.SITE_TOLERANCE_WEEKS), final.due_dt),103) 
							WHEN exam_type IN ('Underwater', 'Line Of Route' ) OR exam_type LIKE '%Additional%'
							THEN WORK_YR_START_DT 
							ELSE NULL
						END AS due_dt_earliest,
						CASE WHEN exam_type IN ('Visual','Detailed','Enhanced') 
							THEN CONVERT(DATE, DATEADD( week, ct.SITE_TOLERANCE_WEEKS, final.due_dt),103) 
							WHEN exam_type IN ('Underwater', 'Line Of Route' ) OR exam_type LIKE '%Additional%'
							THEN WORK_YR_END_DT 
							ELSE NULL
						END AS due_dt_latest,
						CONVERT(DATE, DATEADD( week, ISNULL(ct.REVIEW_TOLERANCE_WEEKS,0), final.due_dt),103) AS max_tolerance_dt
					FROM
					(
							SELECT 
								ast.ASSET_GUID AS asset_guid,
								o.REGION AS region,
								o.ROUTE AS route,
								a.AREA_NAME AS area,
								elr.ELR_CODE AS elr,
								(ast.START_MILES + ast.START_YARDS/1760) AS start_mileage,
								(ast.END_MILES + ast.END_YARDS/1760) AS end_mileage,
								ast.RAILWAY_ID AS railway_id,
								ast.ASSET_NAME AS asset_desc,
								asg.ASSET_GROUP_DESC AS asset_grp,
								asp.ASSET_TYPE_DESC AS asset_type,
								CASE WHEN ast.hce_flag = 'Y' THEN 'Yes' ELSE 'No' END AS hce_flg,
								ex.exam_id,
								ef.exam_frequency,
								ex.EXAM_REQ_STATUS AS exam_req_stat,
								ex.EXAM_REPORT_STATUS AS exam_rpt_stat,
								et.EXAM_TYPE AS exam_type,
								cmp.COMP_DATE AS compliance_dt,
								s.SUPPLIER_NAME AS supplier,
								wrk.EXAM_DUE_DATE AS due_dt,
								--NULL AS onsite_pre_compl_tol_dt,
								--NULL AS onsite_post_compl_tol_dt,
								ex.EXAM_BASELINE_DATE AS baseline_plan_dt,
								ex.EXAM_PLANNED_DATE AS plan_dt,
								ex.EXAM_ACTUAL_DATE AS exam_dt,
								ex.EXAM_SUBMISSION_DATE AS submission_dt,
								ex.EXAM_SIGNOFF_DATE AS signed_off_dt,
								ex.CHANGE_REQ_ID AS cr_id,
								ef.specific_exam_req,
								CASE WHEN ast.TENANTED_FLG = 'Y' THEN 'Yes'
									 WHEN ast.TENANTED_FLG = 'N' THEN 'No'
									 ELSE 'N/A'
								END AS tenanted_arch,
								wrk.WORK_STATUS AS task_list_stat,
								ex.INTERNAL_NOTES AS nr_internal_note,
								ex.comment_to_sec,
								ex.SUPPLIER_COMMENTS AS other_supplier_comment,
								--NULL AS posession_critical,
								wrk.WORK_SR_KEY AS task_list_id,
								ex.EXAM_SR_KEY,
								ex.EXAM_TYPE_SR_KEY,
								ISNULL(ef.exam_freq_in_months,0) AS exam_freq_in_months,
								wrk.WORK_YR_START_DT,
								wrk.WORK_YR_END_DT
								
							FROM [CES].ASSET ast
							INNER JOIN [CES].ORG o
							ON ast.ORG_SR_KEY = o.ORG_SR_KEY
							INNER JOIN [CES].AREA a
							ON a.AREA_SR_KEY = ast.AREA_SR_KEY
							INNER JOIN [CES].ENGINE_LINE_REF elr
							ON elr.ELR_SR_KEY = ast.ENG_LINE_REF
							INNER JOIN [CES].ASSET_GROUP asg
							ON asg.ASSET_GROUP_SR_KEY = ast.ASSET_GROUP_SR_KEY
							INNER JOIN [CES].ASSET_TYPE asp
							ON asp.ASSET_TYPE_SR_KEY = ast.ASSET_TYPE_SR_KEY
							INNER JOIN [CES].EXAM ex
							ON ex.ASSET_GUID = ast.ASSET_GUID
							INNER JOIN [CES].WORK wrk
							ON wrk.WORK_SR_KEY = ex.WORK_SR_KEY
							AND wrk.ISACTIVE = 1
							INNER JOIN [CES].EXAM_TYPE et
							ON et.EXAM_TYPE_SR_KEY = ex.EXAM_TYPE_SR_KEY
							INNER JOIN [CES].SUPPLIER s
							ON s.SUPPLIER_SR_KEY = ex.SUPPLIER_SR_KEY
							OUTER APPLY
								(
									SELECT
										COMP_DATE
									FROM 
									(
										SELECT 
											COMP_DATE,
											ROW_NUMBER() OVER (ORDER BY EFFECTIVE_FROM_DT DESC) rnk
										FROM CES.COMPLIANCE c
										WHERE ASSET_GUID = ex.ASSET_GUID
										AND EXAM_TYPE_SR_KEY = ex.EXAM_TYPE_SR_KEY
										AND @current_date BETWEEN EFFECTIVE_FROM_DT AND ISNULL(EFFECTIVE_TO_DT,CONVERT(DATE,'31/12/9999',103))
									)c
									WHERE rnk = 1
								) cmp
							OUTER APPLY
							(
								SELECT 
										specific_exam_req,
										( (ISNULL(INTERVAL_YEARS,0)*12) + (ISNULL(INTERVAL_MONTHS,0)) + (ISNULL(INTERVAL_DAYS,0)/30) ) AS exam_freq_in_months,
										(CAST(ISNULL(INTERVAL_YEARS,0) AS VARCHAR) + 'y '+CAST(ISNULL(INTERVAL_MONTHS,0) AS VARCHAR)+ 'm '+CAST(ISNULL(INTERVAL_DAYS,0) AS VARCHAR)+ 'd') AS exam_frequency
								FROM
								(
									SELECT
										INTERVAL_YEARS,
										INTERVAL_MONTHS,
										INTERVAL_DAYS,
										EXAM_REQUIREMENT AS specific_exam_req,
										ROW_NUMBER() OVER (PARTITION BY ASSET_GUID,EXAM_TYPE_SR_KEY ORDER BY EFFECTIVE_FROM_DT DESC) rnk
									FROM CES.EXAM_CYCLE
									WHERE ISACTIVE =1
									AND @current_date BETWEEN EFFECTIVE_FROM_DT AND ISNULL(EFFECTIVE_TO_DT,CONVERT(DATE,'31/12/9999',103))
									AND ASSET_GUID = ex.ASSET_GUID
									AND EXAM_TYPE_SR_KEY = ex.EXAM_TYPE_SR_KEY
								)t
								WHERE rnk = 1
							)ef
							
							WHERE
								ast.ISACTIVE= 1
							AND o.ISACTIVE = 1
							AND a.ISACTIVE = 1
							AND elr.ISACTIVE = 1
							AND asg.ISACTIVE = 1
							AND asp.ISACTIVE = 1
							AND ex.ISACTIVE = 1
							AND et.ISACTIVE = 1
							AND s.ISACTIVE = 1
							AND o.REGION = @region_name
							AND ( @route_id =0 OR (@route_id <> 0 AND o.ORG_SR_KEY = @route_id))
							AND	( @area_id =0 OR (@area_id <> 0 AND a.AREA_SR_KEY = @area_id))
							AND ( @supplier_id = 0 OR (@supplier_id <> 0 AND ex.SUPPLIER_SR_KEY = @supplier_id) )
					)final
					LEFT JOIN [CES].EXAM ltst_exm
					ON ltst_exm.ASSET_GUID = final.asset_guid
					AND ltst_exm.EXAM_TYPE_SR_KEY = final.EXAM_TYPE_SR_KEY
					AND ltst_exm.IS_LAST_EXAM = 'Y'		
					AND ltst_exm.ISACTIVE = 1
					INNER JOIN [CES].COMPLIANCE_TOLERANCE ct
					ON ct.EXAM_TYPE_SR_KEY = final.EXAM_TYPE_SR_KEY
					AND ct.ISACTIVE = 1
					AND final.exam_freq_in_months BETWEEN ct.FREQ_INTERVAL_MONTHS_FROM AND ct.FREQ_INTERVAL_MONTHS_TO
					LEFT JOIN CES.ACCESS acs
					ON acs.ASSET_GUID = final.asset_guid
					AND acs.EXAM_TYPE_SR_KEY = final.EXAM_TYPE_SR_KEY
			END
		END
		ELSE  ---Search Screen for Supplier Roles
		BEGIN
					
			IF @isbasicsearch = 'N'		-- Advanced Search
			BEGIN

		
					INSERT INTO #tbl_SearchResult
					(
							asset_guid,
							region,
							route,
							area,
							elr,
							start_mileage,
							end_mileage,
							railway_id,
							asset_desc,
							asset_grp,
							asset_type,
							hce_flg,
							exam_id,
							exam_frequency,
							exam_req_stat,
							exam_rpt_stat,
							exam_type,
							compliance_dt,
							supplier,
							due_dt,
							onsite_pre_compl_tol_dt,
							onsite_post_compl_tol_dt,
							baseline_plan_dt,
							plan_dt,
							exam_dt,
							submission_dt,
							signed_off_dt,
							cr_id,
							specific_exam_req,
							tenanted_arch,
							task_list_stat,
							nr_internal_note,
							comments_to_sec,
							other_supplier_comment,
							posession_critical,
							task_list_id,
							exam_sr_key,
							due_dt_earliest,
							due_dt_latest,
							max_tolerance_dt
					)
					
																
					SELECT 
						final.asset_guid,
						final.region,
						final.route,
						final.area,
						final.elr,
						final.start_mileage,
						final.end_mileage,
						final.railway_id,
						final.asset_desc,
						final.asset_grp,
						final.asset_type,
						final.hce_flg,
						final.exam_id,
						final.exam_frequency,
						final.exam_req_stat,
						final.exam_rpt_stat,
						final.exam_type,
						final.compliance_dt,
						final.supplier,
						final.due_dt,
						NULL AS onsite_pre_compl_tol_dt,
						NULL AS onsite_post_compl_tol_dt,
						final.baseline_plan_dt,
						final.plan_dt,
						final.exam_dt,
						final.submission_dt,
						final.signed_off_dt,
						final.cr_id,
						final.specific_exam_req,
						final.tenanted_arch,
						final.task_list_stat,
						final.nr_internal_note,
						final.comment_to_sec,
						final.other_supplier_comment,
						NULL AS posession_critical,
						final.task_list_id,
						final.exam_sr_key,
						CASE WHEN exam_type IN ('Visual','Detailed','Enhanced') 
							THEN CONVERT(DATE, DATEADD( week, (0- ct.SITE_TOLERANCE_WEEKS), final.due_dt),103) 
							WHEN exam_type IN ('Underwater', 'Line Of Route' ) OR exam_type LIKE '%Additional%'
							THEN WORK_YR_START_DT 
							ELSE NULL
						END AS due_dt_earliest,
						CASE WHEN exam_type IN ('Visual','Detailed','Enhanced') 
							THEN CONVERT(DATE, DATEADD( week, ct.SITE_TOLERANCE_WEEKS, final.due_dt),103) 
							WHEN exam_type IN ('Underwater', 'Line Of Route' ) OR exam_type LIKE '%Additional%'
							THEN WORK_YR_END_DT 
							ELSE NULL
						END AS due_dt_latest,
						CONVERT(DATE, DATEADD( week, ISNULL(ct.REVIEW_TOLERANCE_WEEKS,0), final.due_dt),103) AS max_tolerance_dt
					FROM
					(
							SELECT 
								ast.ASSET_GUID AS asset_guid,
								o.REGION AS region,
								o.ROUTE AS route,
								a.AREA_NAME AS area,
								elr.ELR_CODE AS elr,
								(ast.START_MILES + ast.START_YARDS/1760) AS start_mileage,
								(ast.END_MILES + ast.END_YARDS/1760) AS end_mileage,
								ast.RAILWAY_ID AS railway_id,
								ast.ASSET_NAME AS asset_desc,
								asg.ASSET_GROUP_DESC AS asset_grp,
								asp.ASSET_TYPE_DESC AS asset_type,
								CASE WHEN ast.hce_flag = 'Y' THEN 'Yes' ELSE 'No' END AS hce_flg,
								ex.exam_id,
								ef.exam_frequency,
								ex.EXAM_REQ_STATUS AS exam_req_stat,
								ex.EXAM_REPORT_STATUS AS exam_rpt_stat,
								et.EXAM_TYPE AS exam_type,
								NULL AS compliance_dt,
								s.SUPPLIER_NAME AS supplier,
								wrk.EXAM_DUE_DATE AS due_dt,
								--NULL AS onsite_pre_compl_tol_dt,
								--NULL AS onsite_post_compl_tol_dt,
								ex.EXAM_BASELINE_DATE AS baseline_plan_dt,
								ex.EXAM_PLANNED_DATE AS plan_dt,
								ex.EXAM_ACTUAL_DATE AS exam_dt,
								ex.EXAM_SUBMISSION_DATE AS submission_dt,
								ex.EXAM_SIGNOFF_DATE AS signed_off_dt,
								ex.CHANGE_REQ_ID AS cr_id,
								ef.specific_exam_req,
								CASE WHEN ast.TENANTED_FLG = 'Y' THEN 'Yes'
									 WHEN ast.TENANTED_FLG = 'N' THEN 'No'
									 ELSE 'N/A'
								END AS tenanted_arch,
								wrk.WORK_STATUS AS task_list_stat,
								ex.INTERNAL_NOTES AS nr_internal_note,
								ex.comment_to_sec,
								ex.SUPPLIER_COMMENTS AS other_supplier_comment,
								--NULL AS posession_critical,
								wrk.WORK_SR_KEY AS task_list_id,
								ex.EXAM_SR_KEY,
								ex.EXAM_TYPE_SR_KEY,
								ISNULL(ef.exam_freq_in_months,0) AS exam_freq_in_months,
								wrk.WORK_YR_START_DT,
								wrk.WORK_YR_END_DT
								
							FROM [CES].ASSET ast
							INNER JOIN [CES].ORG o
							ON ast.ORG_SR_KEY = o.ORG_SR_KEY
							INNER JOIN [CES].AREA a
							ON a.AREA_SR_KEY = ast.AREA_SR_KEY
							INNER JOIN [CES].ENGINE_LINE_REF elr
							ON elr.ELR_SR_KEY = ast.ENG_LINE_REF
							AND elr.ORG_SR_KEY = ast.ORG_SR_KEY
							AND elr.AREA_SR_KEY = ast.AREA_SR_KEY
							INNER JOIN [CES].ASSET_GROUP asg
							ON asg.ASSET_GROUP_SR_KEY = ast.ASSET_GROUP_SR_KEY
							INNER JOIN [CES].ASSET_TYPE asp
							ON asp.ASSET_TYPE_SR_KEY = ast.ASSET_TYPE_SR_KEY
							INNER JOIN [CES].EXAM ex
							ON ex.ASSET_GUID = ast.ASSET_GUID
							INNER JOIN [CES].WORK wrk
							ON wrk.WORK_SR_KEY = ex.WORK_SR_KEY
							AND wrk.ISACTIVE = 1
							INNER JOIN [CES].EXAM_TYPE et
							ON et.EXAM_TYPE_SR_KEY = ex.EXAM_TYPE_SR_KEY
							INNER JOIN [CES].SUPPLIER s
							ON s.SUPPLIER_SR_KEY = ex.SUPPLIER_SR_KEY
							--OUTER APPLY
							--	(
							--		SELECT
							--			COMP_DATE
							--		FROM 
							--		(
							--			SELECT 
							--				COMP_DATE,
							--				ROW_NUMBER() OVER (ORDER BY EFFECTIVE_FROM_DT DESC) rnk
							--			FROM CES.COMPLIANCE c
							--			WHERE ASSET_GUID = ex.ASSET_GUID
							--			AND EXAM_TYPE_SR_KEY = ex.EXAM_TYPE_SR_KEY
							--			AND @current_date BETWEEN EFFECTIVE_FROM_DT AND ISNULL(EFFECTIVE_TO_DT,CONVERT(DATE,'31/12/9999',103))
							--		)c
							--		WHERE rnk = 1
							--	) cmp
							OUTER APPLY
							(
								SELECT 
										specific_exam_req,
										( (ISNULL(INTERVAL_YEARS,0)*12) + (ISNULL(INTERVAL_MONTHS,0)) + (ISNULL(INTERVAL_DAYS,0)/30) ) AS exam_freq_in_months,
										(CAST(ISNULL(INTERVAL_YEARS,0) AS VARCHAR) + 'y '+CAST(ISNULL(INTERVAL_MONTHS,0) AS VARCHAR)+ 'm '+CAST(ISNULL(INTERVAL_DAYS,0) AS VARCHAR)+ 'd') AS exam_frequency
								FROM
								(
									SELECT
										INTERVAL_YEARS,
										INTERVAL_MONTHS,
										INTERVAL_DAYS,
										EXAM_REQUIREMENT AS specific_exam_req,
										ROW_NUMBER() OVER (PARTITION BY ASSET_GUID,EXAM_TYPE_SR_KEY ORDER BY EFFECTIVE_FROM_DT DESC) rnk
									FROM CES.EXAM_CYCLE
									WHERE ISACTIVE =1
									AND @current_date BETWEEN EFFECTIVE_FROM_DT AND ISNULL(EFFECTIVE_TO_DT,CONVERT(DATE,'31/12/9999',103))
									AND ASSET_GUID = ex.ASSET_GUID
									AND EXAM_TYPE_SR_KEY = ex.EXAM_TYPE_SR_KEY
								)t
								WHERE rnk = 1
							)ef
							
							WHERE
								ast.ISACTIVE= 1
							AND o.ISACTIVE = 1
							AND a.ISACTIVE = 1
							AND elr.ISACTIVE = 1
							AND asg.ISACTIVE = 1
							AND asp.ISACTIVE = 1
							AND ex.ISACTIVE = 1
							AND et.ISACTIVE = 1
							AND s.ISACTIVE = 1
							AND o.REGION = @region_name
							AND ( @route_id =0 OR (@route_id <> 0 AND o.ORG_SR_KEY = @route_id))
							AND	( @area_id =0 OR (@area_id <> 0 AND a.AREA_SR_KEY = @area_id))
							AND ex.SUPPLIER_SR_KEY = @supplier_id
							AND ( @iselrselected = 'N' OR (@iselrselected = 'Y' AND ast.ENG_LINE_REF IN (SELECT elr_id FROM @elr_id_array)) )
							AND ( (ast.START_MILES + ast.START_YARDS/1760) BETWEEN @start_mileage_from AND @start_mileage_to)
							AND ( @railway_id IS NULL OR (@railway_id IS NOT NULL AND ast.RAILWAY_ID = @railway_id))
							AND ( @ast_grp_id =0 OR (@ast_grp_id <> 0 AND asg.ASSET_GROUP_SR_KEY = @ast_grp_id))
							AND ( @isasttypselected = 'N' OR (@isasttypselected = 'Y' AND asp.ASSET_TYPE_SR_KEY IN (SELECT ast_typ_id FROM @ast_typ)) )
							AND ( @exam_id = 0 OR (@exam_id <>0 AND ex.EXAM_ID = @exam_id) )
							AND	( @exam_type_id = 0 OR (@exam_type_id <>0 AND et.EXAM_TYPE_SR_KEY = @exam_type_id))
							AND ( @exam_status_id = 0 OR (@exam_status_id<>0 AND ex.EXAM_REQ_STATUS = @exam_status_id) )
							AND ( @tasklist_yr_id = 0 OR (@tasklist_yr_id<>0 AND wrk.WORK_YEAR_KEY = @tasklist_yr_id) )
							AND ( CONVERT (DATE,wrk.EXAM_DUE_DATE,103) BETWEEN @due_date_from AND @due_date_to)
							
					)final
					--LEFT JOIN [CES].EXAM ltst_exm
					--ON ltst_exm.ASSET_GUID = final.asset_guid
					--AND ltst_exm.EXAM_TYPE_SR_KEY = final.EXAM_TYPE_SR_KEY
					--AND ltst_exm.IS_LAST_EXAM = 'Y'		
					--AND ltst_exm.ISACTIVE = 1
					LEFT JOIN [CES].COMPLIANCE_TOLERANCE ct
					ON ct.EXAM_TYPE_SR_KEY = final.EXAM_TYPE_SR_KEY
					AND ct.ISACTIVE = 1
					AND final.exam_freq_in_months BETWEEN ct.FREQ_INTERVAL_MONTHS_FROM AND ct.FREQ_INTERVAL_MONTHS_TO
					--LEFT JOIN CES.ACCESS acs
					--ON acs.ASSET_GUID = final.asset_guid
					--AND acs.EXAM_TYPE_SR_KEY = final.EXAM_TYPE_SR_KEY


			END

			ELSE	--Basic search
			BEGIN
		
					
					INSERT INTO #tbl_SearchResult
					(
							asset_guid,
							region,
							route,
							area,
							elr,
							start_mileage,
							end_mileage,
							railway_id,
							asset_desc,
							asset_grp,
							asset_type,
							hce_flg,
							exam_id,
							exam_frequency,
							exam_req_stat,
							exam_rpt_stat,
							exam_type,
							compliance_dt,
							supplier,
							due_dt,
							onsite_pre_compl_tol_dt,
							onsite_post_compl_tol_dt,
							baseline_plan_dt,
							plan_dt,
							exam_dt,
							submission_dt,
							signed_off_dt,
							cr_id,
							specific_exam_req,
							tenanted_arch,
							task_list_stat,
							nr_internal_note,
							comments_to_sec,
							other_supplier_comment,
							posession_critical,
							task_list_id,
							exam_sr_key,
							due_dt_earliest,
							due_dt_latest,
							max_tolerance_dt
					)
					
																
					SELECT 
						final.asset_guid,
						final.region,
						final.route,
						final.area,
						final.elr,
						final.start_mileage,
						final.end_mileage,
						final.railway_id,
						final.asset_desc,
						final.asset_grp,
						final.asset_type,
						final.hce_flg,
						final.exam_id,
						final.exam_frequency,
						final.exam_req_stat,
						final.exam_rpt_stat,
						final.exam_type,
						final.compliance_dt,
						final.supplier,
						final.due_dt,
						NULL AS onsite_pre_compl_tol_dt,
						NULL AS onsite_post_compl_tol_dt,
						final.baseline_plan_dt,
						final.plan_dt,
						final.exam_dt,
						final.submission_dt,
						final.signed_off_dt,
						final.cr_id,
						final.specific_exam_req,
						final.tenanted_arch,
						final.task_list_stat,
						final.nr_internal_note,
						final.comment_to_sec,
						final.other_supplier_comment,
						NULL AS posession_critical,
						final.task_list_id,
						final.exam_sr_key,
						CASE WHEN exam_type IN ('Visual','Detailed','Enhanced') 
							THEN CONVERT(DATE, DATEADD( week, (0- ct.SITE_TOLERANCE_WEEKS), final.due_dt),103) 
							WHEN exam_type IN ('Underwater', 'Line Of Route' ) OR exam_type LIKE '%Additional%'
							THEN WORK_YR_START_DT 
							ELSE NULL
						END AS due_dt_earliest,
						CASE WHEN exam_type IN ('Visual','Detailed','Enhanced') 
							THEN CONVERT(DATE, DATEADD( week, ct.SITE_TOLERANCE_WEEKS, final.due_dt),103) 
							WHEN exam_type IN ('Underwater', 'Line Of Route' ) OR exam_type LIKE '%Additional%'
							THEN WORK_YR_END_DT 
							ELSE NULL
						END AS due_dt_latest,
						CONVERT(DATE, DATEADD( week, ISNULL(ct.REVIEW_TOLERANCE_WEEKS,0), final.due_dt),103) AS max_tolerance_dt
					FROM
					(
							SELECT 
								ast.ASSET_GUID AS asset_guid,
								o.REGION AS region,
								o.ROUTE AS route,
								a.AREA_NAME AS area,
								elr.ELR_CODE AS elr,
								(ast.START_MILES + ast.START_YARDS/1760) AS start_mileage,
								(ast.END_MILES + ast.END_YARDS/1760) AS end_mileage,
								ast.RAILWAY_ID AS railway_id,
								ast.ASSET_NAME AS asset_desc,
								asg.ASSET_GROUP_DESC AS asset_grp,
								asp.ASSET_TYPE_DESC AS asset_type,
								CASE WHEN ast.hce_flag = 'Y' THEN 'Yes' ELSE 'No' END AS hce_flg,
								ex.exam_id,
								ef.exam_frequency,
								ex.EXAM_REQ_STATUS AS exam_req_stat,
								ex.EXAM_REPORT_STATUS AS exam_rpt_stat,
								et.EXAM_TYPE AS exam_type,
								NULL AS compliance_dt,
								s.SUPPLIER_NAME AS supplier,
								wrk.EXAM_DUE_DATE AS due_dt,
								--NULL AS onsite_pre_compl_tol_dt,
								--NULL AS onsite_post_compl_tol_dt,
								ex.EXAM_BASELINE_DATE AS baseline_plan_dt,
								ex.EXAM_PLANNED_DATE AS plan_dt,
								ex.EXAM_ACTUAL_DATE AS exam_dt,
								ex.EXAM_SUBMISSION_DATE AS submission_dt,
								ex.EXAM_SIGNOFF_DATE AS signed_off_dt,
								ex.CHANGE_REQ_ID AS cr_id,
								ef.specific_exam_req,
								CASE WHEN ast.TENANTED_FLG = 'Y' THEN 'Yes'
									 WHEN ast.TENANTED_FLG = 'N' THEN 'No'
									 ELSE 'N/A'
								END AS tenanted_arch,
								wrk.WORK_STATUS AS task_list_stat,
								ex.INTERNAL_NOTES AS nr_internal_note,
								ex.comment_to_sec,
								ex.SUPPLIER_COMMENTS AS other_supplier_comment,
								--NULL AS posession_critical,
								wrk.WORK_SR_KEY AS task_list_id,
								ex.EXAM_SR_KEY,
								ex.EXAM_TYPE_SR_KEY,
								ISNULL(ef.exam_freq_in_months,0) AS exam_freq_in_months,
								wrk.WORK_YR_START_DT,
								wrk.WORK_YR_END_DT
								
							FROM [CES].ASSET ast
							INNER JOIN [CES].ORG o
							ON ast.ORG_SR_KEY = o.ORG_SR_KEY
							INNER JOIN [CES].AREA a
							ON a.AREA_SR_KEY = ast.AREA_SR_KEY
							INNER JOIN [CES].ENGINE_LINE_REF elr
							ON elr.ELR_SR_KEY = ast.ENG_LINE_REF
							AND elr.ORG_SR_KEY = ast.ORG_SR_KEY
							AND elr.AREA_SR_KEY = ast.AREA_SR_KEY
							INNER JOIN [CES].ASSET_GROUP asg
							ON asg.ASSET_GROUP_SR_KEY = ast.ASSET_GROUP_SR_KEY
							INNER JOIN [CES].ASSET_TYPE asp
							ON asp.ASSET_TYPE_SR_KEY = ast.ASSET_TYPE_SR_KEY
							INNER JOIN [CES].EXAM ex
							ON ex.ASSET_GUID = ast.ASSET_GUID
							INNER JOIN [CES].WORK wrk
							ON wrk.WORK_SR_KEY = ex.WORK_SR_KEY
							AND wrk.ISACTIVE = 1
							INNER JOIN [CES].EXAM_TYPE et
							ON et.EXAM_TYPE_SR_KEY = ex.EXAM_TYPE_SR_KEY
							INNER JOIN [CES].SUPPLIER s
							ON s.SUPPLIER_SR_KEY = ex.SUPPLIER_SR_KEY
							--OUTER APPLY
							--	(
							--		SELECT
							--			COMP_DATE
							--		FROM 
							--		(
							--			SELECT 
							--				COMP_DATE,
							--				ROW_NUMBER() OVER (ORDER BY EFFECTIVE_FROM_DT DESC) rnk
							--			FROM CES.COMPLIANCE c
							--			WHERE ASSET_GUID = ex.ASSET_GUID
							--			AND EXAM_TYPE_SR_KEY = ex.EXAM_TYPE_SR_KEY
							--			AND @current_date BETWEEN EFFECTIVE_FROM_DT AND ISNULL(EFFECTIVE_TO_DT,CONVERT(DATE,'31/12/9999',103))
							--		)c
							--		WHERE rnk = 1
							--	) cmp
							OUTER APPLY
							(
								SELECT 
										specific_exam_req,
										( (ISNULL(INTERVAL_YEARS,0)*12) + (ISNULL(INTERVAL_MONTHS,0)) + (ISNULL(INTERVAL_DAYS,0)/30) ) AS exam_freq_in_months,
										(CAST(ISNULL(INTERVAL_YEARS,0) AS VARCHAR) + 'y '+CAST(ISNULL(INTERVAL_MONTHS,0) AS VARCHAR)+ 'm '+CAST(ISNULL(INTERVAL_DAYS,0) AS VARCHAR)+ 'd') AS exam_frequency
								FROM
								(
									SELECT
										INTERVAL_YEARS,
										INTERVAL_MONTHS,
										INTERVAL_DAYS,
										EXAM_REQUIREMENT AS specific_exam_req,
										ROW_NUMBER() OVER (PARTITION BY ASSET_GUID,EXAM_TYPE_SR_KEY ORDER BY EFFECTIVE_FROM_DT DESC) rnk
									FROM CES.EXAM_CYCLE
									WHERE ISACTIVE =1
									AND @current_date BETWEEN EFFECTIVE_FROM_DT AND ISNULL(EFFECTIVE_TO_DT,CONVERT(DATE,'31/12/9999',103))
									AND ASSET_GUID = ex.ASSET_GUID
									AND EXAM_TYPE_SR_KEY = ex.EXAM_TYPE_SR_KEY
								)t
								WHERE rnk = 1
							)ef
							
							WHERE
								ast.ISACTIVE= 1
							AND o.ISACTIVE = 1
							AND a.ISACTIVE = 1
							AND elr.ISACTIVE = 1
							AND asg.ISACTIVE = 1
							AND asp.ISACTIVE = 1
							AND ex.ISACTIVE = 1
							AND et.ISACTIVE = 1
							AND s.ISACTIVE = 1
							AND o.REGION = @region_name
							AND ( @route_id =0 OR (@route_id <> 0 AND o.ORG_SR_KEY = @route_id))
							AND	( @area_id =0 OR (@area_id <> 0 AND a.AREA_SR_KEY = @area_id))
							AND ex.SUPPLIER_SR_KEY = @supplier_id
														
					)final
					--LEFT JOIN [CES].EXAM ltst_exm
					--ON ltst_exm.ASSET_GUID = final.asset_guid
					--AND ltst_exm.EXAM_TYPE_SR_KEY = final.EXAM_TYPE_SR_KEY
					--AND ltst_exm.IS_LAST_EXAM = 'Y'		
					--AND ltst_exm.ISACTIVE = 1
					LEFT JOIN [CES].COMPLIANCE_TOLERANCE ct
					ON ct.EXAM_TYPE_SR_KEY = final.EXAM_TYPE_SR_KEY
					AND ct.ISACTIVE = 1
					AND final.exam_freq_in_months BETWEEN ct.FREQ_INTERVAL_MONTHS_FROM AND ct.FREQ_INTERVAL_MONTHS_TO
					--LEFT JOIN CES.ACCESS acs
					--ON acs.ASSET_GUID = final.asset_guid
					--AND acs.EXAM_TYPE_SR_KEY = final.EXAM_TYPE_SR_KEY
			END	
		END

		--Total count of records
		SELECT @totalresultcnt = COUNT(1) FROM #tbl_SearchResult

		--If no records are returned in search result
		IF  @totalresultcnt=0 
		BEGIN
			SET @result=
					(
						SELECT 
							JSON_QUERY(
										(
											select
												@pageno AS currentpage,
												@totalresultcnt AS totalcount,
												0 AS totalpages
											FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
										)
							) searchdatacount,
							--NULL AS task_list_stat,
							--NULL AS task_list_id,
							JSON_QUERY('[]') tasklistkeys ,
							JSON_QUERY('[]') searchresult
						
						FOR JSON PATH,WITHOUT_ARRAY_WRAPPER, INCLUDE_NULL_VALUES
				)
		END	
		--If alt least 1 record is returned in search result
		ELSE
		BEGIN
			IF @isexporttodoc = 'Y' --Export to Excel
			BEGIN
					IF @sortorder = 'asc' 
					BEGIN
			
						SET @result=
						(
							SELECT 
								JSON_QUERY(
											(
												select
													@pageno AS currentpage,
													@totalresultcnt AS totalcount,
													CEILING(@totalresultcnt/@rowsperpage) AS totalpages
												FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
											)
								) searchdatacount,
								--@task_list_status AS task_list_stat,
								--@task_list_id AS task_list_id,
							JSON_QUERY('[]') tasklistkeys ,
							(
								SELECT
									asset_guid,
									region,
									route,
									area,
									elr,
									start_mileage,
									end_mileage,
									railway_id,
									asset_desc,
									asset_grp,
									asset_type,
									hce_flg,
									exam_id,
									exam_frequency,
									exam_req_stat,
									exam_rpt_stat,
									exam_type,
									compliance_dt,
									supplier,
									due_dt,
									onsite_pre_compl_tol_dt,
									onsite_post_compl_tol_dt,
									baseline_plan_dt,
									plan_dt,
									exam_dt,
									submission_dt,
									signed_off_dt,
									cr_id,
									specific_exam_req,
									tenanted_arch,
									task_list_stat,
									nr_internal_note,
									comments_to_sec,
									other_supplier_comment,
									posession_critical,
									job_number,
									bcmi_required,
									due_dt_earliest,
									due_dt_latest,
									max_tolerance_dt,
									task_list_id
								FROM
								(
									SELECT
											asset_guid,
											region,
											route,
											area,
											elr,
											start_mileage,
											end_mileage,
											railway_id,
											asset_desc,
											asset_grp,
											asset_type,
											hce_flg,
											exam_id,
											exam_frequency,
											ers.REF_VALUE AS exam_req_stat,
											eps.REF_VALUE AS exam_rpt_stat,
											exam_type,
											compliance_dt,
											supplier,
											due_dt,
											onsite_pre_compl_tol_dt,
											onsite_post_compl_tol_dt,
											baseline_plan_dt,
											plan_dt,
											exam_dt,
											submission_dt,
											signed_off_dt,
											cr_id,
											specific_exam_req,
											tenanted_arch,
											ts.REF_VALUE AS task_list_stat,
											nr_internal_note,
											comments_to_sec,
											other_supplier_comment,
											posession_critical,
											NULL AS job_number,
											NULL AS bcmi_required,
											due_dt_earliest,
											due_dt_latest,
											max_tolerance_dt,
											task_list_id,
											ROW_NUMBER() OVER (ORDER BY 
																		CASE WHEN @sortcolumn = 'AssetGUID' THEN asset_guid ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'Region' THEN region ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'Route' THEN route ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'Area' THEN area ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'ELR' THEN elr ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'RailwayID' THEN railway_id ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'AssetDesc' THEN asset_desc ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'AssetGroup' THEN asset_grp ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'AssetType' THEN asset_type ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'HCEFlg' THEN hce_flg ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'ExamID' THEN exam_id ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'ExamFrequency' THEN exam_frequency ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'ExamReqStat' THEN ers.REF_VALUE ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'ExamRptStat' THEN eps.REF_VALUE ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'ExamType' THEN exam_type ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'ComplianceDt' THEN compliance_dt ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'Supplier' THEN supplier ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'DueDate' THEN due_dt ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'PrecomTolrncDt' THEN onsite_pre_compl_tol_dt ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'PostcomTolrncDt' THEN onsite_post_compl_tol_dt ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'BaselinePlnDt' THEN baseline_plan_dt ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'PlannedDt' THEN plan_dt ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'ExamDt' THEN exam_dt ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'SubmissionDt' THEN submission_dt ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'SignOffDt' THEN signed_off_dt ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'CRID' THEN cr_id ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'SpecExamReq' THEN specific_exam_req ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'TenantedArch' THEN tenanted_arch ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'TaskListStat' THEN ts.REF_VALUE ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'NRInternalNotes' THEN nr_internal_note ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'CommentsToSEC' THEN comments_to_sec ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'OtherSupplierComment' THEN other_supplier_comment ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'PossessionCritical' THEN posession_critical ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'StartMileage' THEN start_mileage ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'EndMileage' THEN end_mileage ELSE NULL END ASC
																	
																	) AS ordrnk

									FROM #tbl_SearchResult t
									LEFT JOIN [CES].REFERENCE_VALUE ers
									ON t.exam_req_stat = ers.REF_VAL_SR_KEY
									LEFT JOIN [CES].REFERENCE_VALUE eps
									ON t.exam_rpt_stat = eps.REF_VAL_SR_KEY
									LEFT JOIN [CES].REFERENCE_VALUE ts
									ON t.task_list_stat = ts.REF_VAL_SR_KEY
								)sr
								ORDER BY ordrnk
								FOR JSON AUTO, INCLUDE_NULL_VALUES
							)searchresult
							FOR JSON PATH,WITHOUT_ARRAY_WRAPPER, INCLUDE_NULL_VALUES
						)
					END
					ELSE IF @sortorder = 'desc' 
					BEGIN
					
						SET @result=
						(
							SELECT 
								JSON_QUERY(
											(
												select
													@pageno AS currentpage,
													@totalresultcnt AS totalcount,
													CEILING(@totalresultcnt/@rowsperpage) AS totalpages
												FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
											)
								) searchdatacount,
							--@task_list_status AS task_list_stat,
							--@task_list_id AS task_list_id,
							JSON_QUERY('[]') tasklistkeys ,
							(
								SELECT
									asset_guid,
									region,
									route,
									area,
									elr,
									start_mileage,
									end_mileage,
									railway_id,
									asset_desc,
									asset_grp,
									asset_type,
									hce_flg,
									exam_id,
									exam_frequency,
									exam_req_stat,
									exam_rpt_stat,
									exam_type,
									compliance_dt,
									supplier,
									due_dt,
									onsite_pre_compl_tol_dt,
									onsite_post_compl_tol_dt,
									baseline_plan_dt,
									plan_dt,
									exam_dt,
									submission_dt,
									signed_off_dt,
									cr_id,
									specific_exam_req,
									tenanted_arch,
									task_list_stat,
									nr_internal_note,
									comments_to_sec,
									other_supplier_comment,
									posession_critical,
									job_number,
									bcmi_required,
									due_dt_earliest,
									due_dt_latest,
									max_tolerance_dt,
									task_list_id
								FROM
								(
									SELECT
											asset_guid,
											region,
											route,
											area,
											elr,
											start_mileage,
											end_mileage,
											railway_id,
											asset_desc,
											asset_grp,
											asset_type,
											hce_flg,
											exam_id,
											exam_frequency,
											ers.REF_VALUE AS exam_req_stat,
											eps.REF_VALUE AS exam_rpt_stat,
											exam_type,
											compliance_dt,
											supplier,
											due_dt,
											onsite_pre_compl_tol_dt,
											onsite_post_compl_tol_dt,
											baseline_plan_dt,
											plan_dt,
											exam_dt,
											submission_dt,
											signed_off_dt,
											cr_id,
											specific_exam_req,
											tenanted_arch,
											ts.REF_VALUE AS task_list_stat,
											nr_internal_note,
											comments_to_sec,
											other_supplier_comment,
											posession_critical,
											NULL AS job_number,
											NULL AS bcmi_required,
											due_dt_earliest,
											due_dt_latest,
											max_tolerance_dt,
											task_list_id,
											ROW_NUMBER() OVER (ORDER BY 
																		CASE WHEN @sortcolumn = 'AssetGUID' THEN asset_guid ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'Region' THEN region ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'Route' THEN route ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'Area' THEN area ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'ELR' THEN elr ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'RailwayID' THEN railway_id ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'AssetDesc' THEN asset_desc ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'AssetGroup' THEN asset_grp ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'AssetType' THEN asset_type ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'HCEFlg' THEN hce_flg ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'ExamID' THEN exam_id ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'ExamFrequency' THEN exam_frequency ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'ExamReqStat' THEN ers.REF_VALUE ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'ExamRptStat' THEN eps.REF_VALUE ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'ExamType' THEN exam_type ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'ComplianceDt' THEN compliance_dt ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'Supplier' THEN supplier ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'DueDate' THEN due_dt ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'PrecomTolrncDt' THEN onsite_pre_compl_tol_dt ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'PostcomTolrncDt' THEN onsite_post_compl_tol_dt ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'BaselinePlnDt' THEN baseline_plan_dt ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'PlannedDt' THEN plan_dt ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'ExamDt' THEN exam_dt ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'SubmissionDt' THEN submission_dt ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'SignOffDt' THEN signed_off_dt ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'CRID' THEN cr_id ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'SpecExamReq' THEN specific_exam_req ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'TenantedArch' THEN tenanted_arch ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'TaskListStat' THEN ts.REF_VALUE ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'NRInternalNotes' THEN nr_internal_note ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'CommentsToSEC' THEN comments_to_sec ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'OtherSupplierComment' THEN other_supplier_comment ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'PossessionCritical' THEN posession_critical ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'StartMileage' THEN start_mileage ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'EndMileage' THEN end_mileage ELSE NULL END DESC

																	
																	) AS ordrnk

									FROM #tbl_SearchResult t
									LEFT JOIN [CES].REFERENCE_VALUE ers
									ON t.exam_req_stat = ers.REF_VAL_SR_KEY
									LEFT JOIN [CES].REFERENCE_VALUE eps
									ON t.exam_rpt_stat = eps.REF_VAL_SR_KEY
									LEFT JOIN [CES].REFERENCE_VALUE ts
									ON t.task_list_stat = ts.REF_VAL_SR_KEY
								)sr
								ORDER BY ordrnk
								FOR JSON AUTO, INCLUDE_NULL_VALUES
							)searchresult
							FOR JSON PATH,WITHOUT_ARRAY_WRAPPER, INCLUDE_NULL_VALUES
						)
					END
			END
			ELSE IF @isexporttodoc = 'N' --Screen output
			BEGIN
				IF @sortorder = 'asc' 
					BEGIN
			
						SET @result=
						(
							SELECT 
								JSON_QUERY(
											(
												select
													@pageno AS currentpage,
													@totalresultcnt AS totalcount,
													CEILING(@totalresultcnt/@rowsperpage) AS totalpages
												FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
											)
								) searchdatacount,
							--@task_list_status AS task_list_stat,
							--@task_list_id AS task_list_id,
							(
								SELECT
									exam_sr_key,
									task_list_id,
									task_list_stat
								FROM #tbl_SearchResult
								FOR JSON AUTO, INCLUDE_NULL_VALUES
							)tasklistkeys ,
							(
								
								SELECT
									asset_guid,
									region,
									route,
									area,
									elr,
									start_mileage,
									end_mileage,
									railway_id,
									asset_desc,
									asset_grp,
									asset_type,
									hce_flg,
									exam_id,
									exam_frequency,
									exam_req_stat,
									exam_rpt_stat,
									exam_type,
									compliance_dt,
									supplier,
									due_dt,
									onsite_pre_compl_tol_dt,
									onsite_post_compl_tol_dt,
									baseline_plan_dt,
									plan_dt,
									exam_dt,
									submission_dt,
									signed_off_dt,
									cr_id,
									specific_exam_req,
									tenanted_arch,
									task_list_stat,
									nr_internal_note,
									comments_to_sec,
									other_supplier_comment,
									posession_critical,
									NULL AS job_number,
									NULL AS bcmi_required,
									due_dt_earliest,
									due_dt_latest,
									max_tolerance_dt,
									task_list_id
								FROM
								(
									SELECT
											asset_guid,
											region,
											route,
											area,
											elr,
											start_mileage,
											end_mileage,
											railway_id,
											asset_desc,
											asset_grp,
											asset_type,
											hce_flg,
											exam_id,
											exam_frequency,
											ers.REF_VALUE AS exam_req_stat,
											eps.REF_VALUE AS exam_rpt_stat,
											exam_type,
											compliance_dt,
											supplier,
											due_dt,
											onsite_pre_compl_tol_dt,
											onsite_post_compl_tol_dt,
											baseline_plan_dt,
											plan_dt,
											exam_dt,
											submission_dt,
											signed_off_dt,
											cr_id,
											specific_exam_req,
											tenanted_arch,
											ts.REF_VALUE AS task_list_stat,
											nr_internal_note,
											comments_to_sec,
											other_supplier_comment,
											posession_critical,
											task_list_id,
											due_dt_earliest,
											due_dt_latest,
											max_tolerance_dt,
											ROW_NUMBER() OVER (ORDER BY 
																		CASE WHEN @sortcolumn = 'AssetGUID' THEN asset_guid ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'Region' THEN region ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'Route' THEN route ELSE NULL END ASC, 
																		CASE WHEN @sortcolumn = 'Area' THEN area ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'ELR' THEN elr ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'RailwayID' THEN railway_id ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'AssetDesc' THEN asset_desc ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'AssetGroup' THEN asset_grp ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'AssetType' THEN asset_type ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'HCEFlg' THEN hce_flg ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'ExamID' THEN exam_id ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'ExamFrequency' THEN exam_frequency ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'ExamReqStat' THEN ers.REF_VALUE ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'ExamRptStat' THEN eps.REF_VALUE ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'ExamType' THEN exam_type ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'ComplianceDt' THEN compliance_dt ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'Supplier' THEN supplier ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'DueDate' THEN due_dt ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'PrecomTolrncDt' THEN onsite_pre_compl_tol_dt ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'PostcomTolrncDt' THEN onsite_post_compl_tol_dt ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'BaselinePlnDt' THEN baseline_plan_dt ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'PlannedDt' THEN plan_dt ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'ExamDt' THEN exam_dt ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'SubmissionDt' THEN submission_dt ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'SignOffDt' THEN signed_off_dt ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'CRID' THEN cr_id ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'SpecExamReq' THEN specific_exam_req ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'TenantedArch' THEN tenanted_arch ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'TaskListStat' THEN ts.REF_VALUE ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'NRInternalNotes' THEN nr_internal_note ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'CommentsToSEC' THEN comments_to_sec ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'OtherSupplierComment' THEN other_supplier_comment ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'PossessionCritical' THEN posession_critical ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'StartMileage' THEN start_mileage ELSE NULL END ASC,
																		CASE WHEN @sortcolumn = 'EndMileage' THEN end_mileage ELSE NULL END ASC
																	 
																	
																	) AS ordrnk

									FROM #tbl_SearchResult t
									LEFT JOIN [CES].REFERENCE_VALUE ers
									ON t.exam_req_stat = ers.REF_VAL_SR_KEY
									LEFT JOIN [CES].REFERENCE_VALUE eps
									ON t.exam_rpt_stat = eps.REF_VAL_SR_KEY
									LEFT JOIN [CES].REFERENCE_VALUE ts
									ON t.task_list_stat = ts.REF_VAL_SR_KEY
									
								)sr
								WHERE sr.ordrnk BETWEEN ((@pageno - 1) * @rowsperpage +1) AND (@pageno * @rowsperpage)
								
								ORDER BY ordrnk
								FOR JSON AUTO, INCLUDE_NULL_VALUES
							)searchresult
							FOR JSON PATH,WITHOUT_ARRAY_WRAPPER, INCLUDE_NULL_VALUES
						)
					END
				
					ELSE IF @sortorder = 'desc' 
					BEGIN
				
						SET @result=
						(
							SELECT 
								JSON_QUERY(
											(
												select
													@pageno AS currentpage,
													@totalresultcnt AS totalcount,
													CEILING(@totalresultcnt/@rowsperpage) AS totalpages
												FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
											)
								) searchdatacount,
							--@task_list_status AS task_list_stat,
							--@task_list_id AS task_list_id,
							(
								SELECT
									exam_sr_key,
									task_list_id,
									task_list_stat
								FROM #tbl_SearchResult
								FOR JSON AUTO, INCLUDE_NULL_VALUES
							)tasklistkeys ,
							(
								SELECT
									asset_guid,
									region,
									route,
									area,
									elr,
									start_mileage,
									end_mileage,
									railway_id,
									asset_desc,
									asset_grp,
									asset_type,
									hce_flg,
									exam_id,
									exam_frequency,
									exam_req_stat,
									exam_rpt_stat,
									exam_type,
									compliance_dt,
									supplier,
									due_dt,
									onsite_pre_compl_tol_dt,
									onsite_post_compl_tol_dt,
									baseline_plan_dt,
									plan_dt,
									exam_dt,
									submission_dt,
									signed_off_dt,
									cr_id,
									specific_exam_req,
									tenanted_arch,
									task_list_stat,
									nr_internal_note,
									comments_to_sec,
									other_supplier_comment,
									posession_critical,
									NULL AS job_number,
									NULL AS bcmi_required,
									due_dt_earliest,
									due_dt_latest,
									max_tolerance_dt,
									task_list_id
								FROM
								(
									SELECT
											asset_guid,
											region,
											route,
											area,
											elr,
											start_mileage,
											end_mileage,
											railway_id,
											asset_desc,
											asset_grp,
											asset_type,
											hce_flg,
											exam_id,
											exam_frequency,
											ers.REF_VALUE AS exam_req_stat,
											eps.REF_VALUE AS exam_rpt_stat,
											exam_type,
											compliance_dt,
											supplier,
											due_dt,
											onsite_pre_compl_tol_dt,
											onsite_post_compl_tol_dt,
											baseline_plan_dt,
											plan_dt,
											exam_dt,
											submission_dt,
											signed_off_dt,
											cr_id,
											specific_exam_req,
											tenanted_arch,
											ts.REF_VALUE AS task_list_stat,
											nr_internal_note,
											comments_to_sec,
											other_supplier_comment,
											posession_critical,
											task_list_id,
											due_dt_earliest,
											due_dt_latest,
											max_tolerance_dt,
											ROW_NUMBER() OVER (ORDER BY 
																		CASE WHEN @sortcolumn = 'AssetGUID' THEN asset_guid ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'Region' THEN region ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'Route' THEN route ELSE NULL END DESC, 
																		CASE WHEN @sortcolumn = 'Area' THEN area ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'ELR' THEN elr ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'RailwayID' THEN railway_id ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'AssetDesc' THEN asset_desc ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'AssetGroup' THEN asset_grp ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'AssetType' THEN asset_type ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'HCEFlg' THEN hce_flg ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'ExamID' THEN exam_id ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'ExamFrequency' THEN exam_frequency ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'ExamReqStat' THEN ers.REF_VALUE ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'ExamRptStat' THEN eps.REF_VALUE ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'ExamType' THEN exam_type ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'ComplianceDt' THEN compliance_dt ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'Supplier' THEN supplier ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'DueDate' THEN due_dt ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'PrecomTolrncDt' THEN onsite_pre_compl_tol_dt ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'PostcomTolrncDt' THEN onsite_post_compl_tol_dt ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'BaselinePlnDt' THEN baseline_plan_dt ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'PlannedDt' THEN plan_dt ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'ExamDt' THEN exam_dt ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'SubmissionDt' THEN submission_dt ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'SignOffDt' THEN signed_off_dt ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'CRID' THEN cr_id ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'SpecExamReq' THEN specific_exam_req ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'TenantedArch' THEN tenanted_arch ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'TaskListStat' THEN ts.REF_VALUE ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'NRInternalNotes' THEN nr_internal_note ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'CommentsToSEC' THEN comments_to_sec ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'OtherSupplierComment' THEN other_supplier_comment ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'PossessionCritical' THEN posession_critical ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'StartMileage' THEN start_mileage ELSE NULL END DESC,
																		CASE WHEN @sortcolumn = 'EndMileage' THEN end_mileage ELSE NULL END DESC
																	
																	) AS ordrnk

									FROM #tbl_SearchResult t
									LEFT JOIN [CES].REFERENCE_VALUE ers
									ON t.exam_req_stat = ers.REF_VAL_SR_KEY
									LEFT JOIN [CES].REFERENCE_VALUE eps
									ON t.exam_rpt_stat = eps.REF_VAL_SR_KEY
									LEFT JOIN [CES].REFERENCE_VALUE ts
									ON t.task_list_stat = ts.REF_VAL_SR_KEY
								)sr
								WHERE sr.ordrnk BETWEEN ((@pageno - 1) * @rowsperpage +1) AND (@pageno * @rowsperpage)
								
								ORDER BY ordrnk
								FOR JSON AUTO, INCLUDE_NULL_VALUES
							)searchresult
							FOR JSON PATH,WITHOUT_ARRAY_WRAPPER, INCLUDE_NULL_VALUES
						)
					END
		
			END
		END

		--PRINT @result
		SELECT @result


	END TRY
	BEGIN CATCH
		SET @ErrorMsg = ERROR_MESSAGE() + 
						' Line Num:' + CONVERT(VARCHAR(5), ERROR_LINE()) + 
						',ErrorNum:' + CONVERT(VARCHAR(5), ERROR_NUMBER()) + 
						',Severity:' + CONVERT(VARCHAR(5), ERROR_SEVERITY()) + 
						',State:' + CONVERT(VARCHAR(10), ERROR_STATE()) + 
						',Procedure:' + CONVERT(VARCHAR(25), ERROR_PROCEDURE());  

		THROW 50000,@ErrorMsg,1;

		
	END CATCH

	DROP TABLE IF EXISTS #tbl_SearchResult;
	SET NOCOUNT OFF
END
==================================================================================================
/****** Object:  StoredProcedure [CES].[sp_Save_Admin_UserRRA]    Script Date: 3/26/2021 9:57:12 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/***************************************************************************************************************************************            
* Name						: sp_Save_Admin_UserRRA            
* Created By				: Cognizant            
* Date Created				: 10-Mar-2021           
* Description				: This stored procedure provides the option to save new or existing user RRA they are assigned.  
* Input Parameters			: JSON      
* Output Parameters			: @OUT_ErrorNo            
* Return Value				: 1 - Success / 0 - Fail            
* Assumptions				: None    
* Execution Statement		: Exec [CES].sp_Save_Admin_UserRRA '{
																	"user_id": 26,		
																	"supplier_id": 4,
																	"is_new_user": "N",	
																	"current_user_key":  "9725949A-1EB7-497E-B397-A511422AFAFE",
																	"user_default_rra":			
																	[{		"region_name": "Southern",
																			"route_id": 9,
																			"area_id": 2		
																		}],
																	"user_selected_rra": [		
																		{		
																			"region_name": "Eastern",
																			"route_id": 1,
																			"area_id": 12
																		},
																		{																						
																			"region_name": "Southern",
																			"route_id": 9,
																			"area_id": 2	
																		},
																		{																						
																			"region_name": "Southern",
																			"route_id": 11,
																			"area_id": 4	
																		},
																		{																						
																			"region_name": "Southern",
																			"route_id": 9,
																			"area_id": 3	
																		},
																		{																						
																			"region_name": "Southern",
																			"route_id": 10,
																			"area_id": 9	
																		},
																		{		
																			"region_name": "Wales and Western",
																			"route_id": 13,
																			"area_id": 17																	
																		}
																	]	
																}'

*								
* Modified Date     Modified By   Revision Number  Modifications            

*******************************************************************************************************************************************/ 
 
ALTER PROCEDURE [CES].[sp_Save_Admin_UserRRA]
	@Input_JSON		NVARCHAR(MAX)
AS 
BEGIN
	SET NOCOUNT ON
	
	
	BEGIN TRY
		DECLARE
				@ErrorMsg					VARCHAR(250),
				@ErrorDescription		VARCHAR(4000),
				@result						NVARCHAR(MAX),
				@current_user_key			VARCHAR(64),
				@current_date				DATETIME,
				@supplier_id                DECIMAL(18),
				@user_id					DECIMAL(18),
				@is_new_user				VARCHAR(1),
				@user_default_rra			NVARCHAR(MAX),				
				@user_selected_rra			NVARCHAR(MAX),
				@user_previous_rra_count    DECIMAL(18),
				@user_rra_count             DECIMAL(18),
				@current					INT = 0,
				@route_id					DECIMAL(18),
				@area_id					DECIMAL(18),
				@entitlement_id				DECIMAL(18)
				
				DROP TABLE IF EXISTS #tblUserRRA;
				DROP TABLE IF EXISTS #tblUserDefaultRRA;
				DROP TABLE IF EXISTS #tblUserExistingRRA
				
				CREATE TABLE #tblUserRRA
				(
					region_name VARCHAR(64),
					route_id DECIMAL(18),
					area_id DECIMAL(18),
					supplier_id DECIMAL(18),					
					row_id int
				)
				CREATE TABLE #tblUserDefaultRRA
				(
					region_name VARCHAR(64),
					route_id DECIMAL(18),
					area_id DECIMAL(18),
					supplier_id DECIMAL(18),					
					row_id int
				)							

				

				CREATE TABLE #tblUserExistingRRA
				(
					supplier_id_old DECIMAL(18),	
					supplier_id_new DECIMAL(18),
					entitlement_sr_key DECIMAL(18),
					isactive_old BIT,
					isactive_new BIT,
					isdefault_old BIT,
					isdefault_new BIT
				)
				
				

				SELECT 
					@user_id = COALESCE(@user_id,CASE LOWER([key]) WHEN 'user_id' THEN [value] ELSE NULL END),
					@current_user_key = COALESCE(@current_user_key,CASE LOWER([key]) WHEN 'current_user_key' THEN [value] ELSE NULL END),
					@supplier_id = COALESCE(@supplier_id,CASE LOWER([key]) WHEN 'supplier_id' THEN [value] ELSE NULL END),
					@is_new_user = COALESCE(@is_new_user,CASE LOWER([key]) WHEN 'is_new_user' THEN [value] ELSE NULL END),
					@user_default_rra = COALESCE(@user_default_rra,CASE LOWER([key]) WHEN 'user_default_rra' THEN [value] ELSE NULL END),
					@user_selected_rra = COALESCE(@user_selected_rra,CASE LOWER([key]) WHEN 'user_selected_rra' THEN [value] ELSE NULL END)
			
				FROM	OPENJSON(@Input_JSON);

				
		
				IF @user_default_rra IS NOT NULL 
				BEGIN 
					INSERT INTO #tblUserDefaultRRA
					(
						region_name,
						route_id,
						area_id,
						supplier_id,
						row_id 
					)(	
						SELECT region_name,route_id,area_id,@supplier_id  AS supplier_id,ROW_NUMBER() OVER (ORDER BY route_id ASC) AS ROWNUMBER 
						FROM OPENJSON(@user_default_rra)
						 WITH (				
								region_name VARCHAR(64) '$.region_name',
								route_id DECIMAL(18) '$.route_id',
								area_id DECIMAL(18) '$.area_id'				
							  )
					 )
				END
				ELSE 
				BEGIN
					SET @ErrorMsg = 'Default Region, Route, and Area details are missing in input.';
					THROW 50000,@ErrorMsg,1;
				END

				IF @user_selected_rra IS NOT NULL 
				BEGIN 
					INSERT INTO #tblUserRRA
					(
						region_name,
						route_id,
						area_id,
						supplier_id,
						row_id
					)(	
						SELECT region_name,route_id,area_id,@supplier_id  AS supplier_id ,ROW_NUMBER() OVER (ORDER BY route_id ASC) AS ROWNUMBER FROM OPENJSON(@user_selected_rra)
						 WITH (				
								region_name VARCHAR(64) '$.region_name',
								route_id DECIMAL(18) '$.route_id',
								area_id DECIMAL(18) '$.area_id'
							  )
					  )
				 END
				ELSE 
				BEGIN
					SET @ErrorMsg = 'Region, Route, and Area details are missing in input.';
					THROW 50000,@ErrorMsg,1;
				END
				

				IF (@user_id IS NULL)
				BEGIN
					SET @ErrorMsg = 'User Id is blank in input.';
					THROW 50000,@ErrorMsg,1;
				END

				IF (@supplier_id IS NULL)
				BEGIN
					SET @ErrorMsg = 'Supplier Id is blank in input';
					THROW 50000,@ErrorMsg,1;
				END
				ELSE
				BEGIN
					IF NOT EXISTS (SELECT 1 FROM CES.[SUPPLIER] WHERE SUPPLIER_SR_KEY = @supplier_id AND ISACTIVE=1)
					BEGIN
					SET @ErrorMsg = 'The selected Supplier Id is not valid';
					THROW 50000,@ErrorMsg,1;
					END
				END

				IF (@current_user_key IS NULL or LTRIM(RTRIM(@current_user_key)) = '')
				BEGIN
					SET @ErrorMsg = 'Current logged in user key is blank in input';
					THROW 50000,@ErrorMsg,1;
				END

				IF ((SELECT COUNT(1) from #tblUserDefaultRRA) = 0)
				BEGIN
					SET @ErrorMsg = 'Default Region, Route, and Area details are misisng in input';
					THROW 50000,@ErrorMsg,1;
				END
				ELSE IF ((SELECT COUNT(1) from #tblUserDefaultRRA) > 1 )
				BEGIN
					SET @ErrorMsg = 'More than one default Region, Route, and Area details found';
					THROW 50000,@ErrorMsg,1;
				END

				IF ((SELECT COUNT(1) from #tblUserRRA) = 0)
				BEGIN
					SET @ErrorMsg = 'Region, Route, and Area details are misisng in input';
					THROW 50000,@ErrorMsg,1;
				END

				IF ((SELECT COUNT(1) from #tblUserRRA Ur inner join #tblUserDefaultRRA Urd 
				on Ur.region_name=Urd.region_name and Ur.route_id=Urd.route_id and Ur.area_id=Urd.area_id and Ur.supplier_id=Urd.supplier_id) = 0)
				BEGIN
					SET @ErrorMsg = 'Default RRA details are not present in user selected rra details';
					THROW 50000,@ErrorMsg,1;
				END

				SET @current_date = GETDATE()

				
				SET @user_previous_rra_count=(SELECT COUNT(1) FROM CES.ENTITLEMENT WHERE USER_SR_KEY=@user_id and ISACTIVE=1)
				SET @result = ''
				
				  IF UPPER(@is_new_user) = 'Y'  
					  BEGIN				
						IF @user_previous_rra_count=0 
							BEGIN
								--PRINT 'NEW USER SAVE'
								BEGIN TRAN
									
										INSERT INTO CES.ENTITLEMENT(USER_SR_KEY,ORG_SR_KEY,AREA_SR_KEY,
										SUPPLIER_SR_KEY,ISDEFAULT,CREATED_USER,CREATED_DATE,ISACTIVE)
										SELECT
											@user_id, u.route_id, u.area_id, u.supplier_id,
											CASE WHEN u.region_name = d.region_name AND u.route_id = d.route_id AND ISNULL(u.area_id,0) = ISNULL(d.area_id,0) THEN 1
											ELSE 0 END,@current_user_key,@current_date,1
										FROM #tblUserRRA u
										LEFT JOIN #tblUserDefaultRRA d
										ON u.region_name = d.region_name
										AND u.route_id = d.route_id
										AND ISNULL(u.area_id,0) = ISNULL(d.area_id,0) 
															
								SET @result= (
									SELECT 1 AS save_status,NULL AS error_msg
									FOR JSON PATH,WITHOUT_ARRAY_WRAPPER, INCLUDE_NULL_VALUES
								)
								COMMIT TRAN
							END
						ELSE
							BEGIN
								--PRINT 'NEW USER HAVE RECORDS MESSAGE'
								SET @ErrorMsg = 'The selected user RRA already exist in system';
								SET @result= (
									SELECT 0 AS save_status,@ErrorMsg AS error_msg
									FOR JSON PATH,WITHOUT_ARRAY_WRAPPER, INCLUDE_NULL_VALUES
								)
							END
				     END
				  
				  ELSE
					  BEGIN
															
									INSERT INTO #tblUserExistingRRA
									(
										supplier_id_old,
										supplier_id_new,					
										entitlement_sr_key,
										isactive_old,
										isactive_new,
										isdefault_old,
										isdefault_new
									)
									SELECT
										e.supplier_sr_key,
										u.supplier_id,
										e.entitlement_sr_key,
										e.isactive,
										1,
										e.isdefault,
										case when u.region_name = d.region_name AND u.route_id = d.route_id AND ISNULL(u.area_id,0) = ISNULL(d.area_id,0) THEN 1
										ELSE 0 END
									FROM #tblUserRRA u
									LEFT JOIN #tblUserDefaultRRA d
									ON u.region_name = d.region_name AND u.route_id = d.route_id 
									AND ISNULL(u.area_id,0) = ISNULL(d.area_id,0)
									LEFT JOIN CES.ENTITLEMENT e
									ON u.route_id = e.ORG_SR_KEY
									AND ISNULL(u.area_id,0) = ISNULL(e.AREA_SR_KEY,0)									
									WHERE e.USER_SR_KEY = @user_id

									BEGIN TRAN 

									UPDATE e
									SET 
										supplier_sr_key = supplier_id_new,
										isactive = isactive_new,
										isdefault = isdefault_new,
										UPDATED_USER = @current_user_key,
										UPDATED_DATE = @current_date
									FROM CES.ENTITLEMENT e
									INNER JOIN #tblUserExistingRRA t
									ON e.entitlement_sr_key = t.entitlement_sr_key
									WHERE (supplier_id_old <> supplier_id_new)
									OR (isactive_old <> isactive_new)
									OR (isdefault_old <> isdefault_new)

									
									

									IF EXISTS (SELECT 1 FROM #tblUserRRA u
										LEFT JOIN #tblUserDefaultRRA d
										ON u.region_name = d.region_name
										AND u.route_id = d.route_id
										AND ISNULL(u.area_id,0) = ISNULL(d.area_id,0)
										LEFT JOIN CES.ENTITLEMENT e
										ON u.route_id = e.ORG_SR_KEY
										AND ISNULL(u.area_id,0) = ISNULL(e.AREA_SR_KEY,0)
										AND e.USER_SR_KEY = @user_id)
									BEGIN
																														
										INSERT INTO CES.ENTITLEMENT(USER_SR_KEY,ORG_SR_KEY,AREA_SR_KEY,
										SUPPLIER_SR_KEY,ISDEFAULT,CREATED_USER,CREATED_DATE,ISACTIVE)
										SELECT
											@user_id, u.route_id, u.area_id, u.supplier_id,
											CASE WHEN u.region_name = d.region_name AND u.route_id = d.route_id AND ISNULL(u.area_id,0) = ISNULL(d.area_id,0) THEN 1
											ELSE 0 END,@current_user_key,@current_date,1

										FROM #tblUserRRA u
										LEFT JOIN #tblUserDefaultRRA d
										ON u.region_name = d.region_name
										AND u.route_id = d.route_id
										AND ISNULL(u.area_id,0) = ISNULL(d.area_id,0)
										LEFT JOIN CES.ENTITLEMENT e
										ON u.route_id = e.ORG_SR_KEY
										AND ISNULL(u.area_id,0) = ISNULL(e.AREA_SR_KEY,0)
										AND e.USER_SR_KEY = @user_id
										
										WHERE e.ENTITLEMENT_SR_KEY IS NULL
									END

									IF EXISTS (SELECT 1 FROM CES.ENTITLEMENT E
									LEFT JOIN #tblUserRRA u
									ON u.route_id = e.ORG_SR_KEY
									AND ISNULL(u.area_id,0) = ISNULL(e.AREA_SR_KEY,0)
									WHERE E.USER_SR_KEY = @user_id 
									AND u.route_id IS NULL AND u.area_id IS NULL)
									BEGIN
										UPDATE e
										SET										 								
										E.isactive = 0,
										UPDATED_USER = @current_user_key,
										UPDATED_DATE = @current_date									
									FROM CES.ENTITLEMENT E
									LEFT JOIN #tblUserRRA u
									ON u.route_id = e.ORG_SR_KEY
									AND ISNULL(u.area_id,0) = ISNULL(e.AREA_SR_KEY,0)
									WHERE E.USER_SR_KEY = @user_id AND E.isactive = 1
									AND u.route_id IS NULL AND u.area_id IS NULL

									END
									

									SET @result= (
									SELECT 1 AS save_status,NULL AS error_msg
									FOR JSON PATH,WITHOUT_ARRAY_WRAPPER, INCLUDE_NULL_VALUES
									)
										
									COMMIT TRAN	
					END						

	

		 SELECT @result

		 

	END TRY
	BEGIN CATCH
		IF (@@TRANCOUNT >0)
			ROLLBACK TRAN
		IF @ErrorMsg IS NULL
			SET @ErrorMsg = ERROR_MESSAGE() 
		
		SET @ErrorDescription = @ErrorMsg + 
							' Line Num:' + CONVERT(VARCHAR(5), ERROR_LINE()) + 
							',ErrorNum:' + CONVERT(VARCHAR(5), ERROR_NUMBER()) + 
							',Severity:' + CONVERT(VARCHAR(5), ERROR_SEVERITY()) + 
							',State:' + CONVERT(VARCHAR(10), ERROR_STATE()) + 
							',Procedure:' + CONVERT(VARCHAR(25), OBJECT_NAME(@@procid)) +
							',Procedure:' + CONVERT(VARCHAR(25), ERROR_PROCEDURE())

		SET @result= (
						SELECT 0 AS save_status,@ErrorMsg AS error_msg, NULL AS user_id
						FOR JSON PATH,WITHOUT_ARRAY_WRAPPER, INCLUDE_NULL_VALUES
					)
		SELECT @result;

		DROP TABLE IF EXISTS #tblUserRRA;
		DROP TABLE IF EXISTS #tblUserDefaultRRA;
		DROP TABLE IF EXISTS #tblUserExistingRRA;

		THROW 50000,@ErrorMsg,1;

		
	END CATCH

	
	SET NOCOUNT OFF
END
=========================================================================================
/****** Object:  StoredProcedure [CES].[sp_Save_TasklistStatus]    Script Date: 3/26/2021 9:58:19 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/***************************************************************************************************************************************            
* Name						: sp_Save_TasklistStatus      
* Created By				: Cognizant            
* Date Created				: 04-Feb-2021           
* Description				: This stored procedure saves the work status of Task list.  
* Input Parameters			:	@Input_JSON -- send the exam_sr_key,task_list_id,task_list_stat combination as part of JSON
                                @Role_Name -- It should be like CEFA PM/Asset Engineer or Supplier roles
								@User_Key --64 bit object key of the user pressed the Save button   
* Output Parameters			: Returns 1 for succesful save, else 0            
* Return Value				: N/A            
* Assumptions				: None    
* Execution Statement		: Exec [CES].sp_Save_TasklistStatus '[{
																	"exam_sr_key": "1890",
																	"task_list_id": "3",
																	"task_list_stat": "1597"
																}]','CEFA PM','ssssss';
*												
* Modified Date     Modified By   Revision Number  Modifications            

*******************************************************************************************************************************************/ 



ALTER PROCEDURE [CES].[sp_Save_TasklistStatus]
	@Input_JSON		NVARCHAR(MAX),
	@Role_Name		VARCHAR(50),
	@User_Key		VARCHAR(64)

AS
BEGIN

	SET NOCOUNT ON
	BEGIN TRY
		DECLARE
				@ErrorMsg						VARCHAR(250),
				@ErrorDescription				VARCHAR(4000),
				@REF_VALUE						VARCHAR(500),
				@Tasklst_Stat_CEFAPMRvw_ID		DECIMAL(18),
				@Tasklst_Stat_Issue_ID			DECIMAL(18),
				@Tasklst_Stat_NRAgree_ID		DECIMAL(18),
				@Tasklst_Stat_Agree_ID			DECIMAL(18),
				@Exm_Re_Stat_Planned_ID			DECIMAL(18),
				@Exm_Re_Stat_Requested_ID		DECIMAL(18),
				@Exm_Re_Stat_Scheduled_ID		DECIMAL(18),
				@Output							BIT = 0,
				@Supplier_JSON					NVARCHAR(MAX),
				@PDF_JSON						NVARCHAR(MAX),
				@Current_Date					DATE = GETDATE()

			CREATE TABLE #tbl_TaskDtls
			(
				exam_sr_key		DECIMAL(18),
				task_list_id	DECIMAL(18),
				task_list_stat	DECIMAL(18)
			)

			CREATE TABLE  #tbl_ExamUpdate
			(
				exam_sr_key		DECIMAL(18),
				task_list_id	DECIMAL(18),
				supplier_id		DECIMAL(18)
			)


			--Parsing the input JSON
			INSERT INTO #tbl_TaskDtls
			(
				exam_sr_key,
				task_list_id,
				task_list_stat
			)
			SELECT 
				td.exam_sr_key,
				td.task_list_id,
				td.task_list_stat
			FROM	OPENJSON(@Input_JSON)
			WITH
				(
					exam_sr_key		DECIMAL(18),
					task_list_id	DECIMAL(18),
					task_list_stat	DECIMAL(18)
				) AS td;

			--Finding the task list IDs
			SELECT 
				@Tasklst_Stat_CEFAPMRvw_ID = MAX(CASE WHEN ts.REF_VALUE = 'Ready for CEFA PM Review' THEN ts.REF_VAL_SR_KEY ELSE 0 END),
				@Tasklst_Stat_Issue_ID = MAX(CASE WHEN ts.REF_VALUE = 'Issued' THEN ts.REF_VAL_SR_KEY ELSE 0 END),
				@Tasklst_Stat_NRAgree_ID = MAX(CASE WHEN ts.REF_VALUE = 'Ready for NR Agreement' THEN ts.REF_VAL_SR_KEY ELSE 0 END),
				@Tasklst_Stat_Agree_ID = MAX(CASE WHEN ts.REF_VALUE = 'Agreed' THEN ts.REF_VAL_SR_KEY ELSE 0 END)
            FROM [CES].[REFERENCE_VALUE] AS ts
			INNER JOIN [CES].[REFERENCE_TYPE] AS rt
			ON ts.REF_TYP_SR_KEY=rt.REF_TYP_SR_KEY
			WHERE rt.REF_TYP_CODE = 'TLS'
			
			--Finding the Exam Status IDs
			SELECT 
				@Exm_Re_Stat_Planned_ID = MAX(CASE WHEN ts.REF_VALUE = 'Planned' THEN ts.REF_VAL_SR_KEY ELSE 0 END),
				@Exm_Re_Stat_Requested_ID = MAX(CASE WHEN ts.REF_VALUE = 'Requested' THEN ts.REF_VAL_SR_KEY ELSE 0 END),
				@Exm_Re_Stat_Scheduled_ID = MAX(CASE WHEN ts.REF_VALUE = 'Scheduled' THEN ts.REF_VAL_SR_KEY ELSE 0 END)

            FROM [CES].[REFERENCE_VALUE] AS ts
			INNER JOIN [CES].[REFERENCE_TYPE] AS rt
			ON ts.REF_TYP_SR_KEY=rt.REF_TYP_SR_KEY
			WHERE REF_TYP_CODE = 'ERS'
			
			
			--- Validation Checks -- Start
				
			IF NOT EXISTS (SELECT 1 FROM #tbl_TaskDtls)
			BEGIN
				SET @ErrorMsg = 'Input parameter value is missing';
				THROW 50000,@ErrorMsg,1;
			END

			IF (@Role_Name NOT IN ('CEFA PM','Asset Engineer','Supplier Planner','Super User') )
			BEGIN
				SET @ErrorMsg = 'User does not have permission to save/submit for next level';
				THROW 50000,@ErrorMsg,1;
			END
			--- Validation Checks -- End

		---Update the Task List Status

		IF (@Role_Name = 'CEFA PM')
		BEGIN


			IF NOT EXISTS (SELECT 1 FROM #tbl_TaskDtls WHERE task_list_stat IN (@Tasklst_Stat_NRAgree_ID,@Tasklst_Stat_CEFAPMRvw_ID))
			BEGIN
				SET @ErrorMsg = 'No record(s) saved for the next level.';
				THROW 50000,@ErrorMsg,1;
			END
			ELSE
			BEGIN
			
				--CEFA PM can change the Task list status to Issued from Ready for CEFA PM review
				--Exam Status will also be changed to Requested
			 
				IF EXISTS (SELECT 1 FROM #tbl_TaskDtls WHERE task_list_stat = @Tasklst_Stat_CEFAPMRvw_ID)
				BEGIN
					BEGIN TRAN

						UPDATE ex
						SET
						   EXAM_REQ_STATUS = @Exm_Re_Stat_Requested_ID,    --'Requested'
						   UPDATED_USER = @User_Key,
						   UPDATED_DATE = @Current_Date
						OUTPUT INSERTED.EXAM_SR_KEY, INSERTED.WORK_SR_KEY, INSERTED.SUPPLIER_SR_KEY INTO #tbl_ExamUpdate
						FROM [CES].EXAM AS ex
						INNER JOIN #tbl_TaskDtls tsk
						ON ex.EXAM_SR_KEY = tsk.exam_sr_key
						WHERE tsk.task_list_stat = @Tasklst_Stat_CEFAPMRvw_ID
						AND ex.EXAM_REQ_STATUS = @Exm_Re_Stat_Planned_ID

					
						IF EXISTS (SELECT 1 FROM #tbl_ExamUpdate)
						BEGIN
							UPDATE w
							SET
							   WORK_STATUS = @Tasklst_Stat_Issue_ID,    --'Issued'
							   UPDATED_USER = @User_Key,
							   UPDATED_DATE = @Current_Date
							FROM [CES].WORK AS w
							--INNER JOIN #tbl_TaskDtls tsk
							--ON w.WORK_SR_KEY = tsk.task_list_id
							--AND w.WORK_STATUS = tsk.task_list_stat
							INNER JOIN #tbl_ExamUpdate tsk
							ON w.WORK_SR_KEY = tsk.task_list_id

							WHERE w.WORK_STATUS = @Tasklst_Stat_CEFAPMRvw_ID
						END	
					COMMIT TRAN

					IF @@ERROR = 0
						SET @Output = 1

					--SELECT @Supplier_JSON = 
					--	(
					--		SELECT DISTINCT Supplier_Id
					--		FROM #tbl_ExamUpdate 
					--		FOR JSON AUTO, INCLUDE_NULL_VALUES
					--	)

					SELECT @PDF_JSON = JSON_QUERY('[]')
				END
				--CEFA PM can also change the Task list status to Agreed from Ready for NR review
				--Exam Status will also be changed to Scheduled, Baseline Exam date will be freezed to Planned date then
				ELSE IF EXISTS (SELECT 1 FROM #tbl_TaskDtls WHERE task_list_stat = @Tasklst_Stat_NRAgree_ID)
				BEGIN
					--DELETE FROM #tbl_ExamUpdate

					BEGIN TRAN
						UPDATE ex
						SET
						   EXAM_REQ_STATUS = @Exm_Re_Stat_Scheduled_ID,    --'Scheduled'
						   EXAM_BASELINE_DATE = EXAM_PLANNED_DATE,
						   UPDATED_USER = @User_Key,
						   UPDATED_DATE = @Current_Date
						OUTPUT INSERTED.EXAM_SR_KEY, INSERTED.WORK_SR_KEY, INSERTED.SUPPLIER_SR_KEY INTO #tbl_ExamUpdate
						FROM [CES].EXAM AS ex
						INNER JOIN #tbl_TaskDtls tsk
						ON ex.EXAM_SR_KEY = tsk.exam_sr_key
						WHERE tsk.task_list_stat = @Tasklst_Stat_NRAgree_ID
						AND ex.EXAM_REQ_STATUS = @Exm_Re_Stat_Requested_ID

				
						IF EXISTS (SELECT 1 FROM #tbl_ExamUpdate)
						BEGIN
							UPDATE w
							SET
							   WORK_STATUS = @Tasklst_Stat_Agree_ID,    --'Agreed'
							   UPDATED_USER = @User_Key,
							   UPDATED_DATE = @Current_Date
							FROM [CES].WORK AS w
							--INNER JOIN #tbl_TaskDtls tsk
							--ON w.WORK_SR_KEY = tsk.task_list_id
							--AND w.WORK_STATUS = tsk.task_list_stat
							INNER JOIN #tbl_ExamUpdate tsk
							ON w.WORK_SR_KEY = tsk.task_list_id
							WHERE w.WORK_STATUS = @Tasklst_Stat_NRAgree_ID
						END
				
					COMMIT TRAN

					IF @@ERROR = 0
						SET @Output = 1

					IF EXISTS (SELECT 1 FROM #tbl_ExamUpdate)
					BEGIN

							-- PDF Generation output
							SELECT @PDF_JSON =
							(
									SELECT
										final.region,
										final.route,
										final.area,
										final.elr,
										final.railway_id,
										final.mileage_from,
										final.mileage_to,
										final.asset_grp,
										final.asset_type,
										final.asset_desc,
										final.asset_guid,
										final.exam_id,
										final.job_number,
										final.hce_flg,
										final.bcmi_required,
										final.specific_exam_req,
										final.nr_internal_note,
										final.tenanted_arch,
										final.exam_frequency,
										CASE WHEN final.exam_type IN ('Visual','Detailed','Enhanced') 
											THEN CONVERT(DATE, DATEADD( week, (0- ct.SITE_TOLERANCE_WEEKS), final.due_dt),103) 
											WHEN final.exam_type IN ('Underwater', 'Line Of Route' ) OR final.exam_type LIKE '%Additional%'
											THEN final.WORK_YR_START_DT 
											ELSE NULL
										END AS due_date_earliest,
										final.due_dt,
										CASE WHEN final.exam_type IN ('Visual','Detailed','Enhanced') 
											THEN CONVERT(DATE, DATEADD( week, ct.SITE_TOLERANCE_WEEKS, final.due_dt),103) 
											WHEN final.exam_type IN ('Underwater', 'Line Of Route' ) OR final.exam_type LIKE '%Additional%'
											THEN final.WORK_YR_END_DT 
											ELSE NULL
										END AS due_date_latest,
										CONVERT(DATE, DATEADD( week, ct.REVIEW_TOLERANCE_WEEKS, final.due_dt),103) AS max_tolerance_date,
										final.task_list_stat,
										final.exam_req_stat,
										final.exam_rpt_stat,
										final.exam_planned_date,
										final.exam_actual_date,
										final.other_supplier_comment,
										final.change_req_id,
										final.exam_baseline_plan_dt
									FROM
									(
										SELECT 
											o.REGION AS region,
											o.ROUTE AS route,
											a.AREA_NAME AS area,
											elr.ELR_CODE AS elr,
											ast.RAILWAY_ID AS railway_id,
											(ast.START_MILES + ast.START_YARDS/1760) AS mileage_from,
											(ast.END_MILES + ast.END_YARDS/1760) AS mileage_to,
											asg.ASSET_GROUP_DESC AS asset_grp,
											asp.ASSET_TYPE_DESC AS asset_type,
											ast.ASSET_NAME AS asset_desc,
											ast.ASSET_GUID AS asset_guid,
											ex.exam_id,
											NULL AS job_number,
											CASE WHEN ast.hce_flag = 'Y' THEN 'Yes' ELSE 'No' END AS hce_flg,
											NULL AS bcmi_required,
											ef.specific_exam_req,
											ex.INTERNAL_NOTES AS nr_internal_note,
											CASE WHEN ast.TENANTED_FLG = 'Y' THEN 'Yes'
												 WHEN ast.TENANTED_FLG = 'N' THEN 'No'
												 ELSE 'N/A'
											END AS tenanted_arch,
											(CAST(ISNULL(ef.INTERVAL_YEARS,0) AS VARCHAR) + 'y '+CAST(ISNULL(ef.INTERVAL_MONTHS,0) AS VARCHAR)+ 'm '+CAST(ISNULL(ef.INTERVAL_DAYS,0) AS VARCHAR)+ 'd') AS exam_frequency,
											--NULL AS due_date_earliest,
											wrk.EXAM_DUE_DATE AS due_dt,
											--NULL AS due_date_latest,
											--NULL AS max_tolerance_date,
											ws.REF_VALUE AS task_list_stat,
											eqs.REF_VALUE AS exam_req_stat,
											ers.REF_VALUE AS exam_rpt_stat,
											ex.EXAM_PLANNED_DATE AS exam_planned_date,
											ex.EXAM_ACTUAL_DATE AS exam_actual_date,
											ex.SUPPLIER_COMMENTS AS other_supplier_comment,
											ex.change_req_id,
											ex.EXAM_BASELINE_DATE AS exam_baseline_plan_dt,
											( (ISNULL(INTERVAL_YEARS,0)*12) + (ISNULL(INTERVAL_MONTHS,0)) + (ISNULL(INTERVAL_DAYS,0)/30) ) AS exam_freq_in_months,
											ex.EXAM_TYPE_SR_KEY,
											wrk.WORK_YR_START_DT,
											wrk.WORK_YR_END_DT,
											et.EXAM_TYPE

										FROM [CES].ASSET ast
										INNER JOIN [CES].ORG o
										ON ast.ORG_SR_KEY = o.ORG_SR_KEY
										INNER JOIN [CES].AREA a
										ON a.AREA_SR_KEY = ast.AREA_SR_KEY
										INNER JOIN [CES].ENGINE_LINE_REF elr
										ON elr.ELR_SR_KEY = ast.ENG_LINE_REF
										INNER JOIN [CES].ASSET_GROUP asg
										ON asg.ASSET_GROUP_SR_KEY = ast.ASSET_GROUP_SR_KEY
										INNER JOIN [CES].ASSET_TYPE asp
										ON asp.ASSET_TYPE_SR_KEY = ast.ASSET_TYPE_SR_KEY
										INNER JOIN [CES].EXAM ex
										ON ex.ASSET_GUID = ast.ASSET_GUID
										INNER JOIN #tbl_ExamUpdate eu
										ON eu.EXAM_SR_KEY = ex.EXAM_SR_KEY
										INNER JOIN [CES].WORK wrk
										ON wrk.WORK_SR_KEY = ex.WORK_SR_KEY
										AND wrk.ISACTIVE = 1
										INNER JOIN [CES].EXAM_TYPE et
										ON et.EXAM_TYPE_SR_KEY = ex.EXAM_TYPE_SR_KEY
										INNER JOIN [CES].SUPPLIER s
										ON s.SUPPLIER_SR_KEY = ex.SUPPLIER_SR_KEY
										LEFT JOIN [CES].REFERENCE_VALUE ws
										ON ws.REF_VAL_SR_KEY = wrk.WORK_STATUS
										LEFT JOIN [CES].REFERENCE_VALUE ers
										ON ers.REF_VAL_SR_KEY = ex.EXAM_REPORT_STATUS
										LEFT JOIN [CES].REFERENCE_VALUE eqs
										ON eqs.REF_VAL_SR_KEY = ex.EXAM_REQ_STATUS
										OUTER APPLY (
															SELECT 
																	ASSET_GUID,
																	EXAM_TYPE_SR_KEY,
																	INTERVAL_YEARS,
																	INTERVAL_MONTHS,
																	INTERVAL_DAYS,
																	specific_exam_req
															FROM
															(
																SELECT
																	ASSET_GUID,
																	EXAM_TYPE_SR_KEY,
																	INTERVAL_YEARS,
																	INTERVAL_MONTHS,
																	INTERVAL_DAYS,
																	EXAM_REQUIREMENT AS specific_exam_req,
																	ROW_NUMBER() OVER (PARTITION BY ASSET_GUID,EXAM_TYPE_SR_KEY ORDER BY EFFECTIVE_FROM_DT DESC) rnk
																FROM CES.EXAM_CYCLE
																WHERE ISACTIVE =1
																AND @current_date BETWEEN EFFECTIVE_FROM_DT AND ISNULL(EFFECTIVE_TO_DT,CONVERT(DATE,'31/12/9999',103))
																AND ASSET_GUID = ex.ASSET_GUID
																AND EXAM_TYPE_SR_KEY = ex.EXAM_TYPE_SR_KEY
															)t
															WHERE rnk = 1
														) ef
							
										WHERE
											ast.ISACTIVE= 1
										AND o.ISACTIVE = 1
										AND a.ISACTIVE = 1
										AND elr.ISACTIVE = 1
										AND asg.ISACTIVE = 1
										AND asp.ISACTIVE = 1
										AND ex.ISACTIVE = 1
										--AND et.ISACTIVE = 1
										AND s.ISACTIVE = 1
									)final
									INNER JOIN [CES].COMPLIANCE_TOLERANCE ct
									ON ct.EXAM_TYPE_SR_KEY = final.EXAM_TYPE_SR_KEY
									AND ct.ISACTIVE = 1
									AND final.exam_freq_in_months BETWEEN ct.FREQ_INTERVAL_MONTHS_FROM AND ct.FREQ_INTERVAL_MONTHS_TO
									FOR JSON PATH, INCLUDE_NULL_VALUES
							)
					END
				END

				--Required to send the supplier Ids so that UI can send the mail notification
				IF EXISTS (SELECT 1 FROM #tbl_ExamUpdate)
				BEGIN
					SELECT @Supplier_JSON = 
						(
							SELECT DISTINCT Supplier_Id
							FROM #tbl_ExamUpdate 
							FOR JSON AUTO, INCLUDE_NULL_VALUES
						)
						
				END
				ELSE
				BEGIN
						SET @ErrorMsg = 'No record(s) saved for the next level.';
						THROW 50000,@ErrorMsg,1;
				END
			END

		END
		
		--Asset Engineer can change the Task list status to Agreed from Ready for NR review
		--Exam Status will also be changed to Scheduled, Baseline Exam date will be freezed to Planned date then

		IF (@Role_Name IN ('Asset Engineer','Super User') )
		BEGIN
			IF EXISTS (SELECT 1 FROM #tbl_TaskDtls WHERE task_list_stat = @Tasklst_Stat_NRAgree_ID)
			BEGIN
				BEGIN TRAN
						UPDATE ex
						SET
						   EXAM_REQ_STATUS = @Exm_Re_Stat_Scheduled_ID,    --'Scheduled'
						   EXAM_BASELINE_DATE = EXAM_PLANNED_DATE,
						   UPDATED_USER = @User_Key,
						   UPDATED_DATE = @Current_Date
						OUTPUT INSERTED.EXAM_SR_KEY, INSERTED.WORK_SR_KEY, INSERTED.SUPPLIER_SR_KEY INTO #tbl_ExamUpdate
						FROM [CES].EXAM AS ex
						INNER JOIN #tbl_TaskDtls tsk
						ON ex.EXAM_SR_KEY = tsk.exam_sr_key
						WHERE tsk.task_list_stat = @Tasklst_Stat_NRAgree_ID
						AND ex.EXAM_REQ_STATUS = @Exm_Re_Stat_Requested_ID
						
						IF EXISTS (SELECT 1 FROM #tbl_ExamUpdate)
						BEGIN
							UPDATE w
							SET
							   WORK_STATUS = @Tasklst_Stat_Agree_ID,    --'Agreed'
							   UPDATED_USER = @User_Key,
							   UPDATED_DATE = @Current_Date
							FROM [CES].WORK AS w
							--INNER JOIN #tbl_TaskDtls tsk
							--ON w.WORK_SR_KEY = tsk.task_list_id
							--AND w.WORK_STATUS = tsk.task_list_stat
							INNER JOIN #tbl_ExamUpdate tsk
							ON w.WORK_SR_KEY = tsk.task_list_id
							WHERE w.WORK_STATUS = @Tasklst_Stat_NRAgree_ID
						END
						
				
					COMMIT TRAN

					
					IF EXISTS (SELECT 1 FROM #tbl_ExamUpdate)
					BEGIN

						SET @Output = 1

						SELECT @Supplier_JSON = 
							(
								SELECT DISTINCT Supplier_Id
								FROM #tbl_ExamUpdate 
								FOR JSON AUTO, INCLUDE_NULL_VALUES
							)

						-- PDF Generation output
						SELECT @PDF_JSON =
						(
									SELECT
										final.region,
										final.route,
										final.area,
										final.elr,
										final.railway_id,
										final.mileage_from,
										final.mileage_to,
										final.asset_grp,
										final.asset_type,
										final.asset_desc,
										final.asset_guid,
										final.exam_id,
										final.job_number,
										final.hce_flg,
										final.bcmi_required,
										final.specific_exam_req,
										final.nr_internal_note,
										final.tenanted_arch,
										final.exam_frequency,
										CASE WHEN final.exam_type IN ('Visual','Detailed','Enhanced') 
											THEN CONVERT(DATE, DATEADD( week, (0- ct.SITE_TOLERANCE_WEEKS), final.due_dt),103) 
											WHEN final.exam_type IN ('Underwater', 'Line Of Route' ) OR final.exam_type LIKE '%Additional%'
											THEN final.WORK_YR_START_DT 
											ELSE NULL
										END AS due_date_earliest,
										final.due_dt,
										CASE WHEN final.exam_type IN ('Visual','Detailed','Enhanced') 
											THEN CONVERT(DATE, DATEADD( week, ct.SITE_TOLERANCE_WEEKS, final.due_dt),103) 
											WHEN final.exam_type IN ('Underwater', 'Line Of Route' ) OR final.exam_type LIKE '%Additional%'
											THEN final.WORK_YR_END_DT 
											ELSE NULL
										END AS due_date_latest,
										CONVERT(DATE, DATEADD( week, ct.REVIEW_TOLERANCE_WEEKS, final.due_dt),103) AS max_tolerance_date,
										final.task_list_stat,
										final.exam_req_stat,
										final.exam_rpt_stat,
										final.exam_planned_date,
										final.exam_actual_date,
										final.other_supplier_comment,
										final.change_req_id,
										final.exam_baseline_plan_dt
									FROM
									(
										SELECT 
												o.REGION AS region,
												o.ROUTE AS route,
												a.AREA_NAME AS area,
												elr.ELR_CODE AS elr,
												ast.RAILWAY_ID AS railway_id,
												(ast.START_MILES + ast.START_YARDS/1760) AS mileage_from,
												(ast.END_MILES + ast.END_YARDS/1760) AS mileage_to,
												asg.ASSET_GROUP_DESC AS asset_grp,
												asp.ASSET_TYPE_DESC AS asset_type,
												ast.ASSET_NAME AS asset_desc,
												ast.ASSET_GUID AS asset_guid,
												ex.exam_id,
												NULL AS job_number,
												CASE WHEN ast.hce_flag = 'Y' THEN 'Yes' ELSE 'No' END AS hce_flg,
												NULL AS bcmi_required,
												ef.specific_exam_req,
												ex.INTERNAL_NOTES AS nr_internal_note,
												CASE WHEN ast.TENANTED_FLG = 'Y' THEN 'Yes'
													 WHEN ast.TENANTED_FLG = 'N' THEN 'No'
													 ELSE 'N/A'
												END AS tenanted_arch,
												(CAST(ISNULL(ef.INTERVAL_YEARS,0) AS VARCHAR) + 'y '+CAST(ISNULL(ef.INTERVAL_MONTHS,0) AS VARCHAR)+ 'm '+CAST(ISNULL(ef.INTERVAL_DAYS,0) AS VARCHAR)+ 'd') AS exam_frequency,
												--NULL AS due_date_earliest,
												wrk.EXAM_DUE_DATE AS due_dt,
												--NULL AS due_date_latest,
												--NULL AS max_tolerance_date,
												ws.REF_VALUE AS task_list_stat,
												eqs.REF_VALUE AS exam_req_stat,
												ers.REF_VALUE AS exam_rpt_stat,
												ex.EXAM_PLANNED_DATE AS exam_planned_date,
												ex.EXAM_ACTUAL_DATE AS exam_actual_date,
												ex.SUPPLIER_COMMENTS AS other_supplier_comment,
												ex.change_req_id,
												ex.EXAM_BASELINE_DATE AS exam_baseline_plan_dt,
												( (ISNULL(INTERVAL_YEARS,0)*12) + (ISNULL(INTERVAL_MONTHS,0)) + (ISNULL(INTERVAL_DAYS,0)/30) ) AS exam_freq_in_months,
												ex.EXAM_TYPE_SR_KEY,
												wrk.WORK_YR_START_DT,
												wrk.WORK_YR_END_DT,
												et.EXAM_TYPE
						
											FROM [CES].ASSET ast
											INNER JOIN [CES].ORG o
											ON ast.ORG_SR_KEY = o.ORG_SR_KEY
											INNER JOIN [CES].AREA a
											ON a.AREA_SR_KEY = ast.AREA_SR_KEY
											INNER JOIN [CES].ENGINE_LINE_REF elr
											ON elr.ELR_SR_KEY = ast.ENG_LINE_REF
											INNER JOIN [CES].ASSET_GROUP asg
											ON asg.ASSET_GROUP_SR_KEY = ast.ASSET_GROUP_SR_KEY
											INNER JOIN [CES].ASSET_TYPE asp
											ON asp.ASSET_TYPE_SR_KEY = ast.ASSET_TYPE_SR_KEY
											INNER JOIN [CES].EXAM ex
											ON ex.ASSET_GUID = ast.ASSET_GUID
											INNER JOIN #tbl_ExamUpdate eu
											ON eu.EXAM_SR_KEY = ex.EXAM_SR_KEY
											INNER JOIN [CES].WORK wrk
											ON wrk.WORK_SR_KEY = ex.WORK_SR_KEY
											AND wrk.ISACTIVE = 1
											INNER JOIN [CES].EXAM_TYPE et
											ON et.EXAM_TYPE_SR_KEY = ex.EXAM_TYPE_SR_KEY
											INNER JOIN [CES].SUPPLIER s
											ON s.SUPPLIER_SR_KEY = ex.SUPPLIER_SR_KEY
											LEFT JOIN [CES].REFERENCE_VALUE ws
											ON ws.REF_VAL_SR_KEY = wrk.WORK_STATUS
											LEFT JOIN [CES].REFERENCE_VALUE ers
											ON ers.REF_VAL_SR_KEY = ex.EXAM_REPORT_STATUS
											LEFT JOIN [CES].REFERENCE_VALUE eqs
											ON eqs.REF_VAL_SR_KEY = ex.EXAM_REQ_STATUS
											OUTER APPLY (
																SELECT 
																		ASSET_GUID,
																		EXAM_TYPE_SR_KEY,
																		INTERVAL_YEARS,
																		INTERVAL_MONTHS,
																		INTERVAL_DAYS,
																		specific_exam_req
																FROM
																(
																	SELECT
																		ASSET_GUID,
																		EXAM_TYPE_SR_KEY,
																		INTERVAL_YEARS,
																		INTERVAL_MONTHS,
																		INTERVAL_DAYS,
																		EXAM_REQUIREMENT AS specific_exam_req,
																		ROW_NUMBER() OVER (PARTITION BY ASSET_GUID,EXAM_TYPE_SR_KEY ORDER BY EFFECTIVE_FROM_DT DESC) rnk
																	FROM CES.EXAM_CYCLE
																	WHERE ISACTIVE =1
																	AND @current_date BETWEEN EFFECTIVE_FROM_DT AND ISNULL(EFFECTIVE_TO_DT,CONVERT(DATE,'31/12/9999',103))
																	AND ASSET_GUID = ex.ASSET_GUID
																	AND EXAM_TYPE_SR_KEY = ex.EXAM_TYPE_SR_KEY
																)t
																WHERE rnk = 1
															) ef
							
											WHERE
												ast.ISACTIVE= 1
											AND o.ISACTIVE = 1
											AND a.ISACTIVE = 1
											AND elr.ISACTIVE = 1
											AND asg.ISACTIVE = 1
											AND asp.ISACTIVE = 1
											AND ex.ISACTIVE = 1
											--AND et.ISACTIVE = 1
											AND s.ISACTIVE = 1
									)final
									INNER JOIN [CES].COMPLIANCE_TOLERANCE ct
									ON ct.EXAM_TYPE_SR_KEY = final.EXAM_TYPE_SR_KEY
									AND ct.ISACTIVE = 1
									AND final.exam_freq_in_months BETWEEN ct.FREQ_INTERVAL_MONTHS_FROM AND ct.FREQ_INTERVAL_MONTHS_TO

									FOR JSON PATH, INCLUDE_NULL_VALUES

						)
					END
					ELSE
					BEGIN
						SET @ErrorMsg = 'No record(s) saved for the next level.';
						THROW 50000,@ErrorMsg,1;
					END

					
			END
			ELSE
			BEGIN
				SET @ErrorMsg = 'No record(s) saved for the next level.';
				THROW 50000,@ErrorMsg,1;
			END
		END

		--Supplier Planner can change the Task list status to Ready for NR Review from Issued
		
		IF (@Role_Name = 'Supplier Planner')
		BEGIN
			IF EXISTS (SELECT 1 FROM #tbl_TaskDtls WHERE task_list_stat = @Tasklst_Stat_Issue_ID)
			BEGIN
				BEGIN TRAN
						UPDATE w
						SET
						   WORK_STATUS = @Tasklst_Stat_NRAgree_ID,    --'Agreed'
						   UPDATED_USER = @User_Key,
						   UPDATED_DATE = @Current_Date
						FROM [CES].WORK AS w
						INNER JOIN #tbl_TaskDtls tsk
						ON w.WORK_SR_KEY = tsk.task_list_id
						AND w.WORK_STATUS = tsk.task_list_stat
						WHERE tsk.task_list_stat = @Tasklst_Stat_Issue_ID
				
										
					COMMIT TRAN

					IF @@ERROR = 0
						SET @Output = 1

					SELECT @Supplier_JSON = JSON_QUERY('[]')
					SELECT @PDF_JSON = JSON_QUERY('[]')
						
			END
			ELSE
			BEGIN
				SET @ErrorMsg = 'No record(s) saved for the next level.';
				THROW 50000,@ErrorMsg,1;
			END
		END

	   	IF @Output <>0 		
			SELECT @Output AS SaveStatus,NULL AS ErrorMsg,@Supplier_JSON AS Supplier_dtls,@PDF_JSON AS PDF_dtls;

		DROP TABLE IF EXISTS #tbl_TaskDtls;
		DROP TABLE IF EXISTS #tbl_ExamUpdate;
					
	END TRY

	BEGIN CATCH
		IF (@@TRANCOUNT >0)
			ROLLBACK TRAN
		
		IF @ErrorMsg IS NULL
			SET @ErrorMsg = ERROR_MESSAGE() 
		
		SET @ErrorDescription = @ErrorMsg + 
							' Line Num:' + CONVERT(VARCHAR(5), ERROR_LINE()) + 
							',ErrorNum:' + CONVERT(VARCHAR(5), ERROR_NUMBER()) + 
							',Severity:' + CONVERT(VARCHAR(5), ERROR_SEVERITY()) + 
							',State:' + CONVERT(VARCHAR(10), ERROR_STATE()) + 
							',Procedure:' + CONVERT(VARCHAR(25), OBJECT_NAME(@@procid)) +
							',Procedure:' + CONVERT(VARCHAR(25), ERROR_PROCEDURE())

		SET @Output = 0;
		SELECT @Output AS SaveStatus,@ErrorMsg AS ErrorMsg, JSON_QUERY('[]') AS Supplier_dtls, JSON_QUERY('[]') AS PDF_dtls;

		DROP TABLE IF EXISTS #tbl_TaskDtls;
		DROP TABLE IF EXISTS #tbl_ExamUpdate;
					
		THROW 50000,@ErrorDescription,1;
	END CATCH

	SET NOCOUNT OFF
  END
=================================================================================================
